
$restusername = "adminrest"
$restpassword = "K2KKvHZ3iSYtK9TNm1A5RCpBZ9ZMI3hD"
$global:backupfolder = "c:\SBCBackups"
$Global:ProgressPreference = 'SilentlyContinue'

$global:LoginCredentials = "Username=" + $restusername + "&Password=" + $restpassword

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

if(!(Get-Command Import-Excel)){Install-Module -Name ImportExcel}

Write-Host "Importing Configuration Data" -ForegroundColor Magenta
$global:TrunkData = Import-Excel "c:\temp\allcustomers.xlsx" -WorksheetName TrunkConfig
$global:TeamsData = Import-Excel "c:\temp\allcustomers.xlsx" -WorksheetName TeamsConfig
$global:DDIData = Import-Excel "c:\temp\allcustomers.xlsx" -WorksheetName SBCConfig
$global:DDIData = $DDIData | where {$_.TrunkName -and $_.Customer}

#region _Constants
$SparkSignallingPort = 5060
$MSPhoneSystemPortStart = 5067
#endregion

#region _Global Functions
function _sbccore_loaddata($sbcfqdn){
    
    TransformationTable_Get $sbcfqdn
    SIPProfile_Get $sbcfqdn
    StaticIPRoute_Get $sbcfqdn
    LogicalInterface_GetSummary $sbcfqdn
    StaticHost_Get $sbcfqdn
    ToneTable_Get $sbcfqdn
    MediaCryptoProfiles_Get $sbcfqdn
    MediaProfile_Get $sbcfqdn
    MediaList_Get $sbcfqdn
    SIPTLSProfile_Get $sbcfqdn
    MessageManipulationElements_Get $sbcfqdn
    MessageManipulationTables_Get $sbcfqdn
    MessageManipulationRules_Get $sbcfqdn
    SIPSignallingGroup_Get $sbcfqdn
    SIPServerTable_Get $sbcfqdn 
    SIPServerEntry_Get $sbcfqdn 
    SIPContactRegister_Get $sbcfqdn
    RemoteAuthTable_Get $sbcfqdn
    RoutingTable_Get $sbcfqdn
    RoutingEntry_Get $sbcfqdn

    Write-Host
    Write-Host "#####################################################" -ForegroundColor White        
    Write-Host "Config Load Completed. Beginning Configuration check." -ForegroundColor White        
    Write-Host "#####################################################" -ForegroundColor White        
    Write-Host
}

function _sbccore_login($sbcfqdn){
    #if(!($sbcauthsession)){
        $ps = $null #declare empty variable session

        Write-Host "Invoking login Rest Method" -ForegroundColor Magenta
        
        $response = Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/login" -Method Post -Body $LoginCredentials -SessionVariable ps
        [xml]$loginxml = $response.trim()
        if($loginxml.root.status.http_code -eq "200"){
            Write-Host "Login to $($sbcfqdn) successful" -ForegroundColor Green
        } #if
    
    
        $global:sbcauthsession = $ps
    #}
    #new-object psobject -property @{session=$ps;response=$response;}
    
}

function CommitToSourceControl(){
    $datestamp = $(get-date -Format "yyyy/MM/dd HH:mm:ss")
        try{
             Set-Location $PSScriptRoot
             & 'C:\Program Files\Git\bin\git.exe' commit -a -m "Auto Commit on Run - $($datestamp)"
             & 'C:\Program Files\Git\bin\git.exe' push
        }catch{
            #install choco
            Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
            #install git
            choco install -y git
            Set-Location $PSScriptRoot
            & 'C:\Program Files\Git\bin\git.exe' commit -m "Auto Commit on Run - $($datestamp)"
        }

}

function GetActiveSBCs(){
$sbcarray = GetSBCsRespondingToPing
$backedupsbcs = @()
$returnarray = @()
cls
Write-Host "Performing backups on all SBCs" -ForegroundColor Yellow
foreach($sbcfqdn in $sbcarray){
     if($sbcfqdn -match ".*\..*"){
           _sbccore_login $sbcfqdn
            
            if(BackupSBC $sbcfqdn){
                Write-Host "$sbcfqdn backup completed successfully" -ForegroundColor Green
                $backedupsbcs += $sbcfqdn
            }

        }

}

if($backedupsbcs.length -gt 0){
    $backedupsbcs += "All"
     
    # $i=1
    # $array2 = @()
    # $backedupsbcs | %{
    #  $ChoiceButton = [char]$i
    #  $array2 += New-Object System.Management.Automation.Host.ChoiceDescription "&$ChoiceButton $_"
    #  $i++
    # }

    #$Title = "Title"
    #$Message = "What do you want to do?"
    #$Options = [System.Management.Automation.Host.ChoiceDescription[]]($array2)

    #$optionchosen = $host.ui.PromptForChoice($Title, $Message, $Options, 0)
    cls

    $textmenu = MenuFromArray $($backedupsbcs | sort)

    [int]$ans = Read-Host 'Enter selection'
    $optionchosen = $textmenu[$ans]
}

if($optionchosen -eq "All"){
    #All SBCs
    foreach($sbc in $backedupsbcs){
        if($sbc -ne "All"){
            $returnarray += $sbc
        }
    }
}else{
    $returnarray += $optionchosen
}




return $returnarray

}

function GetAppErrorCode($ErrorCode){

switch($ErrorCode){
			
0	{'Successfully connected to the service %1%'}
1	{'Failed to connect to the service %1%'}
2	{'Failed to retrieve data from service %1%'}
3	{'Object type not found for %1%.'}
4	{'Invalid Parent Tree Location %1%'}
5	{'Object not found for operation %1%.'}
6	{'Unknown action %1% requested.'}
7	{'Last Operation Timeout'}
8	{'Communication lost with another process during configuration validation.'}
9	{'Rotate Log Operation failed. Please refresh your view.'}
10	{'Multiple actions requested, actions can only be performed one at a time.'}
11	{'Internal error: malformed request. Missing information element for mask %1%'}
1000	{'The License system may be trying to use an invalid key %1%'}
1001	{'The license key applies to a different node %1%'}
1002	{'The license key expiry is past the present date %1%'}
1003	{'No license is available on the node %1%'}
1004	{'Licensed and installed hardware mismatch %1%'}
2001	{'Request for active alarms list failed. %1%'}
2002	{'Request for alarm miscellaneous details failed. %1%'}
2003	{'Request for alarm update failed. %1%'}
2004	{'Treelocation mismatch. %1%'}
2005	{'Failed to get active alarm table entry %1%'}
2006	{'Duplicate SNMP Manager address of %1% configured.'}
2007	{'SNMP managers count cannot be more than 10. %1%'}
2008	{'Request for Alarm configuration list failed.'}
2009	{'Failed to get alarm configuration for %1%'}
2010	{'Failed to get event history list'}
2011	{'Failed to get event history entry %1%'}
2012	{'Failed to clear the event history.'}
3001	{'Authentication failed for User (%1%) with error : dlopen() failure when dynamically loading a service module. Try again and contact the administrator if problem persists.'}
3002	{'Authentication failed for User (%1%) with error : Symbol not found. Try again and contact the administrator if problem persists.'}
3003	{'Authentication failed for User (%1%) with error : Error in service module. Try again and contact the administrator if problem persists.'}
3004	{'Authentication failed for User (%1%) with error : System error. Try again and contact the administrator if problem persists.'}
3005	{'Authentication failed for User (%1%) with error : Memory buffer error. Try again and contact the administrator if problem persists.'}
3006	{'Authentication failed for User (%1%) with error : Permission denied.'}
3007	{'Authentication failed for User (%1%) with error : Authentication failure.'}
3008	{'Authentication failed for User (%1%) with error : Can not access authentication data due to insufficient credentials.'}
3009	{'Authentication failed for User (%1%) with error : Underlying authentication service can not retrieve authentication information. Try again and contact the administrator if problem persists.'}
3010	{'Authentication failed for User (%1%) with error : User not known to the underlying authenticaiton module.'}
3011	{'Authentication failed for User (%1%) with error : An authentication service has maintained a retry count which has been reached. No further retries should be attempted.'}
3012	{'Authentication failed for User (%1%) with error : New authentication token required. This is normally returned if the machine security policies require that the password should be changed because the password is NULL or it has aged.'}
3013	{'Authentication failed for User (%1%) with error : User account has expired.'}
3014	{'Authentication failed for User (%1%) with error : Can not make/remove an entry for the specified session.'}
3015	{'Authentication failed for User (%1%) with error : Underlying authentication service can not retrieve user credentials. Try again and contact the administrator if problem persists.'}
3016	{'Authentication failed for User (%1%) with error : User credentials expired.'}
3017	{'Authentication failed for User (%1%) with error : Failure setting user credentials.'}
3018	{'Authentication failed for User (%1%) with error : No module specific data is present. Try again and contact the administrator if problem persists.'}
3019	{'Authentication failed for User (%1%) with error : Conversation error. Try again and contact the administrator if problem persists.'}
3020	{'Authentication failed for User (%1%) with error : Bad password format, please try again. Click ''Password Rules'' for help.'}
3021	{'Authentication failed for User (%1%) with error : Authentication information cannot be recovered. Try again and contact the administrator if problem persists.'}
3022	{'Authentication failed for User (%1%) with error : Authentication token lock busy. Try again and contact the administrator if problem persists.'}
3023	{'Authentication failed for User (%1%) with error : Authentication token aging disabled.'}
3024	{'Authentication failed for User (%1%) with error : Preliminary check by password service. Try again and contact the administrator if problem persists.'}
3025	{'Authentication failed for User (%1%) with error : Ignore underlying account module regardless of whether the control flag is required, optional, or sufficient.'}
3026	{'Authentication failed for User (%1%) with error : Critical error. Try again and contact the administrator if problem persists.'}
3027	{'Authentication failed for User (%1%) with error : User''s authentication token has expired.'}
3028	{'Authentication failed for User (%1%) with error : Module is not known. Try again and contact the administrator if problem persists.'}
3029	{'Authentication failed for User (%1%) with error : Bad item passed to authentication service. Try again and contact the administrator if problem persists.'}
3030	{'Authentication failed for User (%1%) with error : Conversation function is event driven and data is not available yet. Try again and contact the administrator if problem persists.'}
3031	{'Authentication failed for User (%1%) with error : please call this function again to complete authentication stack. Before calling again, verify that conversation is completed.'}
3032	{'Missing Information Element, cannot complete operation.'}
3033	{'Authentication failed for User (%1%) with error : User is not authorized.'}
3034	{'Your session is invalid. Please login again.'}
3035	{'User lookup failed : Failed to access database.'}
3036	{'User lookup failed : No users found.'}
3037	{'Session lookup failed : No active sessions found.'}
3038	{'Failed to modify user (%1%).'}
3039	{'Failed to modify user (%1%) - couldn''t expire user''s password.'}
3040	{'Failed to modify user (%1%) - user is not logged in.'}
3041	{'Failed to add user (%1%).'}
3042	{'Failed to delete user (%1%).'}
3043	{'Session not found.'}
3044	{'Session found, but the user (%1%) is not logged in.'}
3045	{'User authentication failed because no valid session ID could be generated.'}
3046	{'User cannot be created as user ID is out of the acceptable range (1001-60000).'}
3047	{'Failed to add user (%1%) as it already exists.'}
3048	{'Failed to add user (%1%) as the UID is not unique'}
4001	{'Duplicate Remote Log Servers configured for destination %1% with facility %2%'}
4002	{'Too many Remote Log Servers configured, %1% configured and only %2% allowed.'}
4003	{'Invalid syslog server IP or FQDN address.'}
4004	{'Default Level cannot be trace or debug for server %1%, level %2%.'}
5001	{'Hosts configuration failed'}
5050	{'Hosts configuration addition failed'}
5051	{'Hosts configuration deletion failed'}
5052	{'Node name configuration failed'}
5053	{'Node domain name configuration failed'}
5056	{'Invalid hostname and IP address'}
5057	{'Invalid IP address'}
5058	{'Invalid host name'}
5059	{'Invalid domain name'}
5060	{'Maximum hosts limit of 50 reached'}
5061	{'Host name and IP address combination already exists'}
5550	{'Domain Name: %1% is not valid'}
5551	{'IP Address: %1% is not valid'}
5552	{'Only 20 Split DNS servers can be configured'}
5553	{'Duplicate row with same IP %1% and Domain %2% found'}
5554	{'Split DNS configuration cannot have empty Domain name.'}
6001	{'Requested Action Failure because there already is the same action pending a result'}
6002	{'SBA Failure (%1%) occurred'}
6003	{'SBA netmask (%1%) is invalid.'}
6004	{'SBA IP address (%1%) is invalid.'}
6005	{'The requested event does not exist.'}
6006	{'Configured SBA IP address (%1%) is not applied as it is in use by another device.'}
6007	{'Configured SBA IP address (%1%) is not applied as it is in use by the SBC.'}
6008	{'Configured SBA IP address (%1%) is not applied as it is the current SBA IP address.'}
6009	{'Configured SBA IP addresses (%1%) are not applied as Windows does not support 2 adapter in the same subnet.'}
6010	{'PSTN Site (%1%) is being used by Appliance (%2%)'}
6011	{'Tenant (%1%) is being used by Site (%2%)'}
6012	{'Maximum (%1%) Tenant Update Time Windows can be created'}
8001	{'Configured Action is not supported.'}
8002	{'Cannot normalize from string field to value field with output as untranslated in normalization table %1%'}
8003	{'Cannot normalize different value field types with output as untranslated in normalization table %1%'}
8004	{'Cannot normalize from value field to string field with regex output and no regex input in normalization table %1%'}
8005	{'Cannot translate from string field to value field with output as untranslated in translation table %1%'}
8006	{'Cannot translate different value field types with output as untranslated in translation table %1%'}
8007	{'Cannot translate from value field to string field with regex output and no regex input in translation table %1%'}
8008	{'Cannot remove normalization table %1% in use by Action Set Entry %2%'}
8009	{'Cannot remove translation table %1% in use by Call Route Entry %2%'}
8010	{'Cannot remove Action Configuration %1% in use by Action Set Entry %2%'}
8011	{'Cannot remove Message Translation %1% in use by Call Route Entry %2%'}
8012	{'Cannot remove ReRoute %1% in use by Call Route Entry %2%'}
8013	{'Cannot remove Media Profile %1% in use by Call Route Entry %2%'}
8014	{'Action set entry %1% references unconfigured normlization table %2%'}
8015	{'Action set entry %1% references unconfigured success action %2%'}
8016	{'Action set entry %1% references unconfigured failure action %2%'}
8017	{'Call route entry %1% references unconfigured translation table %2%'}
8018	{'Call route entry %1% references unconfigured media list %2%'}
8019	{'Call route entry %1% references unconfigured cause code reroute %2%'}
8020	{'Call route entry %1% references unconfigured message translation table %2%'}
8021	{'Call route entry %1% references unconfigured signaling group %2%'}
8022	{'Call route entry %1% references no signaling group'}
8023	{'Call route entry %1% can not be added to unconfigured call route table %2%'}
8024	{'Translation table entry %1% can not be added to unconfigured translation table %2%'}
8025	{'Normalization table entry %1% can not be added to unconfigured normalization table %2%'}
8026	{'Action set entry %1% can not be added to unconfigured action set %2%'}
8027	{'Cannot remove Route Table %1% in use by Action %2%'}
8028	{'Cannot remove Signaling Group %1% in use by call route entry %2%'}
8029	{'Cannot find Callback Table %1% in use by Transformation Table Entry %2% (%3%).'}
8030	{'Call Route Table %1% in use by Action %2% (%3%) not found.'}
8031	{'Call route entry %1% references SG %2% that requires DSP for Media Mode.'}
8032	{'At least one Stream Mode must be set in Call route entry %1%.'}
8033	{'Direct media mode can not be mixed across Audio/Fax and Video/Application Stream Modes in Call route entry %1%.'}
8034	{'Invalid time %1% found in Time Of Day entry %2%.'}
8035	{'Invalid Day selection %1% found in Time Of Day entry %2%.'}
9001	{'Tree does not contain an item at location %1%'}
9002	{'Operation timed out while getting runtime data'}
9003	{'Wildcard tokens not supported at this operation'}
9006	{'TCA type %1% can not have raise threshold less than or equal to clear threshold.'}
10001	{'Invalid IP address or FQDN for SNMP manager.'}
10002	{'SNMPv2 community string cannot be empty.'}
10003	{'SNMPv3 Auth and Priv passwords must be at least 8 characters in length.'}
10004	{'Invalid SNMPv3 protocol combination. Valid combinations are ''No Auth, no Priv'', ''Auth and Priv'' or ''Auth and no Priv''.'}
10005	{'SNMPv3 USM User cannot be empty.'}
10006	{'Invalid SNMP version, must be 0 (v2) or 1 (v3).'}
10007	{'Invalid SNMPv2 community type. Only ''read-only'' (1) is supported.'}
12001	{'Invalid session.'}
12002	{'Bad Static Route configuration - due to %1%'}
12003	{'Bad DNS configuration - due to %1%'}
12004	{'Bad Domain/Host configuration - due to %1%'}
12005	{'Bad NTP configuration - due to %1%'}
12006	{'Bad URL configuration - due to %1%'}
12007	{'Bad Time Zone configuration - due to %1%'}
12008	{'Bad Date/Time configuration - due to %1%'}
12010	{'Bad DHCP Server configuration - due to %1%'}
12011	{'Failed to clear the DHCP leases - due to %1%'}
12050	{'Bad Interface configuration - %1%'}
12060	{'Bad ARP configuration - %1%'}
12066	{'Bad Bridge configuration - %1%'}
12070	{'Bad DHCP Object configuration - %1%'}
12076	{'Invalid ACL Rule configuration - %1%'}
12077	{'Invalid ACL List configuration - %1%'}
12080	{'Bad configuration for mirrored port - %1%'}
12081	{'Bad configuration for analyzer port - %1%'}
12082	{'Bad port mirror direction configuration - %1%'}
12083	{'Bad port mirror configuration - %1%'}
12090	{'Bad IPsec Connection configuration - due to %1%'}
12091	{'Failed to execute the IPsec restart system command. At least one tunnel must be activated to restart the service.'}
12092	{'Request to reset IPsec statistics failed.'}
12093	{'Bad IPsec configuration: %1%'}
12094	{'Bad IPsec configuration: %1%'}
12095	{'Bad IPsec configuration: %1%'}
12096	{'Bad IPsec configuration: %1%'}
12097	{'Bad IPsec configuration: %1%'}
12098	{'Bad IPsec configuration: %1%'}
12099	{'Bad IPsec configuration: %1%'}
12100	{'Bad IPsec configuration: %1%'}
12101	{'Bad IPsec configuration: %1%'}
12102	{'Bad IPsec configuration: %1%'}
12103	{'Bad IPsec configuration: %1%'}
12104	{'Bad IPsec configuration: %1%'}
12105	{'Bad IPsec configuration: %1%'}
12106	{'Bad Secret Setting: %1%'}
12107	{'Bad Secret Setting: %1%'}
12108	{'Bad IPsec configuration: %1%'}
12109	{'Bad IPsec configuration: %1%'}
12110	{'VLAN Interface is in use by the following %1%: %2%. Delete the VLAN IP interface binding and retry.'}
12111	{'VLAN is used as tagged member on the Port %1%. Delete the entry and retry.'}
12112	{'VLAN is used as default untagged VLAN for the %1%. Delete the entry and retry.'}
12114	{'%1% external interface name is not set'}
12115	{'%1% external interface %2% is not available'}
12116	{'%1% external interface %2% is not IPv4 mode'}
12117	{'%1% external interface %2% %3% IP address or netmask not valid'}
12118	{'Port Forward %1% port start value of %2% is outside allowed 2..65535 range'}
12119	{'Port Forward number of ports value %1% is outside allowed 1..65533 range'}
12120	{'Port Forward %1% start %2% plus number of ports %3% (%4%) exceeds 65535'}
12121	{'Port Forward %1% port %2% is reserved by the system, cannot be used'}
12122	{'RTP/RTCP Port range not found, check the Media System Configuration'}
12123	{'Port Forward %1% port %2% is within the RTP/RTCP Port Range of the Media System Configuration'}
12124	{'Port Forward %1% port range %2%-%3% overlaps the RTP/RTCP Port Range in the Media System Configuration'}
12125	{'Port Forward %1% port %2% is in use by the SIP SG Listen Port, Primary Key %3%'}
12126	{'NAT Interface configuration error. %1%'}
12127	{'NAT Port Forward configuration error. %1%'}
12128	{'NAT %1% IP Netmask is missing or not valid IPv4 format'}
12129	{'NAT %1% Private IP Address %2%'}
12130	{'NAT Port Forward IP Protocol %1% is not expected %2%..%3% value'}
12131	{'NAT %1% Primary Key %2% is outside expected %3%..%4% range'}
12132	{'NAT %1% config error, check Primary Keys %2% and %3% for %4%'}
12133	{'NAT %1% IP address %2% duplicates address of %3%, this is not allowed'}
12134	{'NAT Interface Private IP address and netmask %1%/%2% is not a valid configuration'}
12135	{'%1% port %2% is in use by NAT Port Forward entry at Primary key %3%. Using same port is not allowed'}
12150	{'Host/Gateway already configured for monitoring: %1%'}
12151	{'Bad Link Monitor Object configuration - %1%'}
12160	{'MST instance is in use by the following VLAN %1%. Delete the MST instance binding and retry.'}
12161	{'MST instance ID %1% is in use by row with ID %2% (%3%) and another row with ID %4% (%5%). Duplication of MST instance ID is not allowed'}
12162	{'MST instance with row ID %1% (%2%) has invalid values for bridge priority and/or port priority'}
12163	{'MST Instance ID 0 cannot be deleted'}
12164	{'Description of MST Instance ID 0 cannot be modified'}
12200	{'Failed to fork child process. Capture will not be performed.'}
12201	{'Packet Capture Information Element not found. Capture will not be performed.'}
12202	{'Packet capture already in progress, cannot start a new one.'}
12203	{'No packet capture in progress, cannot stop.'}
12204	{'Invalid packet capture options.'}
12205	{'Not enough storage space, please install external USB.'}
14001	{'No data at tree location %1%'}
14002	{'Invalid tree location %1%'}
14003	{'Data already exists at location %1%'}
14004	{'A SET operation is currently in progress. Wait for the other operation to complete, and retry.'}
14005	{'No filename was specified for import or export operation'}
14006	{'Internal communication error when validating configuration change'}
14007	{'Out of range value validation error at tree location %1%'}
14008	{'Empty string value validation error at tree location %1%'}
14009	{'Referenced configuration item not found validation error at tree location %1% %3% for element %2%'}
14010	{'Unique item not unique validation error at tree location %1%'}
14012	{'Port is in use by another Signaling Group. Delete the SG entry and retry again.'}
14013	{'Port %1% profile in use by ISDN Signaling Group %2%. Delete the SG entry and retry again.'}
14014	{'Configuration validation failed with no specified error.'}
14015	{'Could not create required directory structure.'}
14016	{'Could not extract the imported configuration.'}
14017	{'Could not generate node info file.'}
14018	{'Unsupported file extension for import operation.'}
14019	{'Wrong platform type found in the uploaded configuration.'}
14020	{'Password decryption failed, but the import went through. Please reset any configured passwords in the system.'}
14021	{'SG Protocol and Listen Port must be specified together, if at all.'}
14022	{'SIP SG %1% selected by Auto Configuration Task is not configured.'}
14023	{'Partial configuration import requires the source backup to be of the same release and major version as the one running on the SBC.'}
14024	{'Configuration restore cannot be done with a backup from a newer release than the one running on the SBC.'}
14025	{'Maximum number of entries allowed for the table %1% is %2%.'}
14026	{'Statically configured system DNS servers along with interface set for DHCP with DNS not allowed.'}
15000	{'Request to validate (%1%) certificate was successful'}
15001	{'Request to validate (%1%) certificate failed due to bad config parameters'}
15002	{'Not allowed to delete a (%1%) certificate from store'}
15003	{'Failed to authenticate (%1%) certificate due to bad encoding format, certificate contents or signature mis-match'}
15004	{'The (%1%) certificate is found to be missing from the holding store path'}
15005	{'The (%1%) private key is found to be missing from the key store for Server certificate'}
15006	{'Unable to locate the (%1%) certificate created in certificate store'}
15007	{'Unable to open the (%1%) file in the certificate store'}
15008	{'Unable to read the (%1%) file from the certificate store'}
15009	{'Unable to write to the (%1%) file in the certificate store'}
15010	{'Unable to append to the (%1%) file in the certificate store'}
15011	{'Unable to delete (%1%) file from the certificate store'}
15012	{'Unable to make a copy of (%1%) file the certificate store'}
15013	{'Memory error encountered when validating the (%1%) certificate'}
15014	{'Request to import (%1%) certificate failed due to expired dates: %2%'}
15015	{'Failed to read the (%1%) private key from key store'}
15016	{'Failed to append the (%1%) private key to the Server certificate in store'}
15017	{'Failed to import a duplicate common name (%1%) and serial number (%2%) certificate which already exist in store'}
15018	{'Request to replace an existing common name (%1%) and serial number (%2%) certificate failed. First delete the existing certificate, and retry'}
15019	{'(%1%) certificate Extended Key Usage must contain the required Server Authentication value'}
15020	{'Failed to authenticate (%1%) certificate, X509 Verify Error (%2%): (%3%)'}
15022	{'Failed to %1% certificate and key file as no certificate matches private key'}
15023	{'Failed to %1% certificate and key file due to internal error from the SSL stack.'}
15024	{'Failed to %1% certificate and key file due to MAC verify error. Please provide a valid password.'}
15025	{'Certificate file name cannot be empty or exceed the maximum size limit %1%.'}
15026	{'Certificate file data content cannot be empty or exceed the maximum size limit %1%.'}
15027	{'Certificate file import type out of range value validation error.'}
15028	{'Certificate file type out of range value validation error.'}
15029	{'Certificate file format out of range value validation error.'}
15030	{'Certificate file operation out of range value validation error.'}
15031	{'Certificate P12 file password cannot be empty or exceed the maximum size limit %1%.'}
15032	{'(%1%) certificate Key Usage purpose restricts use of Non Repudiation service'}
15033	{'(%1%) certificate Extended Key Usage must contain the required Server Authentication value and Key Usage purpose restricts use of Non Repudiation service'}
16001	{'Active directory query failed.'}
16002	{'Active directory query is not supported in this (%1%) mode.'}
16003	{'Active directory test-connection failed.'}
16004	{'Information Element missing in the request.'}
16005	{'Unknown tree ID (%1%) scope (%2%) requested, cannot process the request.'}
16006	{'Request to reset statistics failed.'}
16007	{'Bad configuration - Domain-controller cannot be empty.'}
16008	{'Bad configuration - Attribute list cannot be empty.'}
16009	{'Bad configuration - Search scope cannot be empty.'}
16010	{'Bad configuration - LDAP Query cannot be empty.'}
16011	{'Bad configuration - No username specified.'}
16012	{'Bad configuration - No password specified. If password was specified then disable AD and configure password on all Domain Controllers. Then enable AD.'}
16013	{'Bad configuration - Update frequency should be 5 mins at the minimum.'}
16014	{'Bad configuration - Update frequency can be 365 days at the maximum.'}
16015	{'AD is not enabled.'}
16016	{'Bad configuration - AD cannot be in an enabled state with no DCs.'}
16017	{'Bad configuration - When AD is enabled, Secondary Authentication Domain Controller cannot be deleted.'}
16018	{'Bad configuration - Duplicate entry detected, cannot add this domain controller. To successfully add a new domain controller, make sure that the entry has a unique combination of IP Address/FQDN, Search Scope and LDAP Query.'}
16019	{'Domain controller ID out of bounds, cannot add new domain controller.'}
16020	{'Primary and Secondary AD Domain Controllers cannot be the same.'}
16021	{'Active Directory cache refresh is in progress. Please wait for that to finish before requesting a refresh again.'}
16022	{'Bad configuration - Cannot assign two DC''s of the same priority and DC type.'}
16023	{'Bad configuration - Only 2 Authentication DC''s and 5 Call Routing DC''s are allowed.'}
16024	{'Bad configuration - Cannot configure first update time when update by time is false.'}
16025	{'Bad configuration - Incorrect time format, specify hh:mm:ss in 24 hour format.'}
16026	{'Bad configuration - Primary DC row does not exist.'}
16027	{'Bad configuration - DC Role set to Primary. Primary DC row must be 0.'}
16028	{'Bad configuration - Primary DC row cannot point to itself.'}
16029	{'Bad configuration - DC Role set to Backup. Two DC''s are linked to each other as the primary.'}
16030	{'Active Directory On Premise PBX update is in progress. Please wait for that to finish before requesting a refresh again.'}
16031	{'Cannot set AD cache encryption if AD mode is not Updates or Cache only.'}
17000	{'Successfully retreived Inventory at location %1%'}
17001	{'Tree does not contain an Item at location %1%'}
17002	{'No Inventory Data for location %1%'}
17003	{'Missing location information'}
18001	{'Tone Table %1% Not Found'}
18002	{'Port Profile %1% Not Found'}
18003	{'MediaList %1% Not Found'}
18004	{'Crypto Profile %1% Not Found'}
18005	{'Voice or Fax Profile %1% Not Found'}
18006	{'Channel %1% Not Found'}
18007	{'Incorrect Admin Action %1% on the Channel %2%'}
18008	{'Reroute profile %1% Not Found'}
18009	{'Message Translation Table %1% Not Found'}
18010	{'A Message Translation Profile Not Found in Table %1%'}
18011	{'SG %1% is Disabled or Not Present'}
18012	{'Media List %1% In Use'}
18013	{'Tone Profile %1% In Use'}
18014	{'Port Profile %1% In Use by a SG. Delete the SG entry and retry again.'}
18015	{'Crypto profile %1% In Use'}
18016	{'Voice/Fax Profile %1% In Use'}
18017	{'Call Route Table is not set for SG %1%'}
18018	{'Call Route Table %1% is in use by a SG'}
18019	{'ActionSet Table %1% is in use by a SG'}
18020	{'Could not add %1% channels. Channel limit 4000 exceeded'}
18021	{'Channel %1% operation failed'}
18022	{'Channel %1% operation timeout'}
18023	{'SIP Signalling Group Index %1% Out of range'}
18024	{'ISDN Signalling Group Index %1% Out of range'}
18025	{'Voice Codec Profile Index %1% Out of range'}
18026	{'FAX Codec Profile Index %1% Out of range'}
18027	{'Cause code reroute table %1% is empty.'}
18028	{'Voice Codec Media Type %1% Out of range'}
18029	{'Supplementary profile %1% Not Found'}
18030	{'CAS channel(s) is(are) in busy list'}
18031	{'Invalid fractional channel in use for port type %1% in ISDN SG %2%'}
18032	{'Mutiple Codecs %2% with the same payload type %1% found In MediaList profile'}
18033	{'Bad Media System Configuration: %1%'}
18034	{'Channel: %1% not currently allocated for calls'}
18035	{'Fax media profile should not be the first profile in the Media Profile List.'}
18036	{'Fax media profile should not be the only profile in the Media Profile List.'}
19001	{'(%1%) Failed as framing type provided is not valid for the physical type provided.'}
19002	{'(%1%) Failed as coding type provided is not valid for the physical type provided.'}
19003	{'(%1%) Failed as coding type and framing type provided are not valid for the physical type provided.'}
19004	{'(%1%)Ports in the configuration that have corresponding ports on the hardware can''t be deleted'}
19005	{'(%1%) Port configuration table does not exist'}
19006	{'(%1%) Failed to set clock as primary and secondary DS1 Layer 1 are down'}
19007	{'(%1%) Failed to set clock as primary DS1 Layer 1 is down'}
19008	{'(%1%) Failed to set clock as secondary DS1 Layer 1 is down'}
19009	{'(%1%) Failed to set clock as DS1 Port is disabled'}
19010	{'(%1%) Ports on the hardware does not support the relay capability'}
19011	{'(%1%) Cannot enable port in passthru mode'}
20000	{'Internal server error - %1%. Please refresh the view and try the operation again.'}
20001	{'No default handler found for the operation.'}
20002	{'Delete on ''%1%'' should be performed as an action.'}
20003	{'Ethernet ports on the main board can''t be deleted.'}
20004	{'The management ethernet port cannot be disabled.'}
20005	{'More than one partition cannot be set active at a time.'}
20006	{'Object does not exist.'}
20007	{'The eth0 (management) logical interface cannot be disabled.'}
20008	{'The currently logged in user cannot be deleted.'}
20009	{'Unable to open login message file for writing.'}
20010	{'Microsoft UC Setup Task failed. Please check the following in the settings tree: %1%'}
20011	{'Partition cannot be set active when the Base Software Version is ''Unknown'''}
20012	{'Object ID %1% of type %2% does not exist. Please refresh your view.'}
20013	{'Object ID %1% of type %2% already exists. Please refresh your view.'}
20014	{'A mediation server is already configured as a SIP Signaling Group federated server'}
20015	{'A mediation server or border element server is already configured as a SIP Signaling Group federated server'}
20016	{'The communications server pool is already configured as a SIP Signaling Group federated server'}
20017	{'Either the communications server pool or a border element server is already configured as a SIP Signaling Group federated server'}
20018	{'The Modify Application IP Task failed for the following reason(s): %1%'}
20019	{'The DS1 port type couldn''t be set for the following ports: %1%'}
20020	{'The Import Authorization Table task failed because the file upload failed'}
20021	{'The Import Authorization Table task failed because the file couldn''t be parsed. Please verify that this is a CSV file with three columns, Address of Record, Username, and Password'}
20022	{'The Import Authorization Table task failed because the new authorization table couldn''t be created.'}
20023	{'The Import Authorization Table task failed because the existing authorization table entries couldn''t be removed.'}
20024	{'The Import Authorization Table task failed because the updated authorization table entries couldn''t be added'}
20025	{'The Import Authorization Table task failed because one or more rows don''t have three columns.'}
20026	{'The Import Authorization Table task failed because one or more rows have data that''s too large.'}
20027	{'Failed to perform action %1%.'}
20028	{'Failed to retrieve status for action %1%.'}
20029	{'Internal error serving REST request: failed to convert object reference into href.'}
20030	{'Internal error serving REST request: unknown error.'}
20031	{'ID is out of expected range'}
20032	{'REST session is not authenticated.'}
20033	{'REST resource has null type.'}
20034	{'REST request has unsupported method for the resource.'}
20035	{'REST request contains invalid filter for the resource.'}
20036	{'REST request contains invalid resource ID or resource ID is not present.'}
20038	{'Validation Error - Out of range value for resource %1% ID %2%'}
20039	{'Validation Error - Empty string value for resource %1% ID %2%'}
20040	{'Validation Error - Resource %1% ID %2% (%4%) could not find configuration item it is using in element %3%'}
20041	{'Validation Error - Unique item not unique for resource %1% ID %2%'}
20042	{'Failed to generate CSR: Error while generating SAN Field'}
20043	{'Failed to generate CSR: Unable to generate private key or CSR'}
20044	{'Failed to generate CSR: Unable to export private key to a file'}
20045	{'Incomplete parameters in request'}
20046	{'Invalid action %1% provided in the request.'}
20047	{'Action setactive cannot be performed on the boot partition.'}
20048	{'Unable to calibrate FXO Port %1%: %2%'}
20049	{'RemotePortValues and LocalPortValues must be empty'}
20050	{'Validation Error - %3% is in use by resource %1% ID %2% (%4%)'}
20051	{'SBA Failure Error - %1%'}
20052	{'Internal Server Error - SBA responded without an export filename'}
20053	{'An action is currently being performed on the SBA.'}
20054	{'Incorrect order of action %1% in setting up the SBA. Ensure that the previous action is performed.'}
20055	{'Initial Setup Failed. Error: %1%'}
20056	{'REST: importconfig action requires a MaskedItems attribute unless ConfigMaskUsage is 0'}
20057	{'Lookup failed for object type %1%, ID %2%'}
20058	{'The Account Status for the currently logged in user cannot be changed.'}
20059	{'The Modify Default VLAN Application Task failed for the following reason(s): %1%'}
20060	{'Password recovery maintenance user not allowed to delete, enable or disable other users.'}
20061	{'Cannot configure AMR WB codec, AMR WB license not enabled.'}
20062	{'The Payload Type value conflicts with some of the payload types in the media list.'}
20063	{'Error occurred while deleting file - %1%'}
20064	{'Cannot have more than 48 channels or phone numbers in the list.'}
20065	{'Provisioning Setup Task failed. Error: %1%'}
20066	{'Failed to write CCE INI configuration file %1%'}
20067	{'Unable to parse CCE Configuration INI text, cannot save as a CCE Configuration file'}
20068	{'Cannot revert to the current running CCE configuration, no such CCE configuration file exists.'}
20069	{'Unable to write CCE Configuration INI file. Reason: %1%'}
20070	{'Secondary Gateway configuration error: IP address not provided, and the SBC cannot resolve the FQDN %1%'}
20071	{'Failover redundancy cannot be selected when tagged VLANs are configured.'}
20072	{'Failover redundancy cannot be selected unless primary logical interface has an IP address.'}
20073	{'Redundancy cannot be configured if secondary I/F has Static or Dynamic IP address.'}
20074	{'Redundant Ethernet port already configured for redundancy.'}
20075	{'Redundancy must be set to none before changing redundant port.'}
20076	{'Unable to find redundant Ethernet port.'}
20077	{'Redundancy cannot be configured if primary I/F has DHCP IP address.'}
20078	{'At least one IP address must be assigned for Primary Interface in Redundant Pair.'}
20080	{'Default Untagged VLAN must be set to ''%1%'' VLAN before setting Redundancy.'}
20081	{'DHCP cannot be configured for interface in a redundant Ethernet pair.'}
20084	{'Forbidden file Request'}
20085	{'File does not exist'}
21001	{'ISDN Signaling Groups %1% and %2% are both using the same port %3%.'}
21002	{'ISDN SG %1% of type %2% not allowed on %3% cards.'}
21003	{'BRI ISDN Signaling Group %1% set to Network side using port %2% which is not set to terminated. Termination must be enabled for Network side.'}
21004	{'BRI ISDN Signaling Group %1% using port %2% is not set to User side and is being used for system timing. Side must be set to User to use as a system timing reference.'}
21005	{'Port %1% in use by ISDN Signaling Group %2% not found.'}
22001	{'Missing Information Element (IE).'}
22002	{'Invalid node specified for the action.'}
22003	{'Unable to locate the specified process.'}
22004	{'General execution error occurred.'}
22005	{'Busy executing previous operation.'}
22006	{'Unknown action requested.'}
22007	{'Wrong or missing hw_id in restore file.'}
22008	{'Wrong platform type in configuration backup.'}
22009	{'Code version not allowed for hardware configuration, minimum required is %1%.'}
23001	{'Selected RADIUS operating mode is not supported.'}
23002	{'Missing Information Element (IE).'}
23003	{'Server IP/FQDN must be specified to successfully add RADIUS server.'}
23004	{'Illegal port selected for RADIUS service.'}
23005	{'Primary RADIUS authentication server must be selected.'}
23006	{'Duplicate RADIUS server entry detected.'}
23007	{'Server shared-secret must be specified to successfully add RADIUS server.'}
23008	{'Primary authentication server cannot be deleted from the list.'}
23009	{'Secondary authentication server cannot be deleted from the list.'}
23010	{'Cannot display counter information as the requested RADIUS server ID is incorrect.'}
23011	{'RADIUS user login failed.'}
23012	{'RADIUS server ID out of bounds, cannot add new RADIUS server.'}
23013	{'Primary and Secondary Radius servers can not be the same.'}
23014	{'RADIUS Accounting server must be selected.'}
23015	{'Accounting Server 1 cannot be deleted from the list.'}
23016	{'Accounting Server 2 cannot be deleted from the list.'}
23017	{'Primary Radius server with valid port must be selected.'}
23018	{'Secondary Radius with valid port must be selected.'}
23019	{'Accounting server1 with valid port must be selected.'}
23020	{'Accounting server2 with valid port must be selected.'}
23021	{'Accounting server1 and Accounting server2 Radius servers can not be the same.'}
23022	{'Authentication and Accounting ports can not be the same.'}
24001	{'Another music file upload is already in progress.'}
24002	{'An internal error ocurred while attempting music file upload - error code 2.'}
24003	{'An internal error ocurred while attempting music file upload - error code 3.'}
24004	{'An internal error ocurred while attempting music file upload - error code 4.'}
24005	{'An internal error ocurred while attempting music file upload - error code 5.'}
24006	{'Invalid music file filename provided.'}
24007	{'Music file size is out of the supported range.'}
24008	{'Unable to locate the selected music file.'}
24009	{'An internal error ocurred while attempting music file upload - error code 9.'}
24010	{'The selected WAV file contains an unsupported audio format. WAV files must be 8kHz sample rate mono audio, with aLaw, uLaw, or linear PCM encoding.'}
24011	{'The selected music file appears to contain an unsupported audio format. Supported file types include .wav, .pcm, .pcma, .pcmu, and .g726.'}
24012	{'Change MOH source failed. Need to wait for MOH file upload finished.'}
24013	{'Unable to upload the MOH file while DSP recovery is on-going. Need to wait for DSP recovery completed.'}
24014	{'Unable to delete MOH file.'}
31001	{'SG (%1%) cannot use incomplete cluster (%2%). Add at least one server.'}
31002	{'SG (%1%) outbound group must have valid server cluster.'}
31003	{'Cannot delete SIP to Q.850 mapping (%1%). It is in use by SG (%2%).'}
31004	{'Cannot delete Q.850 to SIP mapping (%1%). It is in use by SG (%2%).'}
31005	{'Cannot delete SIP profile (%1%). It is in use by SG (%2%).'}
31006	{'Registrar Table %1% being used by SIP Signaling Group %2% (%3%) not found.'}
31007	{'Cannot delete SIP server cluster (%1%). It is in use by SG (%2%).'}
31008	{'Found server(s) (%1%) which doesn''t belong to any cluster.'}
31009	{'Cannot delete TLS profile (%1%). It is in use by SG/Server (%2%).'}
31010	{'Cannot delete Remote Authorization Table (%1%). It is in use by Server (%2%).'}
31011	{'Cannot delete Contact Registrant Table (%1%). It is in use by Server (%2%).'}
31012	{'Invalid Federated IP/FQDN (%1%) mask. General note when entering ''Federated IP(FQDN) Mask'': Mask 0.0.0.0 is allowed only with IP 0.0.0.0. When mask is blank 255.255.255.255 is assumed.'}
31013	{'Invalid ''Federated IP(FQDN)/Mask'' combination: %1%. General note when entering ''Federated IP(FQDN)/Mask'': Mask 0.0.0.0 is allowed only with IP 0.0.0.0. When mask is blank 255.255.255.255 is assumed.'}
31014	{'Network interface: %1% (%2%) is in use by SIP SG(s): %3%. Clear the calls and disable the SIP SGs before changing network interface. After the change enable SIP SGs.'}
31015	{'%1% port in use by TCP and TLS protocols.'}
31016	{'%1% is in use by SIP SG(s): %2%.'}
31017	{'%1% is in use by MessageTableId:RuleId= %2%.'}
31018	{'Number of SIP Message rules in a table should not exceed 32.'}
31019	{'Invalid Federated IP address in SG(%1%).'}
31020	{'Can''t mix server types IP/FQDN and DNS-SRV in the same SIP Server Table (%1%).'}
31021	{'All Stream Modes can not be Disabled in SG(%1%).'}
31022	{'Can''t have DNS-SRV entries with same Domain/FQDN and protocol in SIP Server Table (%1%).'}
31023	{'Only one DNS-SRV Domain/FQDN allowed per SIP Server Table (%1%).'}
31024	{'Trunk group %1% references non-existing signaling group %2%'}
31025	{'Trunk group %1% references no signaling groups'}
31026	{'Trunk group %1% has an invalid Trunk ID %2%'}
31027	{'Trunk group %1% has an invalid Trunk-Context %2%'}
31028	{'Signaling Group %1% Listen Protocol and SIP Server Host Protocol mismatch'}
31029	{'Cipher %1% in TLS Profile %2% is not supported.'}
31030	{'Cipher %1% invalid TLS Profile %2% is repeated.'}
31031	{'Invalid cipher %1% for configured TLS Protocol %2% in TLS-profile %3%.'}
31032	{'SIP server is last entry in table and in use by SG %1%.'}
31033	{'Found NAT Prefix Entry (%1%) which doesn''t belong to any Qualified Prefix Table.'}
31034	{'NAT Qualified Prefix Entry has an invalid IP (%1%).'}
31035	{'NAT Qualified Prefix Entry has an invalid Netmask (%1%).'}
31036	{'SIP Server table is in use by SG %1%.'}
31037	{'Duplicate IP/FQDN and netmask/prefix found.'}
31038	{'Signaling Group %1% Listen Protocol and SIP Voice Quality Server Transport Protocol mismatch.'}
31039	{'Cannot delete the Signaling Group %1% . It is in use by the SIP Voice Quality Server.'}
31040	{'SIP Profile attribute ''Send Number of Audio Channels'' must be false for SG %1% with Interop Mode 0365.'}
31041	{'Signaling Group %1% supports only DSP Audio Stream Mode for Media List %2%.'}
32001	{'SG (%1%) Loop Start FXS Profile must have valid profile.'}
32002	{'SG (%1%) Loop Start FXO Profile must have valid profile.'}
32003	{'SG (%1%) E&M Profile must have valid profile.'}
32004	{'SG (%1%) R2 Profile must have valid profile.'}
32005	{'Cannot delete FXS profile (%1%). It is in use by SG (%2%).'}
32006	{'Cannot delete FXO profile (%1%). It is in use by SG (%2%).'}
32007	{'Cannot delete E&M profile (%1%). It is in use by SG (%2%).'}
32008	{'Cannot delete R2 profile (%1%). It is in use by SG (%2%).'}
32009	{'Channel %1%.%2%.%3% is assigned to Signaling Groups %4% and %5%.'}
32010	{'Signaling Group %1% channel list incorrectly defined.'}
33001	{'RIP configuration failed %1% .'}
33002	{'RIP instance already present, only 1 instance allowed.'}
33003	{'Bad Routing Protocol - %1%'}
33004	{'Bad OSPF Area ID Configuration - %1%'}
33005	{'Bad OSPF Area Type Configuration - %1%'}
33006	{'Bad OSPF Router ID Configuration -%1%'}
33007	{'Bad OSPF configuration - %1%'}
33008	{'Bad Routing interface configuration - %1%'}
33009	{'OSPF process ID %1% is already configured in OSPF, use a different process ID.'}
33010	{'OSPF Router ID is already configured in OSPF, use a different Router ID.'}
33011	{'OSPF process ID cannot be modified. Use configured process ID for attribute: OSPFProcessID'}
33012	{'OSPF Area ID cannot be modified. Use configured Area ID for attribute: OSPFAreaID'}
33013	{'OSPF Area Type cannot be modified. Use configured Area Type for attribute: OSPFAreaType'}
33014	{'Maximum Router Instances limit reached. Only 6 Routing Instances are allowed.'}


}
}

function GetSBCsRespondingToPing(){

$activesbcfqdns = @()
$returnarray = @()

$entries = Get-Content $env:SystemRoot\system32\drivers\etc\hosts | where {$_ -match "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s(.*\.365calling\.nz)$"}
$365CallingSBCFQDNs = @()

foreach($entry in $entries){
    $entry -match "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s*(.*\.365calling\.nz)" | out-null
    $365CallingSBCFQDNs += $matches[2]
}

foreach($sbcfqdn in $365CallingSBCFQDNs){

$pingtest = Test-NetConnection $sbcfqdn -Port 443 -ErrorAction SilentlyContinue -WarningAction SilentlyContinue
#$pingtest

    if($pingtest.tcptestsucceeded){
        $activesbcfqdns += $sbcfqdn
    }
}

return $activesbcfqdns



}

Function ConvertTo-BinaryIP( [String]$IP ) { 
 
  $IPAddress = [Net.IPAddress]::Parse($IP) 
 
  Return [String]::Join('.', 
    $( $IPAddress.GetAddressBytes() | %{ 
      [Convert]::ToString($_, 2).PadLeft(8, '0') } )) 
} 
  
Function IsPrivateNetwork( [String]$IP){ 
    If ($IP.Contains("/")) 
    { 
        $Temp = $IP.Split("/") 
        $IP = $Temp[0] 
    } 
   
    $BinaryIP = ConvertTo-BinaryIP $IP; $Private = $False 
   
    Switch -RegEx ($BinaryIP) 
    { 
        "^1111" { $Class = "E"; $SubnetBitMap = "1111" } 
        "^1110" { $Class = "D"; $SubnetBitMap = "1110" } 
        "^110"  { $Class = "C" 
                    If ($BinaryIP -Match "^11000000.10101000") { $Private = $True }  
                } 
        "^10"   { $Class = "B" 
                    If ($BinaryIP -Match "^10101100.0001") { $Private = $True } } 
        "^0"    { $Class = "A" 
                    If ($BinaryIP -Match "^00001010") { $Private = $True }  
                } 
    }    
    return $Private 
} 

function MenuFromArray($options){
$menu = @{}

if($options -is [array]){
    for ($i=1;$i -le $options.count; $i++){
        Write-Host "[$i] $($options[$i-1])"
        $menu.Add($i,$options[$i-1])
    }
}else{
    Write-Host "1 $($options)"
    $menu.Add(1,$options)
}


return $menu
}

function SortStringsAsIntegers($a){
$ints = @()
    $a | % {
        $ints += [int]$_
    }
    $ints = $ints | Sort-Object 
    return $ints
}

function SortStringsAsIntegersAndJoin($a, $joinstring){
$ints = @()
    $a | % {
        if([int]$_ -gt 0){
            $ints += [int]$_
        }
        
    }
    $ints = $ints | Sort-Object 
    return [string]$($ints -join $joinstring)
}

function GetLastId($CurrentIDs){
#Write-Host $CurrentIDs -ForegroundColor Magenta
if($CurrentIDs){
    if($CurrentIDs.count -gt 1){
        if($CurrentIDs[0] -match ":"){
            $TempIds = @()
            for($i=0; $i -lt $CurrentIDs.length; $i++){
                $TempIds += $($CurrentIDs[$i] -split ":")[1]
            }
            #$TempIds
            $Ids = SortStringsAsIntegers $TempIds
            $LastID = $ids | select -last 1
        }else{
            $Ids = SortStringsAsIntegers $CurrentIDs
            $LastID = $ids | select -last 1
        }
    }else{
       
        if($CurrentIDs -match ":"){
            $LastID = $($CurrentIDs -split ":")[1]
                     
            
        }else{
            #$Ids = SortStringsAsIntegers $CurrentIDs
            $LastID = $CurrentIDs #$ids  | select -last 1
        }
    }
    
}

    
    return [int]$LastID
}

function GetNextId($CurrentIds, $MinId=1){

if($CurrentIDs){
    if($CurrentIDs -is [array]){
        if($CurrentIDs[0] -match ":"){
            $TempIds = @()
            for($i=0; $i -lt $CurrentIDs.length; $i++){
                $TempIds += $($CurrentIDs[$i] -split ":")[1]
            }
            #$TempIds
            $Ids = SortStringsAsIntegers $TempIds
             for($i=$MinId; $i -lt $ids[$($ids.count-1)]; $i++){
                if(!($i -in $ids)){
                    return [int]$i
                }        
                    
            }
            return [int]$($i+1)
        }else{
            $Ids = SortStringsAsIntegers $CurrentIDs
            #$ids
            for($i=$MinId; $i -lt $ids[$($ids.count-1)]; $i++){
                if(!($i -in $ids)){
                    return [int]$i
                }        
                    
            }
            return [int]$($i+1)
        }
    }else{
       
        if($CurrentIDs -match ":"){
            return [int]$($($CurrentIDs -split ":")[1])+1
        }else{
            #$Ids = SortStringsAsIntegers $CurrentIDs
            return [int]$($CurrentIDs+1)
        }
    }
}else{
    return $MinId
}
    
}

function GetLastIdInRange($CurrentIDs, $MinValue, $MaxValue){
#Write-Host $CurrentIDs -ForegroundColor Magenta
$tempids = @()

if($CurrentIDs){
    if($CurrentIDs.count -gt 1){
        if($CurrentIDs[0] -match ":"){
            $TempIds = @()
            for($i=0; $i -lt $CurrentIDs.length; $i++){
                if([int]$($CurrentIDs[$i] -split ":")[1] -ge $MinValue -and [int]$($CurrentIDs[$i] -split ":")[1] -le $MaxValue){
                    $TempIds += $($CurrentIDs[$i] -split ":")[1]
                }
            }
            #$TempIds
        }else{
            for($i=0; $i -lt $CurrentIDs.length; $i++){
                if([int]$($CurrentIDs[$i]) -ge $MinValue -and [int]$($CurrentIDs[$i]) -le $MaxValue){
                    $TempIds += $($CurrentIDs[$i])
                }
            }
        }

        if($TempIds){
                $Ids = SortStringsAsIntegers $TempIds
                $LastID = $ids | select -last 1
            }else{
                Return $MinValue - 1
            }
    }else{
       
        if($CurrentIDs -match ":"){
            $LastID = $($CurrentIDs -split ":")[1]
            if(!([int]$($LastID) -ge $MinValue -and [int]$($LastID) -le $MaxValue)){
                $LastID = $MinValue - 1
            }
            
        }else{
            #$Ids = SortStringsAsIntegers $CurrentIDs
            if($CurrentIDs -is [array]){
                $LastID = $CurrentIDs[0]
            }else{
                $LastID = $CurrentIDs
            }
            
            if(!([int]$($LastID) -ge $MinValue -and [int]$($LastID) -le $MaxValue)){
                $LastID = $MinValue - 1
            }
             
        }
    }
    
}

    if(!($LastID)){$LastId = $MinValue - 1}
    return [int]$LastID
}

function GetNextSignallingGroupNATIPAddress($LastIP){
    if($LastIP -is [array]){
        $LastOctetArray = @()
        foreach($IP in $LastIP){
            $Octets = $IP -split("\.")
            $LastOctetArray += [int]$Octets[-1]
        }

        [int]$NextOctet = 1 + (GetLastId $LastOctetArray)
    }else{
        #Split IP Octet
        $Octets = $LastIP -split("\.")
        if([int]$Octets[-1] -lt 10){
            $NextOctet = 10
        }else{
            $NextOctet = [int]$Octets[-1] + 1
        }

        
    }

    $NextNATIP = "$($Octets[0]).$($Octets[1]).$($Octets[2]).$($NextOctet)"
    return $NextNATIP
}

function Convert-ToNumberRange {
    [CmdletBinding()]
    param (
        [Parameter(Position=0, Mandatory=$true, ValueFromPipeline=$true, HelpMessage='Range of numbers in array.')]
        [int[]]$series
    )
    begin {
            $numberseries = @()
          }

    process {
            $numberseries += $series
          }

    end {

        $numberseries = @($numberseries | Sort | Select -Unique)
        $index = 1
        $initmode = $true

             # Start at the beginning

        $start = $numberseries[0]

            # If we only have a single number in the series, then go ahead and return it

        if ($numberseries.Count -eq 1){
            return New-Object psobject -Property @{
            'Begin' = $numberseries[0]
            'End' = $numberseries[0]
            }
        }

        do {
            if ($initmode) {
                $initmode = $false
            }
            else {

                # If the current number minus the last number is not exactly 1, then the range has split
                # (so we have a non-contiguous series of numbers like 1,2,3,12,13,14….)

                if (($numberseries[$index] – $numberseries[$index – 1]) -ne 1) {
                    New-Object psobject -Property @{
                     'Begin' = $start
                     'End' = $numberseries[$index-1]
                    }

                    # Reset our starting point and begin again
                    $start = $numberseries[$index]
                    $initmode = $true

                }

            }

            $index++

        } until ($index -eq ($numberseries.length))

           # We should always end up with a result at the end for the last digits

        New-Object psobject -Property @{

            'Begin' = $start

            'End' = $numberseries[$index – 1]

        }

    }

}

function GetRanges($series){
$numberseries = @()
$numberseries += $series | sort | Get-Unique

$temparray = @()

for($i=0; $i -lt $numberseries.Count; $i++){
    #
    #if($numberseries.count - $i -lt 4){
    #    Write-Host "nearing end"
    #    write-host $numberseries[$i]
    #}

    if(!($temparray)){
        $temparray += $numberseries[$i]
    }else{
        if($numberseries[$i] - $numberseries[$i-1] -eq 1){
            #we have a contiguous block
            $temparray += $numberseries[$i]
        }else{
            #we have a break in the block
           if($temparray.count -eq 1){
                New-Object psobject -Property @{
                     'Begin' = $temparray[0]
                     'End' = $temparray[0]
                     'Numbers in Range' = $temparray.count
                    }
            }else{
                New-Object psobject -Property @{
                     'Begin' = $temparray[0]
                     'End' = $temparray[$temparray.count - 1]
                     'Numbers in Range' = $temparray.count
                    }
            } 
            #reset the array to start a new block
            $temparray = @()
            #go back to previous number to ensure we don't miss any
            $i--
        }
        
        
    }

    
    #$numberseries[$i]
}
#add what's left in array to object
    if($temparray.count -eq 1){
                New-Object psobject -Property @{
                     'Begin' = $temparray[0]
                     'End' = $temparray[0]
                     'Numbers in Range' = $temparray.count
                    }
            }else{
                New-Object psobject -Property @{
                     'Begin' = $temparray[0]
                     'End' = $temparray[$temparray.count - 1]
                     'Numbers in Range' = $temparray.count
                    }
            } 
}

function GetRegexStatement($ddirangeBegin, $ddirangeEnd){
$startddichararray = [int[]](($ddirangeBegin -split '') -ne '')
$endddichararray = [int[]](($ddirangeEnd -split '') -ne '')

$chars = 0
#$regexstring = "^("
$regexstring = ".*("

for($i=0; $i-lt $startddichararray.Count; $i++){
    if($startddichararray[$i] -eq $endddichararray[$i]){
        $regexstring += $startddichararray[$i]
    }else{
        #we have a difference
       $chars = $startddichararray.Count - $i
       break
    }
}

$diffnumberarray = @()

for($i=$($startddichararray.count - $chars);$i-lt $startddichararray.count; $i++){
    $numbers = "$($startddichararray[$i]),$($endddichararray[$i])"
    $diffnumberarray += $numbers
}

#$diffnumberarray



#Symbol 	I 	X 	C 	M
#Value  	1 	10 	100 1,000

#Start the or statement

#$regexstring

if($diffnumberarray.Count -eq 3){
    $CArray = $diffnumberarray[0].Split(",")
    $XArray = $diffnumberarray[1].Split(",")
    $IArray = $diffnumberarray[2].Split(",")
    $regexstring += "("

    for($C=[int]$CArray[0]; $C-lt[int]$CArray[1]+1; $C++){
        if($C-eq$CArray[0]){
            $regexstring += [string]$C + "("
        }else{
            $regexstring += ")|" + $C + "("
        }

        if($C-eq$CArray[0] -and $C -lt $CArray[1]){
            for($X=[int]$XArray[0]; $X-lt10;$X++){
                if($X-eq$XArray[0]){
                    $regexstring += [string]$X + "["
                    $regexstring += "$($Iarray[0])-9"
                   
                }else{
                    $regexstring += "]|" + $X + "["
                    $regexstring += "0-9"
                }
                #$regexstring
            }#End $X Array loop
        }elseif($C-gt$CArray[0] -and $C -lt $CArray[1]){
            for($X=0; $X-lt10;$X++){
                if($X-eq0){
                    $regexstring += [string]$X + "["
                }else{
                    $regexstring += "]|" + $X + "["
                }
                $regexstring += "0-9"

            }#End $X Array loop
            #$regexstring
        }elseif($C-eq$CArray[1]){
             for($X=0; $X-lt[int]$XArray[1]+1;$X++){
                if($X-eq0){
                    $regexstring += [string]$X + "["
                }else{
                    $regexstring += "]|" + $X + "["
                }
                if($X -lt $XArray[1]){
                    $regexstring += "0-9"
                }else{
                    $regexstring += "0-$($Iarray[1])"
                }
            }#End $X Array loop
            #$regexstring
        }
       
        $regexstring += "]"
        #$regexstring
    } #End $C Array loop
    #End the or statement
    $regexstring += "))"


}elseif($diffnumberarray.Count -eq 2){
    $CArray = @()
    $XArray = $diffnumberarray[0].Split(",")
    $IArray = $diffnumberarray[1].Split(",")
    $regexstring += "("


    for($X=[int]$XArray[0]; $X-lt$([int]$XArray[1]+1);$X++){
        if($X-eq$XArray[0]){
            $regexstring += [string]$X + "["
            $regexstring += "$($Iarray[0])-9"
            $regexstring += "]"
        }elseif($X-gt$XArray[0] -and $X-lt$XArray[1] ){
            $regexstring += "|" + $X + "["
            $regexstring += "0-9"
            $regexstring += "]"
        }elseif($X-eq$XArray[1] ){
            $regexstring += "|" + $X + "["
            $regexstring += "0-$($Iarray[1])"
            $regexstring += "]"
        }
        #$regexstring
    }#End $X Array loop
        
        
      
    #End the or statement
    $regexstring += ")"

}elseif($diffnumberarray.Count -eq 1){
    $CArray = @()
    $XArray = @()
    $IArray = $diffnumberarray[0].Split(",")
    $regexstring += "("

    $regexstring += "["
    $regexstring += "$($Iarray[0])-$($Iarray[1])"
    $regexstring += "]"
    $regexstring += ")"
}






#End the or statement
$regexstring += ")$"
return $regexstring
}
#endregion

#region _Global Variables
$global:TTTable = @()
$global:SPTable = @()
$global:sbcauthsession = $null
$global:IPRouteDetails = @()
$global:LogicalInterfaces = @()
$global:HostEntries = @()
$global:ToneTableInfo = @()
$global:MediaCryptoProfiles = @()
$global:MediaLists = @()
$global:MediaProfiles = @()
$global:SIPTLSProfiles = @()
$global:mmElements = @()
$global:mmTables = @()
$global:mmRules = @()


[string] $global:Menu = @"

	+----------------------------------------------------------+
	¦             365 Calling - Deployment Script              ¦
	+----------------------------------------------------------+

    User
    -----------------------------------------------------------
	01)  Add DDI
    02)  Remove DDI
    03)  Enable DDI
    04)  Disable DDI
    05)  DDI Divert
    06)  Remove DDI Divert 
    07)  Query DDI
    08)  Move DDI
    
    Customer
    -----------------------------------------------------------
	11)  Add Customer
	12)  Remove Customer
    13)  Query Customer 
	

    Global
    -----------------------------------------------------------
	21) Configure Global Settings
    22) Deploy Complete SBC

    98) Login to SBC
    99) Exit

Select an option.. [01-99]?
"@
#endregion

#region Backup SBCs
function BackupSBC($sbcfqdn){

if(!(Test-Path $backupfolder)){
    New-Item -Path $backupfolder -ItemType Directory
}

	Write-Host "Backup up $SBCFQDN" -Foregroundcolor Green
    if(-not($backupfolder -match ".*\\$")){
        $outfile = "$($backupfolder)\SBCBackup_$($SBCFQDN)_$(get-date -Format "yyyyMMddHHmmss")_Results.tar"
    } else{
        $outfile = "$($backupfolder)SBCBackup_$($SBCFQDN)_$(get-date -Format "yyyyMMddHHmmss")_Results.tar"
    }

    $BackupUrl = "https://" + $SBCFQDN + "/rest/system?action=backup"
 
    $BackupPath = $outfile
 
  
 
        Write-Host "Backing up $SBCFQDN"

                   try{
                        Invoke-RestMethod -Uri $BackupUrl -Method POST -Body $args -WebSession $sbcauthsession -OutFile $outfile
                        return $true
                      }
                    catch{
                        return $false
                    }
            
          

 

}
#endregion

#region Date Time
function SetSBCTime($sbcfqdn){
Write-Host "Setting SBC Time to PC Time" -ForegroundColor Yellow
$DateTimeUrl = "https://" + $SBCFQDN + "/rest/system?action=setdatetime"

Get-Date -UFormat "%A %B/%d/%Y %T %Z" | out-null
$UTCTime = Get-Date
$UTCTime = $UTCTime.ToUniversalTime()


$basedate = $(Get-Date -Year 1970 -Month 1 -Day 1 -Hour 0 -Minute 0)


$secondsdiff = $(New-TimeSpan -Start $basedate -End $UTCTime).TotalSeconds

$args = "epochTime=$($secondsdiff)"

[xml]$result = $(Invoke-RestMethod -Uri $DateTimeUrl -body $args -Method Post -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}


}
#endregion

#region Logical Interfaces
function LogicalInterface_GetSummary($sbcfqdn){
$global:LogicalInterfaces = @()

$url = "https://$($sbcfqdn)/rest/logicalinterface"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $LogicalInterfaces = $result.root.logicalinterface_list.logicalinterface_pk

    foreach($LogicalInterface in $LogicalInterfaces){
        $url = $LogicalInterface.href
        [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        $global:LogicalInterfaces += $result.root.logicalinterface
       
        
    }

    

}
#endregion

#region Media Crypto Profiles
function MediaCryptoProfile_Add ($sbcfqdn, $Description, $CryptoSuite, $OperationOption, $MasterKeyIdentifierLength){
    Write-Host "Creating Media Crypto Profile List: $($Description)" -ForegroundColor White
    
        $NextId = 1 + $(GetLastid $MediaCryptoProfiles | select -expand id -ErrorAction SilentlyContinue)
        $url = "https://$($sbcfqdn)/rest/mediacryptoprofile/$($NextId)"
        $args1 = "Description=$($Description)&CryptoSuite=$($CryptoSuite)&OperationOption=$($OperationOption)&MasterKeyIdentifierLength=$($MasterKeyIdentifierLength)"
    
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $global:MediaCryptoProfiles += $result.root.mediacryptoprofile
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
}

function MediaCryptoProfile_Delete ($sbcfqdn, $Description, $CryptoSuite, $OperationOption, $MasterKeyIdentifierLength){
    Write-Host "Deleting Media Crypto Profile List: $($Description)" -ForegroundColor White
    $CryptoProfile = $MediaCryptoProfiles | Where-Object {$_.Description -eq $Description -and $_.CryptoSuite -eq $CryptoSuite -and $_.OperationOption -eq $OperationOption -and $_.MasterKeyIdentifierLength -eq $MasterKeyIdentifierLength}
       
    
    [xml]$result = $(Invoke-RestMethod -Uri $CryptoProfile.href -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:MediaCryptoProfiles = $MediaCryptoProfiles | where {$_.Id -ne $CryptoProfile.Id}
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function MediaCryptoProfiles_Get($sbcfqdn){
$global:MediaCryptoProfiles = @()
$url = "https://$($sbcfqdn)/rest/mediacryptoprofile"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $MediaProfiles = $result.root.mediacryptoprofile_list.mediacryptoprofile_pk

    foreach($MediaProfile in $MediaProfiles){
        $url = "https://$($sbcfqdn)/rest/mediacryptoprofile/$($MediaProfile.id)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        $MediaProfileDetail = $result.root.mediacryptoprofile
        $object = New-Object –Type PSObject –Prop(@{'ID'=$MediaProfileDetail.id;'href'=$MediaProfileDetail.href;'Description'=$MediaProfileDetail.Description;'CryptoSuite'=$MediaProfileDetail.CryptoSuite;'MasterKeyIdentifierLength'=$MediaProfileDetail.MasterKeyIdentifierLength;'OperationOption'=$MediaProfileDetail.OperationOption;})
        $global:MediaCryptoProfiles += $object
    }

}

function MediaCryptoProfile_Validate ($sbcfqdn){
Write-Host "Validating Media Crypto Profile Configuration" -ForegroundColor Yellow -NoNewline
$MediaCryptoProfilesRequired = @()
$MediaCryptoProfilesToAdd = @()
$MediaCryptoProfilesToDelete = @()

$CryptoProfile = New-Object –Type PSObject –Prop(@{'Description'="Teams";'CryptoSuite'=1;'OperationOption'=1;'MasterKeyIdentifierLength'=1;})
$MediaCryptoProfilesRequired += $CryptoProfile

    
#Determine objects to Add
foreach($profile in $MediaCryptoProfilesRequired){
    if(!($MediaCryptoProfiles | Where-Object {$_.Description -eq $profile.Description -and $_.CryptoSuite -eq $profile.CryptoSuite -and $_.OperationOption -eq $profile.OperationOption -and $_.MasterKeyIdentifierLength -eq $profile.MasterKeyIdentifierLength})){
        $MediaCryptoProfilesToAdd += $profile
    }
}

#Determine objects to Delete
foreach($profile in $MediaCryptoProfiles){
    if(!($MediaCryptoProfilesRequired | Where-Object {$_.Description -eq $profile.Description -and $_.CryptoSuite -eq $profile.CryptoSuite -and $_.OperationOption -eq $profile.OperationOption -and $_.MasterKeyIdentifierLength -eq $profile.MasterKeyIdentifierLength})){
        $MediaCryptoProfilesToDelete += $profile
    }
}


    if (!($MediaCryptoProfilesToAdd) -and !($MediaCryptoProfilesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }

    foreach($profile in $MediaCryptoProfilesToAdd){
        MediaCryptoProfile_Add $sbcfqdn $profile.Description $profile.CryptoSuite $profile.OperationOption $profile.MasterKeyIdentifierLength
    }

    foreach($profile in $MediaCryptoProfilesToDelete){
        MediaCryptoProfile_Delete $sbcfqdn $profile.Description $profile.CryptoSuite $profile.OperationOption $profile.MasterKeyIdentifierLength
    }
    
}
#endregion Media Crypto Profiles

#region Media Lists
function MediaList_Add($sbcfqdn, $DigitRelayPayloadType, $DSCP, $CryptoProfileID, $Description, $SilenceSuppression, $DtmfSignalToNoise, $DigitRelayType, $VoiceFaxProfileID){
if(!($global:MediaLists)){$global:MediaLists = @()}    
    $id = 1 + $(GetLastId $($MediaLists | select -expand id -ErrorAction SilentlyContinue))

    Write-Host "Creating Media List '$($Description)'" -ForegroundColor White
                      
    $args1 = "Description=$($Description)&DigitRelayPayloadType=$($DigitRelayPayloadType)&DSCP=$($DSCP)&CryptoProfileID=$($CryptoProfileID)&SilenceSuppression=$($SilenceSuppression)&DtmfSignalToNoise=$($DtmfSignalToNoise)&DigitRelayType=$($DigitRelayType)&VoiceFaxProfileID=$($VoiceFaxProfileID)&DtmfMinimumLevel=-38&DeadCallDetection=1"
    $url = "https://$($sbcfqdn)/rest/medialistprofile/$($id)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $MediaListDetail = $result.root.medialistprofile
        $object = New-Object –Type PSObject –Prop(@{'ID'=$MediaListDetail.id;'href'=$MediaListDetail.href;'Description'=$MediaListDetail.Description;'CryptoProfileID'=$MediaListDetail.CryptoProfileID;'DSCP'=$MediaListDetail.DSCP`
            ;'DeadCallDetection'=$MediaListDetail.DeadCallDetection;'DigitRelayPayloadType'=$MediaListDetail.DigitRelayPayloadType;'DigitRelayType'=$MediaListDetail.DigitRelayType;'DtmfMinimumLevel'=$MediaListDetail.DtmfMinimumLevel`
            ;'DtmfSignalToNoise'=$MediaListDetail.DtmfSignalToNoise;'SilenceSuppression'=$MediaListDetail.SilenceSuppression;'VoiceFaxProfileID'=$($($MediaListDetail.VoiceFaxProfileID.entry | select -ExpandProperty '#text') -join ",")})
        $global:MediaLists += $object
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }

}

function MediaList_Delete($sbcfqdn, $url){
    $MediaList = $MediaLists | where {$_.href -eq $url}
    Write-Host "Deleting Media List '$($MediaList.Description)'" -ForegroundColor White
                
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:MediaLists = $MediaLists | where {$_.id -ne $MediaList.Id}
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }

}

function MediaList_Get($sbcfqdn){
$global:MediaLists = @()

$url = "https://$($sbcfqdn)/rest/medialistprofile"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $MediaListDetails = $result.root.medialistprofile_list.medialistprofile_pk

    foreach($MediaList in $MediaListDetails){
        $url = "https://$($sbcfqdn)/rest/medialistprofile/$($MediaList.id)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        $MediaListDetail = $result.root.medialistprofile
        $object = New-Object –Type PSObject –Prop(@{'ID'=$MediaListDetail.id;'href'=$MediaListDetail.href;'Description'=$MediaListDetail.Description;'CryptoProfileID'=$MediaListDetail.CryptoProfileID;'DSCP'=$MediaListDetail.DSCP`
            ;'DeadCallDetection'=$MediaListDetail.DeadCallDetection;'DigitRelayPayloadType'=$MediaListDetail.DigitRelayPayloadType;'DigitRelayType'=$MediaListDetail.DigitRelayType;'DtmfMinimumLevel'=$MediaListDetail.DtmfMinimumLevel`
            ;'DtmfSignalToNoise'=$MediaListDetail.DtmfSignalToNoise;'SilenceSuppression'=$MediaListDetail.SilenceSuppression;'VoiceFaxProfileID'=$($($MediaListDetail.VoiceFaxProfileID.entry | select -ExpandProperty '#text') -join ",")})
        $global:MediaLists += $object
    }

    
}

function MediaList_Validate($sbcfqdn){
Write-Host "Validating Media List Configuration" -ForegroundColor Yellow -NoNewline
$MediaListsRequired = @()
$MediaListsToAdd = @()
$MediaListsToDelete = @()

$CryptoProfileID = $($MediaCryptoProfiles | where {$_.Description -eq "Teams"}) | select -ExpandProperty id | select -first 1
$VoiceFaxProfileID = $($MediaProfiles | Where-Object {$_.description -match "Teams"} | select -ExpandProperty id | sort) -join ","
$MediaList = New-Object –Type PSObject –Prop(@{'Description'="Teams";'DigitRelayPayloadType'=101;'DSCP'=46;'SilenceSuppression'=0;'DigitRelayType'=1;'CryptoProfileID'=$CryptoProfileID;'VoiceFaxProfileID'=$VoiceFaxProfileID;})
$MediaListsRequired += $MediaList

$codecstoinclude = $($MediaProfiles | Where-Object {$_.description -match "Spark Voice Connect"} | select -ExpandProperty id | sort) -join ","
$MediaList = New-Object –Type PSObject –Prop(@{'Description'="Spark Voice Connect";'DigitRelayPayloadType'=101;'DSCP'=46;'SilenceSuppression'=1;'DigitRelayType'=1;'CryptoProfileID'=0;'VoiceFaxProfileID'=$codecstoinclude;})
$MediaListsRequired += $MediaList

$codecstoinclude = $($MediaProfiles | Where-Object {$_.description -match "Enghouse"} | select -ExpandProperty id | sort) -join ","
$MediaList = New-Object –Type PSObject –Prop(@{'Description'="Enghouse";'DigitRelayPayloadType'=101;'DSCP'=46;'SilenceSuppression'=1;'DigitRelayType'=1;'CryptoProfileID'=0;'VoiceFaxProfileID'=$codecstoinclude;})
$MediaListsRequired += $MediaList

#Determine objects to Add
foreach($profile in $MediaListsRequired){
    if(!($MediaLists | Where-Object {$_.DigitRelayPayloadType -eq $profile.DigitRelayPayloadType -and `
        $_.DSCP -eq $profile.DSCP -and `
        $_.CryptoProfileID -eq $profile.CryptoProfileID -and `
        $_.Description -eq $profile.Description -and `
        $_.SilenceSuppression -eq $profile.SilenceSuppression -and `
        $_.DigitRelayType -eq $profile.DigitRelayType -and `
        $_.VoiceFaxProfileID -eq $profile.VoiceFaxProfileID})){
        $MediaListsToAdd += $profile
    }
}

#Determine objects to Delete
foreach($profile in $MediaLists){
    if(!($MediaListsRequired | Where-Object {$_.Description -eq $profile.Description -and $_.DigitRelayPayloadType -eq $profile.DigitRelayPayloadType -and $_.DSCP -eq $profile.DSCP -and $_.SilenceSuppression -eq $profile.SilenceSuppression -and $_.DigitRelayType -eq $profile.DigitRelayType -and $_.CryptoProfileID -eq $profile.CryptoProfileID -and $_.VoiceFaxProfileID -eq $profile.VoiceFaxProfileID;})){
        $MediaListsToDelete += $profile
    }
}

  if (!($MediaListsToAdd) -and !($MediaListsToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


foreach($MediaList in $MediaListsToAdd){
    MediaList_Add $sbcfqdn $MediaList.DigitRelayPayloadType $MediaList.DSCP $MediaList.CryptoProfileID $MediaList.Description $MediaList.SilenceSuppression $MediaList.DtmfSignalToNoise $MediaList.DigitRelayType $MediaList.VoiceFaxProfileID
}

foreach($MediaList in $MediaListsToDelete){
    MediaList_Delete $sbcfqdn $MediaList.href
}
     
  
    

}
#endregion Media Lists

#region Media Profiles
function MediaProfile_Add($sbcfqdn, $Description, $MediaType, $PTimeInMilliSeconds, $PayloadFormat, $PayloadType, $VoiceRateInBitsPerSecond){
    $NextId = 1 + $(GetLastId $($MediaProfiles | select -ExpandProperty id -ErrorAction SilentlyContinue))

    $url = "https://$($sbcfqdn)/rest/voicecodecprofile/$($NextId)"
    $args1 = "Description=$($Description)&MediaType=$($MediaType)&PTimeInMilliSeconds=$($PTimeInMilliSeconds)&PayloadFormat=$($PayloadFormat)&PayloadType=$($PayloadType)&VoiceRateInBitsPerSecond=$($VoiceRateInBitsPerSecond)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        $global:MediaProfiles += $result.root.voicecodecprofile
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function MediaProfile_Delete($sbcfqdn, $Description, $MediaType, $PTimeInMilliSeconds, $PayloadFormat, $PayloadType, $VoiceRateInBitsPerSecond){
    $profile = $MediaProfiles | Where-Object {$_.Description -eq $Description -and $_.MediaType -eq $MediaType -and $_.PayloadType -eq $PayLoadType -and $_.PTimeInMilliSeconds -eq $PTimeInMilliSeconds}
    $medialisttodelete = $medialists | where {$profile.id -in $($_.voicefaxprofileid -split ",")}

    if($medialisttodelete){
        MediaList_Delete $sbcfqdn $medialisttodelete.href
    }

    [xml]$result = $(Invoke-RestMethod -Uri $profile.href -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        $global:MediaProfiles = $MediaProfiles | Where-Object {$_.id -ne $profile.id}
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function MediaProfile_Get($sbcfqdn){
$global:MediaProfiles = @()
    $url = "https://$($sbcfqdn)/rest/voicecodecprofile"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $MediaProfiles = $result.root.voicecodecprofile_list.voicecodecprofile_pk

    foreach($MediaProfile in $MediaProfiles){
        $url = $MediaProfile.href
        [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
            $global:MediaProfiles += $result.root.voicecodecprofile
    }



}

function MediaProfile_Validate($sbcfqdn){
Write-Host "Validating Media Profile Configuration" -ForegroundColor Yellow -NoNewline
$mediaprofilesrequired = @()
$mediaprofilestoadd = @()
$mediaprofilestodelete = @()

$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G711A - Spark Voice Connect";'MediaType'=2;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=8;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile
$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G722 - Spark Voice Connect";'MediaType'=18;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=9;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile
$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G711A - Teams";'MediaType'=2;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=8;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile
$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G711U - Teams";'MediaType'=3;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=0;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile

$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G711A - Enghouse";'MediaType'=2;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=8;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile
$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G711U - Enghouse";'MediaType'=3;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=0;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile
$mediaprofile = New-Object –Type PSObject –Prop(@{'Description'="G722 - Enghouse";'MediaType'=18;'PTimeInMilliSeconds'=20;'PayloadFormat'=0;'PayloadType'=9;'VoiceRateInBitsPerSecond'=0;})
$mediaprofilesrequired += $mediaprofile

#Determine Static Hosts to Add
foreach($profile in $mediaprofilesrequired){
    if(!($MediaProfiles | Where-Object {$_.Description -eq $profile.Description -and $_.MediaType -eq $profile.MediaType -and $_.PayloadType -eq $profile.PayLoadType})){
        $mediaprofilestoadd += $profile
    }
}

#Determine Static Hosts to Delete
foreach($profile in $MediaProfiles){
    if(!($mediaprofilesrequired | Where-Object {$_.Description -eq $profile.Description -and $_.MediaType -eq $profile.MediaType -and $_.PayloadType -eq $profile.PayLoadType})){
        $mediaprofilestodelete += $profile
    }
}


    if (!($mediaprofilestoadd) -and !($mediaprofilestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $mediaprofilestoadd){
        MediaProfile_Add $sbcfqdn $profile.Description $profile.MediaType $profile.PTimeInMilliSeconds $profile.PayloadFormat $profile.PayloadType $profile.VoiceRateInBitsPerSecond
    }

    foreach($profile in $mediaprofilestodelete){
        MediaProfile_Delete $sbcfqdn $profile.Description $profile.MediaType $profile.PTimeInMilliSeconds $profile.PayloadFormat $profile.PayloadType $profile.VoiceRateInBitsPerSecond
    }
   
    
}
#endregion Media Profiles

#region Message Manipulation Elements
function MessageManipulationElements_Add($sbcfqdn, $Action, $ElementClass, $Name, $Prefix, $RegexReplace, $Suffix, $Type, $Value){
Write-Host "Adding Message Manipulation Element Configuration" -ForegroundColor White
$NextId = 1 + $(GetLastId $($mmElements | select -ExpandProperty id -ErrorAction SilentlyContinue))

#Format for HTML Issues
$value = $value -replace "\+", "%2B"

$url = "https://$($sbcfqdn)/rest/spmelementdescriptor/$($NextId)"
$args1 = "Action=$($Action)&ElementClass=$($ElementClass)&Name=$($Name)&Prefix=$($Prefix)&RegexReplace=$($RegexReplace)&Suffix=$($Suffix)&Type=$($Type)&Value=$($value)"
[xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()

    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:mmElements += $result.root.spmelementdescriptor
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function MessageManipulationElements_Delete($sbcfqdn, $url){

[xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()

    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function MessageManipulationElements_Get($sbcfqdn){
Write-Host "Loading Message Manipulation Elements Configuration from SBC" -ForegroundColor Magenta
$global:mmElements = @()

$url = "https://$($sbcfqdn)/rest/spmelementdescriptor"
[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
$manipulationelements =$results.root.spmelementdescriptor_list.spmelementdescriptor_pk

    foreach($manipulationelement in $manipulationelements ){
        $url = $manipulationelement.href
        [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()

        $global:mmElements += $results.root.spmelementdescriptor

    }

}

function MessageManipulationElements_Validate($sbcfqdn, $realms, $usernames, $validationfunction){

$mmElementsrequired = @()
$mmElementstoadd = @()
$mmElementstodelete = @()


#Spark Outbound
#$mmElement = New-Object –Type PSObject –Prop(@{'Value'="(sip\:)(\+64)(\d[1-9])(.*)";'RegexReplace'="sip:\3\4";'Action'=2;'ElementClass'=0;'Type'=2;})
$mmElement = New-Object –Type PSObject –Prop(@{'Action'=2;'ElementClass'=0;'Name'='';'Prefix'='';'RegexReplace'='sip:\3\4';'Suffix'='';'Type'=2;'Value'='(sip\:)(\+64)(\d[1-9])(.*)';})
$mmElementsrequired += $mmElement
foreach($realm in $realms){
    $mmElement = New-Object –Type PSObject –Prop(@{'Action'=2;'ElementClass'=4;'Name'='';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=0;'Value'=$realm.realm;})
    $mmElementsrequired += $mmElement
}

#Spark Outbound Authentication
foreach($realm in $realms){
    $mmElement = New-Object –Type PSObject –Prop(@{'Action'=1;'ElementClass'=9;'Name'='trunk-context';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=0;'Value'=$realm.realm;})
    $mmElementsrequired += $mmElement
}

foreach($username in $usernames){
    $mmElement = New-Object –Type PSObject –Prop(@{'Action'=1;'ElementClass'=9;'Name'='tgrp';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=0;'Value'=$username.Username;})
    $mmElementsrequired += $mmElement
}

#Spark Inbound
#$mmElement = New-Object –Type PSObject –Prop(@{'Name'='tgrp';'Action'=3;})
$mmElement = New-Object –Type PSObject –Prop(@{'Action'=3;'ElementClass'=9;'Name'='tgrp';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=0;'Value'='';})
$mmElementsrequired += $mmElement
$mmElement = New-Object –Type PSObject –Prop(@{'Action'=3;'ElementClass'=9;'Name'='trunk-context';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=0;'Value'='';})
$mmElementsrequired += $mmElement

#Microsoft Inbound
$mmElement = New-Object –Type PSObject –Prop(@{'Action'=4;'ElementClass'=0;'Name'='';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=1;'Value'='SG User Value 1';})
$mmElementsrequired += $mmElement

$mmElement = New-Object –Type PSObject –Prop(@{'Action'=4;'ElementClass'=10;'Name'='';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=1;'Value'='SG User Value 2';})
$mmElementsrequired += $mmElement

$mmElement = New-Object –Type PSObject –Prop(@{'Action'=4;'ElementClass'=0;'Name'='';'Prefix'='';'RegexReplace'='';'Suffix'='';'Type'=1;'Value'='SG User Value 3';})
$mmElementsrequired += $mmElement


if($validationfunction.toUpper() -eq "ADD"){
Write-Host "Validating Message Manipulation Elements Configuration - Checking all elements exist" -ForegroundColor Yellow -NoNewline
    #Determine Static Hosts to Add
    foreach($profile in $mmElementsrequired){
        if(!($mmElements | Where-Object {$_.Action -eq $profile.Action -and $_.ElementClass -eq $profile.ElementClass -and $_.Name -eq $profile.Name -and $_.Prefix -eq $profile.Prefix -and $_.RegexReplace -eq $profile.RegexReplace -and $_.Suffix -eq $profile.Suffix -and $_.Type -eq $profile.Type -and $_.Value -eq $profile.Value})){
            $mmElementstoadd += $profile
        }
    }

    if (!($mmElementstoadd)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $mmElementstoadd){
        MessageManipulationElements_Add $sbcfqdn $profile.Action $profile.ElementClass $profile.Name $profile.Prefix $profile.RegexReplace $profile.Suffix $profile.Type $profile.Value
    }


}elseif($validationfunction.toUpper() -eq "DELETE"){
Write-Host "Validating Message Manipulation Elements Configuration - Checking for unneeded elements" -ForegroundColor Yellow -NoNewline
    #Determine Static Hosts to Delete
    foreach($profile in $mmElements){
        if(!($mmElementsrequired | Where-Object {$_.Action -eq $profile.Action -and $_.ElementClass -eq $profile.ElementClass -and $_.Name -eq $profile.Name -and $_.Prefix -eq $profile.Prefix -and $_.RegexReplace -eq $profile.RegexReplace -and $_.Suffix -eq $profile.Suffix -and $_.Type -eq $profile.Type -and $_.Value -eq $profile.Value})){
            $mmElementstodelete += $profile
        }
    }

    if (!($mmElementstodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }

      foreach($profile in $mmElementstodelete){
        MessageManipulationElements_Delete $sbcfqdn $profile.href
    }
   

}


    

  


    
}
#endregion

#region Message Manipulation Rules
function MessageManipulationRules_CreateCommon($sbcfqdn){
MessageManipulationElements_CreateCommon $sbcfqdn
MessageManipulationTables_Validate $sbcfqdn


$MMRules = MessageManipulationRules_Get $sbcfqdn
$MMElements = MessageManipulationElements_Get $sbcfqdn


#Write-Host "Headers" -ForegroundColor Yellow
#Microsoft Inbound
$historyinfoelement = $MMElements | Where-Object {$_.Action -eq 4 -and $_.Value -eq "SG User Value 1" -and $_.ElementClass -eq 0}
$referelement = $MMElements | Where-Object {$_.Action -eq 4 -and $_.Value -eq "SG User Value 2" -and $_.ElementClass -eq 10}
$referredbyelement = $MMElements | Where-Object {$_.Action -eq 4 -and $_.Value -eq "SG User Value 3" -and $_.ElementClass -eq 0}

#Spark Inbound
$droptgrpelement  = $MMElements | Where-Object {$_.name -eq 'tgrp' -and $_.Action -eq 3} | select -first 1
$droptrunkcontextelement = $MMElements | Where-Object {$_.name -eq 'trunk-context' -and $_.Action -eq 3} | select -first 1

#Spark Outbound
$correctdiversionelement = $MMElements | Where-Object {$_.Action -eq 2 -and $_.Value -eq "(sip\:)(\+64)(\d[1-9])(.*)" -and $_.ElementClass -eq 0 -and $_.Type -eq 2}



#region "Spark - Inbound Manipulation"
$TableName = "Spark - Inbound Manipulation"
$TableId = $MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MTableId
$NextId = $Null
$CurrentId = $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
if($CurrentId){$NextId = GetlastId $($CurrentId -split ":")[1]}else{$NextId =2000}

Write-Host "Adding rules to Message Manipulation Table '$($TableName)'" -ForegroundColor Magenta

#Drop Trunk info from Invite
$Description = "Strip Spark Trunk Info"
Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
if(!($MMRules | Where-Object {$_.Description -eq $Description})){
    $NextId += 1
    $args1="Description=$($Description)&ResultType=1&URIParameterElementDescriptorList=$($droptgrpelement.id),$($droptrunkcontextelement.id)"
    
    $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmrequestlinerule/$($NextId)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}
#endregion "Spark - Inbound Manipulation"

#region "Spark - Outbound Manipulation"
$TableName = "Spark - Outbound Manipulation (Common)"
$TableId = $MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MTableId | select -first 1
$nextid = $Null

$NextId = GetLastId $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)

Write-Host "Adding rules to Message Manipulation Table '$($TableName)'" -ForegroundColor Magenta

#Spark Voice Connect - Remove PAI (Common)
$Description = "Spark Voice Connect - Remove PAI (Common)"
Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
if(!($MMRules | Where-Object {$_.Description -eq $Description})){
    $NextId += 1
    $args1="Description=$($Description)&HeaderAction=3&HeaderName=p-asserted-identity&HeaderOrdinal=1&ResultType=1"
    $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmheaderrule/$($NextId)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}

#Spark Voice Connect - Normalise Diversion DDI (Common)
$Description = "Spark Voice Connect - Normalise Diversion DDI (Common)"
Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
if(!($MMRules | Where-Object {$_.Description -eq $Description})){
    $NextId += 1
    $args1="Description=$($Description)&HeaderAction=2&HeaderName=diversion&HeaderOrdinal=1&ResultType=1&HeaderElementDescriptorList=$($correctdiversionelement.id)"
    $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmheaderrule/$($NextId)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}




#endregion "Spark - Outbound Manipulation"

#region "Microsoft - Inbound Manipulation"
#Collect Teams History Info
$TableName = "Microsoft - Inbound Manipulation (INVITE)"
$TableId = $MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MTableId | select -First 1
$NextId = $Null
#$CurrentId = $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
$NextId = GetLastId $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
if(!($NextId)){$NextId =0}

Write-Host "Adding rules to Message Manipulation Table '$($TableName)'" -ForegroundColor Magenta





#Collect Teams REFER Info
$TableName = "Microsoft - Inbound Manipulation (REFER)"
$TableId = $MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MTableId | select -First 1
$NextId = $Null
#$CurrentId = $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
$NextId = GetLastId $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
if(!($NextId)){$NextId =0}

$TableId = $MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MTableId -ErrorAction SilentlyContinue | select -first 1
$NextId = $Null
#$CurrentId =  $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue | select -first 1)
$CurrentId = GetLastId $($MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
if($CurrentId){$NextId = 0 + $CurrentId}else{$NextId =1}
if($NextId -lt 2001){$NextId = 2001}


Write-Host "Adding rules to Message Manipulation Table '$($TableName)'" -ForegroundColor Magenta


#endregion "Microsoft - Inbound Manipulation"

}

function MessageManipulationRules_CreateCommonRealm($sbcfqdn, $Realm){
    MessageManipulationElements_CreateCommonRealm $sbcfqdn $Realm
    MessageManipulationTables_ValidateRealm $sbcfqdn $Realm

    $MMRules = MessageManipulationRules_Get $sbcfqdn
    $MMElements = MessageManipulationElements_Get $sbcfqdn

    $TableName = "Spark - Outbound Manipulation ($($Realm))"
    $TableId = $MMRules | Where-Object {$_.MtableDescription -eq $TableName} | select -ExpandProperty MTableId | select -first 1
    $nextid = $Null

    #1-1000
    $NextId = GetLastId $($MMRules | Where-Object {$_.MtableDescription -eq $TableName -and $_.MRuleId -match "\d+\:[0-9]$|[1-9][0-9]$|[1-9][0-9][0-9]$|1000$"} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)
    #2001-3000
    $RequestLineNextId = GetLastId $($MMRules | Where-Object {$_.MtableDescription -eq $TableName -and $_.MRuleId -match "\d+\:([2-3][0-9][0-9][1-9]$|3000$)"} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue)

    #region Spark Outbound
        $replaceurihostelement = $MMElements | Where-Object {$_.Action -eq 2 -and $_.Value -eq $Realm -and $_.ElementClass -eq 4 -and $_.Type -eq 0}
    #endregion

    #Spark Voice Connect - Replace Diversion URI Host (Common)
    $Description = "Spark Voice Connect - Replace Diversion URI Host ($($Realm))"
    Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
    if(!($MMRules | Where-Object {$_.Description -eq $Description})){
        $NextId += 1
        $args1="Description=$($Description)&HeaderAction=2&HeaderName=diversion&HeaderOrdinal=1&ResultType=1&HeaderElementDescriptorList=$($replaceurihostelement.id)"
        $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmheaderrule/$($NextId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
    }else{
	    Write-Host "Record already exists" -ForegroundColor Yellow
	    }

    #Spark Voice Connect - Replace From URI Host (Common)
    $Description = "Spark Voice Connect - Replace From URI Host ($($Realm))"
    Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
    if(!($MMRules | Where-Object {$_.Description -eq $Description})){
        $NextId += 1
        $args1="Description=$($Description)&HeaderAction=2&HeaderName=from&HeaderOrdinal=1&ResultType=1&HeaderElementDescriptorList=$($replaceurihostelement.id)"
        $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmheaderrule/$($NextId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
    }else{
	    Write-Host "Record already exists" -ForegroundColor Yellow
	    }

     #Spark Voice Connect - Replace To URI Host (Common)
    $Description = "Spark Voice Connect - Replace To URI Host ($($Realm))"
    Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
    if(!($MMRules | Where-Object {$_.Description -eq $Description})){
        $NextId += 1
        $args1="Description=$($Description)&HeaderAction=2&HeaderName=to&HeaderOrdinal=1&ResultType=1&HeaderElementDescriptorList=$($replaceurihostelement.id)"
        $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmheaderrule/$($NextId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
    }else{
	    Write-Host "Record already exists" -ForegroundColor Yellow
	    }


    #Spark Voice Connect - Replace Request Line URI Host (Common)
    $Description = "Spark Voice Connect - Replace Request Line Host ($($Realm))"
    Write-Host "Adding rule '$($Description)' to '$($TableName)'" -ForegroundColor White
    if(!($MMRules | Where-Object {$_.Description -eq $Description})){
        if($RequestLineNextId -lt 2001){$RequestLineNextId = 2000}
        $RequestLineNextId += 1
        $args1="Description=$($Description)&ResultType=1&ElementDescriptorList=$($replaceurihostelement.id)"
        $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/spmrequestlinerule/$($RequestLineNextId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
    }else{
	    Write-Host "Record already exists" -ForegroundColor Yellow
	    }
}

function MessageManipulationRules_CreateCustomer($sbcfqdn, $trunkname, $Realm, $Username){

MessageManipulationElements_CreateCustomer $sbcfqdn $trunkname $Realm $Username
MessageManipulationTables_CreateCustomer $sbcfqdn $trunkname $Realm $Username


$MMRules = MessageManipulationRules_Get $sbcfqdn
$MMElements = MessageManipulationElements_Get $sbcfqdn

#Spark Outbound
$tgrpelement  = $MMElements | Where-Object {$_.name -eq 'tgrp' -and $_.Value -eq $Username -and $_.Action -eq 1} | select -first 1
$trunkcontextelement = $MMElements | Where-Object {$_.name -eq 'trunk-context' -and $_.value -eq $Realm -and $_.Action -eq 1} | select -first 1


$replaceurihostelement = $MMElements | Where-Object {$_.Action -eq 2 -and $_.Value -eq $Realm -and $_.ElementClass -eq 4 -and $_.Type -eq 0}

#region "Spark - Outbound Manipulation"

#endregion "Spark - Outbound Manipulation"


}

function MessageManipulationRules_Get($sbcfqdn){
Write-Host "Loading Message Manipulation Rules Configuration from SBC" -ForegroundColor Magenta
$global:mmRules = @()

    foreach($table in $mmTables){
        $maniptableId =$table.id
        $maniptablehref =$table.href
        $ManiptableDescription = $table.Description
        $maniptableMessageType = $table.MessageType
        $maniptableMessageTypeList = $table.MessageTypeList
        $maniptableResultType = $table.ResultType
        $tableequence = $table.Sequence
        $ruletype = $null

        $headerrules = $null
        $url = "$($table.href)/spmheaderrule"
        [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        $headerrules = $results.root.spmheaderrule_list.spmheaderrule_pk
        

        $requestlinerules = $null
        $url = "$($table.href)/spmrequestlinerule"
        [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        $requestlinerules = $results.root.spmrequestlinerule_list.spmrequestlinerule_pk
        

        ##############################################################################################
        #Not Used in current deployment, for reference only
        ##############################################################################################

        #$rawmessagerules = $null
        #$url = "$($table.href)/spmrawmessagerule"
        #[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        #$rawmessagerules = $results.root.spmrawmessagerule_list.spmrawmessagerule_pk

        #$statuslinerules = $null
        #$url = "$($table.href)/spmstatuslinerule"
        #[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        #$statuslinerules = $results.root.spmstatuslinerule_list.spmstatuslinerule_pk

        ##############################################################################################


        
        if($headerrules){
            $ruletype = "spmheaderrule"
            #We found some Header Rules
            foreach($headerrule in $headerrules){
            $url = "$($headerrule.href)"
            [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()

            $rules = $results.root.spmheaderrule
            $MRuleUserUriRules = @()
            $MRuleHeaderRules = @()

            #Header Element Rules
            if($rules.HeaderElementDescriptorList.count -gt 0){
                $HERules = $rules.HeaderElementDescriptorList.entry
                foreach($HERule in $HERules){
                    #$url = "https://$($sbcfqdn)/rest/spmelementdescriptor/$($HERule.'#text')"
                    #[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
                    #$MRuleHeaderRules += $results.root.spmelementdescriptor
                    $MRuleHeaderRules += $mmElements | where {$_.id -eq $($herule.'#text')}
                }
                
            }

            #User URI Rules
            if($rules.URIUserParameterElementDescriptorList.count -gt 0){
                $UserURIRules = $rules.URIUserParameterElementDescriptorList.entry
                foreach($UURule in $UserURIRules){
                    #$url = "https://$($sbcfqdn)/rest/spmelementdescriptor/$($UURule.'#text')"
                    #[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
                    #$MRuleUserUriRules += $results.root.spmelementdescriptor
                    $MRuleUserUriRules += $mmElements | where {$_.id -eq $($UURule.'#text')}
                }
                
            }
            
            #$MRuleUserUriRules
            #$MRuleHeaderRules
            if($rules){
                #We found some rules
                foreach($rule in $rules){
                   #$rule.Description
                   #Write-Host "Header Rules"
                   #$rule.HeaderElementDescriptorList.entry.'#text'
                    #Write-Host "User URI Rules"
                   #$rule.URIUserParameterElementDescriptorList.entry.'#text'
                   if(!($rule.URIUserParameterElementDescriptorList.entry.'#text') -and !($rule.HeaderElementDescriptorList.entry.'#text')){

                    $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                                'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                                'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                                'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                'EID'='';'Ehref'='';'EAction'='';'EElementClass'='';'Ename'='';'EPrefix'='';'ERegexReplace'='';'ESuffix'='';'EType'='';'EValue'='';})
                    $global:mmRules += $object
                    }elseif($rule.URIUserParameterElementDescriptorList.entry.'#text' -and !($rule.HeaderElementDescriptorList.entry.'#text')){
                        #Has User URI Parameters
                        foreach($ElementRule in $MRuleUserUriRules){
                    
                             $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                        'EID'=$ElementRule.id;'Ehref'=$ElementRule.href;'EAction'=$ElementRule.action;'EElementClass'=$ElementRule.ElementClass;'Ename'=$ElementRule.Name;'EPrefix'=$ElementRule.Prefix;'ERegexReplace'=$ElementRule.RegexReplace;`
                                        'ESuffix'=$ElementRule.Suffix;'EType'=$ElementRule.Type;'EValue'=$ElementRule.Value;})
                            $global:mmRules += $object
                        }
                    }elseif(!($rule.URIUserParameterElementDescriptorList.entry.'#text') -and $rule.HeaderElementDescriptorList.entry.'#text'){
                        #Has Header Element Descriptors
                        foreach($ElementRule in $MRuleHeaderRules){
                    
                            $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                        'EID'=$ElementRule.id;'Ehref'=$ElementRule.href;'EAction'=$ElementRule.action;'EElementClass'=$ElementRule.ElementClass;'Ename'=$ElementRule.Name;'EPrefix'=$ElementRule.Prefix;'ERegexReplace'=$ElementRule.RegexReplace;`
                                        'ESuffix'=$ElementRule.Suffix;'EType'=$ElementRule.Type;'EValue'=$ElementRule.Value;})
                            $global:mmRules += $object
                        }
                    }
                   }
            }else{
                #No Rules Defined
                 $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                        'EID'='';'Ehref'='';'EAction'='';'EElementClass'='';'Ename'='';'EPrefix'='';'ERegexReplace'='';'ESuffix'='';'EType'='';'EValue'='';})
                $global:mmRules += $object
            }
           

            
        }
        }

        if($requestlinerules){
            $ruletype = "spmrequestlinerule"
            foreach($requestlinerule in $requestlinerules){
                $url = "$($requestlinerule.href)"
                [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()

                $rules = $results.root.spmrequestlinerule
                $MRuleUserUriRules = @()
                $MRuleHeaderRules = @()

                 #Element Rules
                if($rules.ElementDescriptorList.count -gt 0){
                    $ERules = $rules.ElementDescriptorList.entry
                    foreach($ERule in $ERules){
                        $url = "https://$($sbcfqdn)/rest/spmelementdescriptor/$($ERule.'#text')"
                        [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
                        $MRuleHeaderRules += $results.root.spmelementdescriptor
                    }
                
                }

                #User URI Rules
                if($rules.URIUserParameterElementDescriptorList.count -gt 0){
                    $UserURIRules = $rules.URIUserParameterElementDescriptorList.entry
                    foreach($UURule in $UserURIRules){
                        $url = "https://$($sbcfqdn)/rest/spmelementdescriptor/$($UURule.'#text')"
                        [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
                        $MRuleUserUriRules += $results.root.spmelementdescriptor
                    }
                
                }

                if($rules){
                #We found some rules
                foreach($rule in $rules){
                   #$rule.Description
                   #Write-Host "Header Rules"
                    #$rule.ElementDescriptorList.entry.'#text'
                    #Write-Host "User URI Rules"
                   #$rule.URIUserParameterElementDescriptorList.entry.'#text'
                   if(!($rule.URIUserParameterElementDescriptorList.entry.'#text') -and !($rule.ElementDescriptorList.entry.'#text')){

                    $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                                'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                                'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                                'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                'EID'='';'Ehref'='';'EAction'='';'EElementClass'='';'Ename'='';'EPrefix'='';'ERegexReplace'='';'ESuffix'='';'EType'='';'EValue'='';})
                    $global:mmRules += $object
                    }elseif($rule.URIUserParameterElementDescriptorList.entry.'#text' -and !($rule.ElementDescriptorList.entry.'#text')){
                        #Has User URI Parameters
                        foreach($ElementRule in $MRuleUserUriRules){
                    
                             $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                        'EID'=$ElementRule.id;'Ehref'=$ElementRule.href;'EAction'=$ElementRule.action;'EElementClass'=$ElementRule.ElementClass;'Ename'=$ElementRule.Name;'EPrefix'=$ElementRule.Prefix;'ERegexReplace'=$ElementRule.RegexReplace;`
                                        'ESuffix'=$ElementRule.Suffix;'EType'=$ElementRule.Type;'EValue'=$ElementRule.Value;})
                            $global:mmRules += $object
                        }
                    }elseif(!($rule.URIUserParameterElementDescriptorList.entry.'#text') -and $rule.ElementDescriptorList.entry.'#text'){
                        #Has Header Element Descriptors
                        foreach($ElementRule in $MRuleHeaderRules){
                    
                            $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                        'EID'=$ElementRule.id;'Ehref'=$ElementRule.href;'EAction'=$ElementRule.action;'EElementClass'=$ElementRule.ElementClass;'Ename'=$ElementRule.Name;'EPrefix'=$ElementRule.Prefix;'ERegexReplace'=$ElementRule.RegexReplace;`
                                        'ESuffix'=$ElementRule.Suffix;'EType'=$ElementRule.Type;'EValue'=$ElementRule.Value;})
                            $global:mmRules += $object
                        }
                    }
                   }
            }else{
                #No Rules Defined
                 $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                        'EID'='';'Ehref'='';'EAction'='';'EElementClass'='';'Ename'='';'EPrefix'='';'ERegexReplace'='';'ESuffix'='';'EType'='';'EValue'='';})
                $global:mmRules += $object
            }

                }


        }else{
            #No Header Rules
            $rule=$null
            $object = New-Object –Type PSObject –Prop(@{'RuleType'=$ruletype;'MTableId'=$maniptableId;'MTableHref'=$maniptableHref;'MTableDescription'=$ManiptableDescription;'MTableMessageType'=$maniptableMessageType;'MTableMessageTypeList'=$maniptableMessageTypeList;`
                        'MTableResultType'=$maniptableResultType;'MTableSequence'=$maniptableSequence;`
                        'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                        'ElementDescriptorList'=$rule.ElementDescriptorList.entry.'#text' -join ",";'HeaderElementDescriptorList'=$rule.HeaderElementDescriptorList.entry.'#text' -join ",";'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                        'HeaderParameterElementDescriptorList'=$rule.HeaderParameterElementDescriptorList.entry.'#text' -join ",";`
                        'ResultType'=$rule.ResultType;'URIParameterElementDescriptorList'=$rule.URIParameterElementDescriptorList.entry.'#text' -join ",";'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                        'EID'='';'Ehref'='';'EAction'='';'EElementClass'='';'Ename'='';'EPrefix'='';'ERegexReplace'='';'ESuffix'='';'EType'='';'EValue'='';})
                $global:mmRules += $object
        }
        

    }


}

function MessageManipulationRules_Add($sbcfqn, $profile){
#$Table = $MMRules | Where-Object {$_.MtableDescription -eq $profile.MTableDescription} | select -First 1
$Table = $mmtables | Where-Object {$_.Description -eq $profile.MTableDescription} | select -First 1
$TableId = $Table.Id


if($profile.RuleType -eq "spmrequestlinerule"){ #Range 2001-3000
    $NextId = 1 + $(GetLastIdInRange $($MMRules | Where-Object {$_.MtableDescription -eq $profile.MTableDescription} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue) 2001 3000)
    
}elseif($profile.RuleType -eq "spmheaderrule"){ #Range 1-1000
    $NextId = 1 + $(GetLastIdInRange $($MMRules | Where-Object {$_.MtableDescription -eq $profile.MTableDescription} | select -ExpandProperty MRuleId -ErrorAction SilentlyContinue) 1 1000)
}

$args1=""
if(!([string]::IsNullOrEmpty($profile.Description))){if($args1.length -eq 0){$args1+="Description=$($profile.Description)"}else{$args1+="&Description=$($profile.Description)"}}
if(!([string]::IsNullOrEmpty($profile.ElementDescriptorList))){if($args1.length -eq 0){$args1+="ElementDescriptorList=$($profile.ElementDescriptorList)"}else{$args1+="&ElementDescriptorList=$($profile.ElementDescriptorList)"}}
if(!([string]::IsNullOrEmpty($profile.HeaderAction))){if($args1.length -eq 0){$args1+="HeaderAction=$($profile.HeaderAction)"}else{$args1+="&HeaderAction=$($profile.HeaderAction)"}}
if(!([string]::IsNullOrEmpty($profile.HeaderElementDescriptorList))){if($args1.length -eq 0){$args1+="HeaderElementDescriptorList=$($profile.HeaderElementDescriptorList)"}else{$args1+="&HeaderElementDescriptorList=$($profile.HeaderElementDescriptorList)"}}
if(!([string]::IsNullOrEmpty($profile.HeaderName))){if($args1.length -eq 0){$args1+="HeaderName=$($profile.HeaderName)"}else{$args1+="&HeaderName=$($profile.HeaderName)"}}
if(!([string]::IsNullOrEmpty($profile.HeaderOrdinal))){if($args1.length -eq 0){$args1+="HeaderOrdinal=$($profile.HeaderOrdinal)"}else{$args1+="&HeaderOrdinal=$($profile.HeaderOrdinal)"}}
if(!([string]::IsNullOrEmpty($profile.MTableDescription))){if($args1.length -eq 0){$args1+="MTableDescription=$($profile.MTableDescription)"}else{$args1+="&MTableDescription=$($profile.MTableDescription)"}}
if(!([string]::IsNullOrEmpty($profile.ResultType))){if($args1.length -eq 0){$args1+="ResultType=$($profile.ResultType)"}else{$args1+="&ResultType=$($profile.ResultType)"}}
if(!([string]::IsNullOrEmpty($profile.URIParameterElementDescriptorList))){if($args1.length -eq 0){$args1+="URIParameterElementDescriptorList=$($profile.URIParameterElementDescriptorList)"}else{$args1+="&URIParameterElementDescriptorList=$($profile.URIParameterElementDescriptorList)"}}
if(!([string]::IsNullOrEmpty($profile.URIUserParameterElementDescriptorList))){if($args1.length -eq 0){$args1+="URIUserParameterElementDescriptorList=$($profile.URIUserParameterElementDescriptorList)"}else{$args1+="&URIUserParameterElementDescriptorList=$($profile.URIUserParameterElementDescriptorList)"}}


    Write-Host "Adding rule '$($profile.Description)' to '$($profile.MTableDescription)'" -ForegroundColor White
    #$args1="Description=$($Description)&ResultType=1&URIParameterElementDescriptorList=$($droptgrpelement.id),$($droptrunkcontextelement.id)"
    $url = "https://$($sbcfqdn)/rest/spmmessagetable/$($TableId)/$($profile.ruletype)/$($NextId)"
    #$url

    if($TableId -and $NextId){
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $rule = $result.root.$($profile.RuleType)
            $object = New-Object –Type PSObject –Prop(@{'RuleType'=$($profile.ruletype);'MTableId'=$TableId;'MTableHref'=$($Table.href);'MTableDescription'=$($table.Description);`
                                    'MTableMessageType'=$($table.MessageType);'MTableMessageTypeList'=$($table.MessageTypeList);`
                                    'MTableResultType'=$($table.ResultType);'MTableSequence'=$($table.Sequence);`
                                    'MRuleId'=$rule.id;'href'=$rule.href;'ConditionExpression'=$rule.ConditionExpression;'Description'=$rule.Description;'HeaderAction'=$rule.HeaderAction;`
                                    'ElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.ElementDescriptorList.entry.'#text' ",");`
                                    'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.HeaderElementDescriptorList.entry.'#text' ",");'HeaderName'=$rule.HeaderName;'HeaderOrdinal'=$rule.HeaderOrdinal;`
                                    'HeaderParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.HeaderParameterElementDescriptorList.entry.'#text' ",");`
                                    'ResultType'=$rule.ResultType;`
                                    'URIParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIParameterElementDescriptorList.entry.'#text' ",");`
                                    'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin $rule.URIUserParameterElementDescriptorList.entry.'#text' ",");`
                                    'EID'='';'Ehref'='';'EAction'='';'EElementClass'='';'Ename'='';'EPrefix'='';'ERegexReplace'='';'ESuffix'='';'EType'='';'EValue'='';})
            $global:mmRules += $object
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
    }
    

}

function MessageManipulationRules_Delete($sbcfqdn, $url){
    
[xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()

    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }

}

function MessageManipulationRules_Validate($sbcfqdn, $trunks){
Write-Host "Validating Message Manipulation Rules Configuration" -ForegroundColor Yellow -NoNewline
$mmRulesrequired = @()
$mmRulestoadd = @()
$mmRulestodelete = @()

$Realms = $trunks | select -ExpandProperty Realm | sort

#Microsoft Inbound
$historyinfoelement = $MMElements | Where-Object {$_.Action -eq 4 -and $_.Value -eq "SG User Value 1" -and $_.ElementClass -eq 0}
$referelement = $MMElements | Where-Object {$_.Action -eq 4 -and $_.Value -eq "SG User Value 2" -and $_.ElementClass -eq 10}
$referredbyelement = $MMElements | Where-Object {$_.Action -eq 4 -and $_.Value -eq "SG User Value 3" -and $_.ElementClass -eq 0}

#Spark Inbound
$droptgrpelement  = $MMElements | Where-Object {$_.name -eq 'tgrp' -and $_.Action -eq 3} | select -first 1
$droptrunkcontextelement = $MMElements | Where-Object {$_.name -eq 'trunk-context' -and $_.Action -eq 3} | select -first 1

#Spark Outbound
$correctdiversionelement = $MMElements | Where-Object {$_.Action -eq 2 -and $_.Value -eq "(sip\:)(\+64)(\d[1-9])(.*)" -and $_.ElementClass -eq 0 -and $_.Type -eq 2}



$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=3;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'='';'MTableDescription'='Spark - Outbound Manipulation (Common)';'URIParameterElementDescriptorList'='';'Description'='Spark Voice Connect - Remove PAI (Common)';'HeaderName'='p-asserted-identity';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule
$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=3;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'='';'MTableDescription'='Spark - Outbound Manipulation (Common)';'URIParameterElementDescriptorList'='';'Description'='Spark Voice Connect - Remove Referred By (Common)';'HeaderName'='referred-by';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule
$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($correctdiversionelement.id) ",");'MTableDescription'='Spark - Outbound Manipulation (Common)';'URIParameterElementDescriptorList'='';'Description'='Spark Voice Connect - Normalise Diversion DDI (Common)';'HeaderName'='diversion';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule

foreach($Realm in $Realms){
    $replaceurihostelement = $MMElements | Where-Object {$_.Action -eq 2 -and $_.Value -eq $Realm -and $_.ElementClass -eq 4 -and $_.Type -eq 0}
    
    $mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($replaceurihostelement.id) ",");'MTableDescription'="Spark - Outbound Manipulation ($($Realm))";'URIParameterElementDescriptorList'='';'Description'="Spark Voice Connect - Replace Diversion URI Host ($($Realm))";'HeaderName'='diversion';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
    $mmRulesrequired += $mmRule
    $mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($replaceurihostelement.id) ",");'MTableDescription'="Spark - Outbound Manipulation ($($Realm))";'URIParameterElementDescriptorList'='';'Description'="Spark Voice Connect - Replace To URI Host ($($Realm))";'HeaderName'='to';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
    $mmRulesrequired += $mmRule
    $mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($replaceurihostelement.id) ",");'MTableDescription'="Spark - Outbound Manipulation ($($Realm))";'URIParameterElementDescriptorList'='';'Description'="Spark Voice Connect - Replace From URI Host ($($Realm))";'HeaderName'='from';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
    $mmRulesrequired += $mmRule
}


foreach($trunk in $trunks){
    $tgrpelement  = $MMElements | Where-Object {$_.name -eq 'tgrp' -and $_.Value -eq $trunk.Username -and $_.Action -eq 1} | select -first 1
    $trunkcontextelement = $MMElements | Where-Object {$_.name -eq 'trunk-context' -and $_.value -eq $trunk.Realm -and $_.Action -eq 1} | select -first 1

    $mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'='';'MTableDescription'="Spark - Outbound Authentication ($($trunk.TrunkName))";'URIParameterElementDescriptorList'='';'Description'="Spark Voice Connect - Insert TGRP Information ($($trunk.TrunkName))";'HeaderName'='contact';'ResultType'=1;'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($tgrpelement.id,$trunkcontextelement.id) ",");})
    $mmRulesrequired += $mmRule
    #$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'='';'MTableDescription'="Spark - Outbound Authentication ($($trunk.TrunkName))";'URIParameterElementDescriptorList'='';'Description'="Spark Voice Connect - Insert TGRP Information ($($trunk.TrunkName))";'HeaderName'='contact';'ResultType'=1;'URIUserParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($tgrpelement.id,$trunkcontextelement.id) ",");})
    #$mmRulesrequired += $mmRule
}



$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($historyinfoelement.id) ",");'MTableDescription'='Microsoft - Inbound Manipulation (INVITE)';'URIParameterElementDescriptorList'='';'Description'='Copy History-Info to SG User Value 1';'HeaderName'='history-info';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule
$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmheaderrule';'HeaderAction'=2;'HeaderOrdinal'=1;'ElementDescriptorList'='';'HeaderElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($referredbyelement.id) ",");'MTableDescription'='Microsoft - Inbound Manipulation (INVITE)';'URIParameterElementDescriptorList'='';'Description'='Copy Referred-By to SG User Value 3';'HeaderName'='referred-by';'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule
$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmrequestlinerule';'HeaderAction'=$null;'HeaderOrdinal'=$null;'ElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($referelement.id) ",");'HeaderElementDescriptorList'='';'MTableDescription'='Microsoft - Inbound Manipulation (REFER)';'URIParameterElementDescriptorList'='';'Description'='Copy REFER to SG User Value 2';'HeaderName'=$null;'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule
$mmRule = New-Object –Type PSObject –Prop(@{'RuleType'='spmrequestlinerule';'HeaderAction'=$null;'HeaderOrdinal'=$null;'ElementDescriptorList'='';'HeaderElementDescriptorList'='';'MTableDescription'='Spark - Inbound Manipulation';'URIParameterElementDescriptorList'=$(SortStringsAsIntegersAndJoin @($droptgrpelement.id,$droptrunkcontextelement.id) ",");'Description'='Strip Spark Trunk Info';'HeaderName'=$null;'ResultType'=1;'URIUserParameterElementDescriptorList'='';})
$mmRulesrequired += $mmRule


#$mmRulesrequired | ft








#Determine records to Add
foreach($profile in $mmRulesrequired){
    if(!($mmRules | Where-Object {$_.Description -eq $profile.Description -and 
        $_.HeaderAction -eq $profile.HeaderAction -and 
        $_.ElementDescriptorList -eq $profile.ElementDescriptorList -and                     
        $_.HeaderElementDescriptorList -eq $profile.HeaderElementDescriptorList -and 
        $_.HeaderName -eq $profile.HeaderName -and 
        $_.HeaderOrdinal -eq $profile.HeaderOrdinal -and 
        $_.MTableDescription -eq $profile.MTableDescription -and 
        $_.ResultType -eq $profile.ResultType -and 
        $_.RuleType -eq $profile.RuleType -and 
        $_.URIParameterElementDescriptorList -eq $profile.URIParameterElementDescriptorList -and 
        $_.URIUserParameterElementDescriptorList -eq $profile.URIUserParameterElementDescriptorList})){
        $mmRulestoadd += $profile
    }
}



#Determine records to Delete
foreach($profile in $($mmRules | where {$_.HeaderParameterElementDescriptorList -or $_.HeaderElementDescriptorList -or $_.URIParameterElementDescriptorList -or $_.ElementDescriptorList -or $_.URIUserParameterElementDescriptorList -or $_.headeraction})){
    if(!($mmRulesrequired | Where-Object {$_.Description -eq $profile.Description -and 
        $_.HeaderAction -eq $profile.HeaderAction -and 
        $_.ElementDescriptorList -eq $profile.ElementDescriptorList -and             
        $_.HeaderElementDescriptorList -eq $profile.HeaderElementDescriptorList -and 
        $_.HeaderName -eq $profile.HeaderName -and 
        $_.HeaderOrdinal -eq $profile.HeaderOrdinal -and 
        $_.MTableDescription -eq $profile.MTableDescription -and 
        $_.ResultType -eq $profile.ResultType -and 
        $_.RuleType -eq $profile.RuleType -and 
        $_.URIParameterElementDescriptorList -eq $profile.URIParameterElementDescriptorList -and 
        $_.URIUserParameterElementDescriptorList -eq $profile.URIUserParameterElementDescriptorList})){
        $mmRulestodelete += $profile
    }
}


    if (!($mmRulestoadd) -and !($mmRulestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $mmRulestoadd){
        MessageManipulationRules_Add $sbcfqdn $profile
    }

    foreach($profile in $mmRulestodelete){
        MessageManipulationRules_Delete $sbcfqdn $profile.href
    }
   



#Write-Host "Headers" -ForegroundColor Yellow






}
#endregion

#region Message Manipulation Tables
function MessageManipulationTables_Add($sbcfqdn, $Description, $MessageType, $MessageTypeList, $ResultType){
Write-Host "Adding Message Manipulation Table Configuration '$($Description)'" -ForegroundColor White
$NextId = 1 + $(GetLastId $($mmtables  |select -ExpandProperty Id))

$url = "https://$($sbcfqdn)/rest/spmmessagetable/$($NextId)"
$args1 = "Description=$($Description)&MessageType=$($MessageType)&MessageTypeList=$($MessageTypeList)&ResultType=$($ResultType)"
 
[xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:mmTables += $result.root.spmmessagetable
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }

}

function MessageManipulationTables_Delete($sbcfqdn, $url){

[xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()

    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function MessageManipulationTables_Get($sbcfqdn){
Write-Host "Loading Message Manipulation Tables Configuration from SBC" -ForegroundColor Magenta
$global:mmTables = @()

    $url = "https://$($sbcfqdn)/rest/spmmessagetable"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()        
    if($result.root.status.http_code -eq 200){
        
        $mmTableURLS += $result.root.spmmessagetable_list.spmmessagetable_pk
        foreach($url in $mmTableURLS){
            [xml]$result = $(Invoke-RestMethod -Uri $url.href -Method GET -WebSession $sbcauthsession).trim()          
            if($result.root.status.http_code -eq 200){
                
                $global:mmTables += $result.root.spmmessagetable
            }else{
                Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
                Read-Host
            }
        }
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
  
}

function MessageManipulationTables_Validate($sbcfqdn, $Realms, $TrunkNames){
$mmTablesrequired = @()
$mmTablestoadd = @()
$mmTablestodelete = @()

Write-Host "Validating Message Manipulation Tables Configuration" -ForegroundColor Yellow -NoNewline


$mmTable = New-Object –Type PSObject –Prop(@{'Description'='Spark - Outbound Manipulation (Common)';'MessageType'=3;'MessageTypeList'='INVITE';'ResultType'=1;})
$mmTablesrequired += $mmTable
$mmTable = New-Object –Type PSObject –Prop(@{'Description'='Spark - Inbound Manipulation';'MessageType'=3;'MessageTypeList'='INVITE';'ResultType'=1;})
$mmTablesrequired += $mmTable
$mmTable = New-Object –Type PSObject –Prop(@{'Description'='Microsoft - Inbound Manipulation (REFER)';'MessageType'=3;'MessageTypeList'='REFER';'ResultType'=1;})
$mmTablesrequired += $mmTable
$mmTable = New-Object –Type PSObject –Prop(@{'Description'='Microsoft - Inbound Manipulation (INVITE)';'MessageType'=3;'MessageTypeList'='INVITE';'ResultType'=1;})
$mmTablesrequired += $mmTable
foreach($Realm in $Realms){
    $mmTable = New-Object –Type PSObject –Prop(@{'Description'="Spark - Outbound Manipulation ($($Realm.realm))";'MessageType'=3;'MessageTypeList'='INVITE,REGISTER';'ResultType'=1;})
    $mmTablesrequired += $mmTable
}
foreach($TrunkName in $TrunkNames){
    $mmTable = New-Object –Type PSObject –Prop(@{'Description'="Spark - Outbound Authentication ($($TrunkName.trunkname))";'MessageType'=3;'MessageTypeList'='INVITE';'ResultType'=1;})
    $mmTablesrequired += $mmTable
}


#Determine records to Add
foreach($profile in $mmTablesrequired){
    if(!($mmTables | Where-Object {$_.Description -eq $profile.Description -and $_.MessageType -eq $profile.MessageType -and $_.MessageTypeList -eq $profile.MessageTypeList -and $_.ResultType -eq $profile.ResultType})){
        $mmTablestoadd += $profile
    }
}

#Determine records to Delete
foreach($profile in $mmTables){
    if(!($mmTablesrequired | Where-Object {$_.Description -eq $profile.Description -and $_.MessageType -eq $profile.MessageType -and $_.MessageTypeList -eq $profile.MessageTypeList -and $_.ResultType -eq $profile.ResultType})){
        $mmTablestodelete += $profile
    }
}


    if (!($mmTablestoadd) -and !($mmTablestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }



    foreach($profile in $mmTablestoadd){
        MessageManipulationTables_Add $sbcfqdn $profile.Description $profile.MessageType $profile.MessageTypeList $profile.ResultType
    }

    foreach($profile in $mmTablestodelete){
        MessageManipulationTables_Delete $sbcfqdn $profile.href
    }
  

}

#endregion Message Manipulation Rules

#region Remote Auth Tables
function RemoteAuthTable_Add($sbcfqdn, $Profile){

$TrunkName = $Profile.Description


    if(!($SipServerAuthDetails | Where-Object {$_.Description -eq $TrunkName})){
        Write-Host "Creating $($TrunkName) Remote Auth Table" -ForegroundColor White
        $NextID = 1 + $(GetLastId $($SipServerAuthDetails | select -ExpandProperty id))
        $url = "https://$($sbcfqdn)/rest/sipremoteauthtable/$($NextId)"
        $args1 = "Description=$($TrunkName)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            
            $sipremoteauthtabledetails = $result.root.sipremoteauthtable
            $object = New-Object –Type PSObject –Prop(@{'Description'=$sipremoteauthtabledetails.Description;'Sequence'=$sipremoteauthtabledetails.sequence;'id'=$sipremoteauthtabledetails.id;'SIPRAThref'=$sipremoteauthtabledetails.href;`
                'AuthEntryId'='';'AuthEntryhref'='';'AuthEntryPassword'='';'AuthEntryUser'='';`
                'AuthEntryRegex'='';'AuthEntryRealm'='';'AuthEntryFromUserURIMatch'='';})
            $global:SipServerAuthDetails += $object
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
    }else{
            Write-Host "Record already exists" -ForegroundColor Yellow
    }

    
    Write-Host "Creating $($TrunkName) Remote Auth Table Entry" -ForegroundColor White
    $TableInfo = $SipServerAuthDetails | Where-Object {$_.Description -eq $TrunkName} | select -First 1
    $NextID = GetLastId $($SipServerAuthDetails | Where-Object {$_.Description -eq $TrunkName} |select -ExpandProperty id)
    $NextEntryID = 1 + $(GetLastId $($SipServerAuthDetails | Where-Object {$_.Description -eq $TrunkName} |select -ExpandProperty authentryid))
    $url = "https://$($sbcfqdn)/rest/sipremoteauthtable/$($NextId)/sipremoteauthentry/$($NextEntryID)"
    $args1 = "Realm=$($profile.AuthEntryRealm)&User=$($profile.AuthEntryUser)&EncryptedPassword=$($profile.AuthEntryPassword)&FromURIUserMatch=$($profile.AuthEntryFromUserURIMatch)&MatchRegex=$($profile.AuthEntryRegex)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $sipremoteauthentrydetails = $result.root.sipremoteauthentry
        $object = New-Object –Type PSObject –Prop(@{'Description'=$TrunkName;'Sequence'=$TableInfo.sequence;'id'=$TableInfo.id;'SIPRAThref'=$TableInfo.href;`
            'AuthEntryId'=$sipremoteauthentrydetails.id;'AuthEntryhref'=$sipremoteauthentrydetails.href;'AuthEntryPassword'=$sipremoteauthentrydetails.EncryptedPassword;'AuthEntryUser'=$sipremoteauthentrydetails.User;`
            'AuthEntryRegex'=$sipremoteauthentrydetails.MatchRegex;'AuthEntryRealm'=$sipremoteauthentrydetails.Realm;'AuthEntryFromUserURIMatch'=$sipremoteauthentrydetails.FromURIUserMatch;})
        $global:SipServerAuthDetails += $object
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
}

function RemoteAuthTable_Get($sbcfqdn){
Write-Host "Loading Sip Remote Authorization Configuration from SBC" -ForegroundColor Magenta
$global:SipServerAuthDetails = @()

$url = "https://$($sbcfqdn)/rest/sipremoteauthtable"
[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()

$sipremoteauthtables = $results.root.sipremoteauthtable_list.sipremoteauthtable_pk

foreach($sipremoteauthtable in $sipremoteauthtables){
    #Get Remote Auth Table Details
    $url = "$($sipremoteauthtable.href)"
    [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $sipremoteauthtabledetails = $results.root.sipremoteauthtable

    #Get Remote Auth Entries
    $url = "$($sipremoteauthtable.href)/sipremoteauthentry"
    [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $sipremoteauthentries = $results.root.sipremoteauthentry_list.sipremoteauthentry_pk
    if($sipremoteauthentries){
        foreach($sipremoteauthentry in $sipremoteauthentries){
            $url = $sipremoteauthentry.href
            [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
            $sipremoteauthentrydetails = $results.root.sipremoteauthentry
            $object = New-Object –Type PSObject –Prop(@{'Description'=$sipremoteauthtabledetails.Description;'Sequence'=$sipremoteauthtabledetails.sequence;'id'=$sipremoteauthtabledetails.id;'SIPRAThref'=$sipremoteauthtabledetails.href;`
                            'AuthEntryId'=$sipremoteauthentrydetails.id;'AuthEntryhref'=$sipremoteauthentrydetails.href;'AuthEntryPassword'=$sipremoteauthentrydetails.EncryptedPassword;'AuthEntryUser'=$sipremoteauthentrydetails.User;`
                            'AuthEntryRegex'=$sipremoteauthentrydetails.MatchRegex;'AuthEntryRealm'=$sipremoteauthentrydetails.Realm;'AuthEntryFromUserURIMatch'=$sipremoteauthentrydetails.FromURIUserMatch;})
            $global:SipServerAuthDetails += $object
        }
    }else{
        $object = New-Object –Type PSObject –Prop(@{'Description'=$sipremoteauthtabledetails.Description;'Sequence'=$sipremoteauthtabledetails.sequence;'id'=$sipremoteauthtabledetails.id;'SIPRAThref'=$sipremoteauthtabledetails.href;`
                'AuthEntryId'='';'AuthEntryhref'='';'AuthEntryPassword'='';'AuthEntryUser'='';`
                'AuthEntryRegex'='';'AuthEntryRealm'='';'AuthEntryFromUserURIMatch'='';})
        $global:SipServerAuthDetails += $object
    }
    
}


}

function RemoteAuthTable_Validate($sbcfqdn){
Write-Host "Validating SIP Remote Authorization Configuration" -ForegroundColor Yellow -NoNewline
$RemoteAuthTablesRequired = @()
$RemoteAuthTablesToAdd = @()
$RemoteAuthTablesToDelete = @()

$trunkconfigdata = $TrunkData | where {$_.TrunkName -match "Shared\d{2}" -and $_.sbcfqdn -eq $sbcfqdn} | select TrunkName, Realm, UserName, Password





foreach($TrunkInfo in $trunkconfigdata){
$TrunkName = "Spark Voice Connect - $($trunkconfigdata.TrunkName)"
$Realm = $trunkconfigdata.Realm 
$UserName = $trunkconfigdata.Username 
$Password = $trunkconfigdata.Password

#Spark Auth
$RemoteAuth = New-Object –Type PSObject –Prop(@{'Description'=$TrunkName;'AuthEntryUser'=$UserName;'AuthEntryPassword'=$Password;'AuthEntryRealm'=$Realm;'AuthEntryFromUserURIMatch'=1;'AuthEntryRegex'='.*'})
$RemoteAuthTablesRequired += $RemoteAuth

}


#Determine objects to Add
foreach($Profile in $RemoteAuthTablesRequired){
    if(!($SipServerAuthDetails | Where-Object {$_.Description -eq $Profile.Description -and $_.AuthEntryUser -eq $Profile.AuthEntryUser -and $_.AuthEntryPassword -eq $Profile.AuthEntryPassword -and $_.AuthEntryRealm -eq $Profile.AuthEntryRealm -and $_.AuthEntryFromUserURIMatch -eq $Profile.AuthEntryFromUserURIMatch -and $_.AuthEntryRegex -eq $Profile.AuthEntryRegex})){
        $RemoteAuthTablesToAdd += $Profile
    }
}

#Determine objects to Delete
foreach($Profile in $SipServerAuthDetails){
    if(!($RemoteAuthTablesRequired | Where-Object {$_.Description -eq $Profile.Description -and $_.AuthEntryUser -eq $Profile.AuthEntryUser -and $_.AuthEntryPassword -eq $Profile.AuthEntryPassword -and $_.AuthEntryRealm -eq $Profile.AuthEntryRealm -and $_.AuthEntryFromUserURIMatch -eq $Profile.AuthEntryFromUserURIMatch -and $_.AuthEntryRegex -eq $Profile.AuthEntryRegex})){
        $RemoteAuthTablesToDelete += $Profile
    }
}

  if (!($RemoteAuthTablesToAdd) -and !($RemoteAuthTablesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $RemoteAuthTablesToAdd){
        RemoteAuthTable_Add $sbcfqdn $profile
        #.Description $profile.FallbackCompatibleMode $profile.HandshakeTimeout $profile.MutualAuth $profile.TLSVersion $profile.ValidateClientFQDN $profile.ValidateServerFQDN $profile.VerifyPeersCertificate
    }

    foreach($profile in $RemoteAuthTablesToDelete){
        RemoteAuthTable_Delete $sbcfqdn $profile.Description
    }

}
#endregion Remote Auth Tables

#region Routing Tables
function RoutingTable_Add($sbcfqdn, $Profile){
$NextId = 1 + $(GetLastId $($RoutingTables | select -ExpandProperty id -ErrorAction SilentlyContinue))
        
Write-Host "Creating Routing Table '$($Profile.Description)'" -ForegroundColor White
        
           

$url = "https://$($sbcfqdn)/rest/routingtable/$($NextId)"
$args1 = "Description=$($Profile.Description)"
[xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:RoutingTables += $result.root.routingtable
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
    
    
 
    
    
    
}

function RoutingTable_Validate($sbcfqdn){
Write-Host "Validating Call Routing Table Configuration" -ForegroundColor Yellow -NoNewline
$RoutingTablesRequired = @()
$RoutingTablesToAdd = @()
$RoutingTablesToDelete = @()

$TablesToCreate = @("From Teams", "From PSTN", "From Enghouse")
foreach($Table in $TablesToCreate){
    $RoutingTable = New-Object –Type PSObject –Prop(@{'Description'=$Table;})
    $RoutingTablesRequired += $RoutingTable
}


#Determine objects to Add
foreach($Profile in $RoutingTablesRequired){
    if(!($RoutingTables | Where-Object {$_.Description -eq $Profile.Description})){
        $RoutingTablesToAdd += $Profile
    }
}

#Determine objects to Delete
foreach($Profile in $RoutingTables){
    if(!($RoutingTablesRequired | Where-Object {$_.Description -eq $Profile.Description})){
        $RoutingTablesToDelete += $Profile
    }
}

  if (!($RoutingTablesToAdd) -and !($RoutingTablesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $RoutingTablesToAdd){
        RoutingTable_Add $sbcfqdn $profile
        #.Description $profile.FallbackCompatibleMode $profile.HandshakeTimeout $profile.MutualAuth $profile.TLSVersion $profile.ValidateClientFQDN $profile.ValidateServerFQDN $profile.VerifyPeersCertificate
    }

    foreach($profile in $RoutingTablesToDelete){
        RoutingTable_Delete $sbcfqdn $profile
    }
     
}

function RoutingTable_Delete($sbcfqdn, $Profile){
    $Description = $Profile.Description
    $TableId = $(GetLastId $($RoutingTables | Where-Object {$_.Description -eq $Description} | select -ExpandProperty id -ErrorAction SilentlyContinue))

    if($TableId){
        Write-Host "Deleting Routing Table '$($Description)'" -ForegroundColor White

        $url = "https://$($sbcfqdn)/rest/routingtable/$($TableId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Delete -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $global:RoutingTables = $RoutingTables | Where {$_.Description -ne $Description}
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
    }else{
        Write-Host "Record already exists" -ForegroundColor Yellow
    }
    
    
}

function RoutingTable_Get($sbcfqdn){
$global:RoutingTables =@()
Write-Host "Loading Routing Table Configuration from SBC" -ForegroundColor Magenta
    
    $url = "https://$($sbcfqdn)/rest/routingtable"
    
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $RoutingTablesList = $result.root.routingtable_list.routingtable_pk
    foreach($RoutingTable in $RoutingTablesList){
        [xml]$result = $(Invoke-RestMethod -Uri $RoutingTable.href -Method GET -WebSession $sbcauthsession).trim()
        $global:RoutingTables += $result.root.routingtable
    }

return $global:RoutingTables
}

#endregion Routing Tables

#region Routing Table Entries
function RoutingEntry_Add($sbcfqdn, $profile){
$TableName = $profile.TableDesc
$TableId = GetLastId $($RoutingTables | where {$_.Description -eq $Tablename} | select -ExpandProperty Id | select -First 1)
$TableURL = $RoutingTables | where {$_.Id -eq $TableId} | select -ExpandProperty href
$NextId = 1 + $(GetLastId $($RoutingEntries | where {$_.TableId -eq $TableId} | select -ExpandProperty Id -ErrorAction SilentlyContinue))

$url = "$($TableURL)/routingentry/$($NextId)"

$args1 = "Description=$($profile.Description)&ConfigIEState=$($profile.ConfigIEState)&RoutePriority=$($profile.RoutePriority)&CallPriority=$($profile.CallPriority)&TransformationTable=$($profile.TransformationTable)&`
            DestinationType=$($profile.DestinationType)&MessageTranslationTable=$($profile.MessageTranslationTable)&DenyCauseCode=$($profile.DenyCauseCode)&CancelOthersUponForwarding=$($profile.CancelOthersUponForwarding)&`
            SignalingGroupList=$($profile.SignalingGroupList)&MaximumCallDuration=$($profile.MaximumCallDuration)&MediaMode=$($profile.MediaMode)&MediaSelection=$($profile.MediaSelection)&MediaTranscoding=$($profile.MediaTranscoding)"

        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $($args1 -replace "`r`n", "") -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
             $Route = $result.root.routingentry

        $object = New-Object –Type PSObject –Prop(@{'TableId'=$TableId;'Tablehref'=$TableURL;'TableDesc'=$TableName;'TableSeq'=$TableSeq;`
                                                            'id'= $Route.id;'href'= $Route.href;'CallForked'= $Route.CallForked;'CallPriority'= $Route.CallPriority;'CancelOthersUponForwarding'= $Route.CancelOthersUponForwarding;`
                                                            'ConfigIEState'= $Route.ConfigIEState;'DenyCauseCode'= $Route.DenyCauseCode;'Description'= $Route.Description;'DestinationType'= $Route.DestinationType;`
                                                            'MaximumCallDuration'= $Route.MaximumCallDuration;'MediaMode'= $Route.MediaMode;'MediaSelection'= $Route.MediaSelection;'MediaTranscoding'= $Route.MediaTranscoding;`
                                                            'MessageTranslationTable'= $Route.MessageTranslationTable;'ProxyHandlingOption'= $Route.ProxyHandlingOption;'QualityMaxJitterThreshold'= $Route.QualityMaxJitterThreshold;`
                                                            'QualityMaxRoundTripDelayThreshold'= $Route.QualityMaxRoundTripDelayThreshold;'QualityMetricCalls'= $Route.QualityMetricCalls;'QualityMetricTime'= $Route.QualityMetricTime;`
                                                            'QualityMinASRThreshold'= $Route.QualityMinASRThreshold;'QualityMinLQMOSThreshold'= $Route.QualityMinLQMOSThreshold;'ReRouteTable'= $Route.ReRouteTable;'RoutePriority'= $Route.RoutePriority;`
                                                            'SignalingGroupList'= $Route.SignalingGroupList;'TransformationTable'= $Route.TransformationTable;'VideoMediaMode'= $Route.VideoMediaMode;'rt_ASR'= $Route.rt_ASR;'rt_Jitter'= $Route.rt_Jitter;`
                                                            'rt_MOS'= $Route.rt_MOS;'rt_QualityFailed'= $Route.rt_QualityFailed;'rt_RoundTripDelay'= $Route.rt_RoundTripDelay;'rt_RuleUsage'= $Route.rt_RuleUsage;})
                    $global:RoutingEntries += $object
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
	
        



}

function RoutingEntry_Delete($sbcfqdn, $profile){
    

        Write-Host "Deleting Routing Table Entry '$($Profile.Description)'" -ForegroundColor White

        $url = $profile.href
        [xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $global:RoutingTables = $RoutingTables | Where {$_.Description -ne $Profile.Description -and $_.TableDesc -ne $Profile.TableDesc}
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
  
}

function RoutingEntry_CreateFromSpark($sbcfqdn, $Organisation, $trunkname){
$CurrentRoutingEntries = RoutingEntry_GetSummary $sbcfqdn 
$TTTable = TransformationTable_Get $sbcfqdn 
$TransformationTables = $TTTable | select ttid, ttdescription -unique
$SignallingGroups = SIPSignallingGroup_GetSummary $sbcfqdn
$MediaLists = MediaList_Get $sbcfqdn

$FromTeamsDescription = "$($Organisation) - To PSTN"
#$FromTeamsTransTable = "$($Organisation) - From Teams"
$FromTeamsTransTable = "To PSTN"
$FromTeamsForwardDescription = "$($Organisation) - To PSTN (Forward)"
$FromTeamsForwardTransTable = "To PSTN - $($Organisation) - SIMRing/Forward"
$FromTeamsReferDescription = "To Teams - $($Organisation) - Refer"
$FromTeamsReferTransTable = "To Teams - $($Organisation) - Refer"
$FromTeamsReferToPSTNDescription = "$($Organisation) - To PSTN (Refer)"
$FromTeamsReferToPSTNTransTable = "$($Organisation) - From Teams (Refer to PSTN)"
$FromPSTNDescription = "To Teams - $($Organisation)"
$FromPSTNTransTable = "To Teams - $($Organisation)"
$DivertToPSTNTransTable = "To PSTN - $($Organisation) - Divert"
$DivertToPSTNTransDescription = "To PSTN - $($Organisation) - Divert"


#From PSTN to Teams Routing Table Entry
Write-Host "Creating Routing Entries '$($FromPSTNDescription)'" -ForegroundColor White
if(!($CurrentRoutingEntries | Where-Object {$_.Description -eq $FromPSTNDescription})){
    $TableBaseURL = $CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN - $($trunkname)"} | select -ExpandProperty Tablehref | select -first 1

    $MediaListId = $MediaLists | Where-Object {$_.Description -eq "Teams"} | select -ExpandProperty id | select -first 1
    $SignallingGroupId = $SignallingGroups | Where-Object {$_.Description -eq "Teams - $($Organisation)"} | select -expand id
    $TransformationTableId = $TransformationTables | Where-Object {$_.TTDescription -eq $FromPSTNTransTable} | select -ExpandProperty ttid  |select -first 1

    if($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN - $($trunkname)"}){
        #$NextId = 1 + $($($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN"} | select -ExpandProperty id | sort -Descending) -split ":")[1]
        $NextId = 1 + $(GetLastId $($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN - $($trunkname)"} | select -ExpandProperty id -ErrorAction SilentlyContinue))
    }else{
        $NextId = 1
    }
    
    $url = "$($TableBaseURL)/routingentry/$($NextId)"

##
    $args1 = "Description=$($FromPSTNDescription)&ConfigIEState=1&RoutePriority=2&CallPriority=1&TransformationTable=$($TransformationTableId)&DestinationType=0&`
            MessageTranslationTable=0&DenyCauseCode=16&CancelOthersUponForwarding=0&SignalingGroupList=$($SignallingGroupId)&MaximumCallDuration=0&`
            MediaMode=0&MediaSelection=$($MediaListId)&MediaTranscoding=1"

    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
    
}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}

#From PSTN to PSTN (Divert) Routing Table Entry
$CurrentRoutingEntries = RoutingEntry_GetSummary $sbcfqdn $Organisation
Write-Host "Creating Routing Entries '$($DivertToPSTNTransDescription)'" -ForegroundColor White
if(!($CurrentRoutingEntries | Where-Object {$_.Description -eq $DivertToPSTNTransDescription})){
    $TableBaseURL = $CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN - $($trunkname)"} | select -ExpandProperty Tablehref | select -first 1

    $MediaListId = $MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1
    $SignallingGroupId = $SignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect - $($trunkname)"} | select -expand id
    $TransformationTableId = $TransformationTables | Where-Object {$_.TTDescription -eq $DivertToPSTNTransTable} | select -ExpandProperty ttid  |select -first 1

    if($TransformationTableId){
            if($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN - $($trunkname)"}){
            $NextId = 1 + $(GetLastId $($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From PSTN - $($trunkname)"} | select -ExpandProperty id -ErrorAction SilentlyContinue))
        }else{
            $NextId = 1
        }
    
        $url = "$($TableBaseURL)/routingentry/$($NextId)"

    ##
        $args1 = "Description=$($DivertToPSTNTransDescription)&ConfigIEState=1&RoutePriority=1&CallPriority=1&TransformationTable=$($TransformationTableId)&DestinationType=0&`
                MessageTranslationTable=0&DenyCauseCode=16&CancelOthersUponForwarding=0&SignalingGroupList=$($SignallingGroupId)&MaximumCallDuration=0&`
                MediaMode=0&MediaSelection=$($MediaListId)&MediaTranscoding=1"

        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
	

    }


}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}

#######################################################################

#From Teams Routing Table Entry


}

function RoutingEntry_CreateFromTeams($sbcfqdn, $trunkname){
$CurrentRoutingEntries = RoutingEntry_GetSummary $sbcfqdn 
$TTTable = TransformationTable_Get $sbcfqdn
$TransformationTables = $TTTable | select ttid, ttdescription -unique
$SignallingGroups = SIPSignallingGroup_GetSummary $sbcfqdn
$MediaLists = MediaList_Get $sbcfqdn

if($trunkname.ToUpper() -match "Shared\d{2}"){
    $FromTeamsDescription = "To PSTN - $($trunkname)"
}else{
    $FromTeamsDescription = "To PSTN"
}

$FromTeamsTransTable = "To PSTN"


#From Teams to PSTN Routing Table Entry
Write-Host "Creating Routing Entries '$($FromTeamsDescription)'" -ForegroundColor White
$CurrentRoutingEntries = RoutingEntry_GetSummary $sbcfqdn
if(!($CurrentRoutingEntries | Where-Object {$_.Description -eq $FromTeamsDescription})){
    $TableBaseURL = $CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From Teams - $($trunkname)"} | select -ExpandProperty Tablehref | select -first 1

    $MediaListId = $MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1
    $SignallingGroupId = $SignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect - $($trunkname)"} | select -expand id
    $TransformationTableId = $TransformationTables | Where-Object {$_.TTDescription -eq $FromTeamsTransTable} | select -ExpandProperty ttid  |select -first 1

    if($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From Teams"}){
        $NextId = 1 + $(GetLastId $($CurrentRoutingEntries | Where-Object {$_.TableDesc -eq "From Teams - $($trunkname)"} | select -ExpandProperty id -ErrorAction SilentlyContinue))
    }else{
        $NextId = 1
    }
    
    $url = "$($TableBaseURL)/routingentry/$($NextId)"

##
    $args1 = "Description=$($FromTeamsDescription)&ConfigIEState=1&RoutePriority=1&CallPriority=1&TransformationTable=$($TransformationTableId)&DestinationType=0&`
            MessageTranslationTable=0&DenyCauseCode=16&CancelOthersUponForwarding=0&SignalingGroupList=$($SignallingGroupId)&MaximumCallDuration=0&`
            MediaMode=0&MediaSelection=$($MediaListId)&MediaTranscoding=1"

    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
    
}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}




}

function RoutingEntry_DeleteByDescription($sbcfqdn, $Description){
$RoutingEntry = RoutingEntry_GetSummary $sbcfqdn | where {$_.Description -eq $Description}

$url = $RoutingEntry.href

    [xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}

}

function RoutingEntry_DisableByDescription($sbcfqdn, $Description){
    $RoutingEntry = RoutingEntry_GetSummary $sbcfqdn | where {$_.Description -eq $Description}

    $url = $RoutingEntry.href
    $args1 = "ConfigIEState=0"

    [xml]$result = $(Invoke-RestMethod -Uri $url -Method POST -body $args1 -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}

}

function RoutingEntry_Get($sbcfqdn){
$global:RoutingEntries = @()
Write-Host "Loading Routing Entry Configuration from SBC" -ForegroundColor Magenta

foreach($routingtable in $RoutingTables){
    $url = "$($routingtable.href)/routingentry"
    [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $RoutingTableEntries = $results.root.routingentry_list.routingentry_pk
    $TableId = $routingtable.id
    $TableHref = $routingtable.href
    $TableDesc = $routingtable.description
    $TableSeq = $routingtable.sequence
if($RoutingTableEntries){
     foreach($RoutingTableEntry in $RoutingTableEntries){
        $url = $RoutingTableEntry.href
        [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
        $Route = $results.root.routingentry

        $object = New-Object –Type PSObject –Prop(@{'TableId'=$TableId;'Tablehref'=$TableHref;'TableDesc'=$TableDesc;'TableSeq'=$TableSeq;`
                                                            'id'= $Route.id;'href'= $Route.href;'CallForked'= $Route.CallForked;'CallPriority'= $Route.CallPriority;'CancelOthersUponForwarding'= $Route.CancelOthersUponForwarding;`
                                                            'ConfigIEState'= $Route.ConfigIEState;'DenyCauseCode'= $Route.DenyCauseCode;'Description'= $Route.Description;'DestinationType'= $Route.DestinationType;`
                                                            'MaximumCallDuration'= $Route.MaximumCallDuration;'MediaMode'= $Route.MediaMode;'MediaSelection'= $Route.MediaSelection;'MediaTranscoding'= $Route.MediaTranscoding;`
                                                            'MessageTranslationTable'= $Route.MessageTranslationTable;'ProxyHandlingOption'= $Route.ProxyHandlingOption;'QualityMaxJitterThreshold'= $Route.QualityMaxJitterThreshold;`
                                                            'QualityMaxRoundTripDelayThreshold'= $Route.QualityMaxRoundTripDelayThreshold;'QualityMetricCalls'= $Route.QualityMetricCalls;'QualityMetricTime'= $Route.QualityMetricTime;`
                                                            'QualityMinASRThreshold'= $Route.QualityMinASRThreshold;'QualityMinLQMOSThreshold'= $Route.QualityMinLQMOSThreshold;'ReRouteTable'= $Route.ReRouteTable;'RoutePriority'= $Route.RoutePriority;`
                                                            'SignalingGroupList'= $Route.SignalingGroupList;'TransformationTable'= $Route.TransformationTable;'VideoMediaMode'= $Route.VideoMediaMode;'rt_ASR'= $Route.rt_ASR;'rt_Jitter'= $Route.rt_Jitter;`
                                                            'rt_MOS'= $Route.rt_MOS;'rt_QualityFailed'= $Route.rt_QualityFailed;'rt_RoundTripDelay'= $Route.rt_RoundTripDelay;'rt_RuleUsage'= $Route.rt_RuleUsage;})
                    $global:RoutingEntries += $object
    }
}
   
    
 
}

return $global:RoutingEntries   

}

function RoutingTableEntry_SortFromPSTN($sbcfqdn, $trunkname){
$FromPSTNNewOrder = @()

$CurrentRoutingEntries = RoutingEntry_GetSummary $sbcfqdn
$CurrentRoutingTables = RoutingTable_GetSummary $sbcfqdn
$RoutingTableDesc = "From PSTN - $($trunkname)"
#$CurrentRoutingTables

#Sort From PSTN (Divert To PSTN First, To Teams processed after)
$FromPSTNTableId = $CurrentRoutingTables | where {$_.Description -eq $RoutingTableDesc} | select -ExpandProperty Id
$FromPSTNEntries = $CurrentRoutingEntries | Where {$_.TableDesc -eq $RoutingTableDesc}
$CurrentSortingOrder = $($CurrentRoutingTables | where {$_.Description -eq $RoutingTableDesc} | select -ExpandProperty Sequence) -split ","

$DivertToPSTNEntries = $CurrentRoutingEntries | where {$_.TableDesc -eq $RoutingTableDesc -and $_.Description -match "Divert back to PSTN"} | sort Description |  select tableid, id, description

foreach($entry in $DivertToPSTNEntries){
    $FromPSTNNewOrder += GetLastId $($entry.id)
}

$RouteToTeamsEntries = $CurrentRoutingEntries | where {$_.TableDesc -eq $RoutingTableDesc -and $_.Description -match "To Teams"} | sort Description |  select tableid, id, description

foreach($entry in $RouteToTeamsEntries){
    $FromPSTNNewOrder += GetLastId $($entry.id)
}

#Write-Host $($CurrentSortingOrder -join ",") -ForegroundColor Red
#Write-Host $($FromPSTNNewOrder -join ",") -ForegroundColor Green

$FromPSTNNewOrderString = $($FromPSTNNewOrder -join ",")

    $Description = $RoutingTableDesc
    Write-Host "Updating sequencing on Routing Table '$($Description)'" -ForegroundColor White
            $url = "https://$($sbcfqdn)/rest/routingtable/$($FromPSTNTableId)"
            $args1 = "Sequence=$($FromPSTNNewOrderString)"
            [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()
            if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
         
}

function RoutingTableEntry_SortFromTeams($sbcfqdn, $Organisation){
$FromTeamsNewOrder = @()
$FromTeamsSortOrder = @("To PSTN (Forward)", "To Teams (Refer)", "To PSTN (Refer)", "To PSTN")

$CurrentRoutingEntries = RoutingEntry_GetSummary $sbcfqdn
$CurrentRoutingTables = RoutingTable_GetSummary $sbcfqdn
$TableToSort = "From Teams - $($Organisation)"
#$CurrentRoutingTables

#Sort From PSTN (Divert To PSTN First, To Teams processed after)
$FromTeamsTableId = $CurrentRoutingTables | where {$_.Description -eq $TableToSort} | select -ExpandProperty Id
$CurrentSortingOrder = $($CurrentRoutingTables | where {$_.Description -eq $TableToSort} | select -ExpandProperty Sequence) -split ","

$FromTeamsEntries = $CurrentRoutingEntries | where {$_.TableDesc -eq $TableToSort} | sort Description |  select tableid, id, description


foreach($sortorder in $FromTeamsSortOrder){
    foreach($entry in $FromTeamsEntries){
        $SearchPhrase = "$($Organisation) - $($sortorder)"
        if($entry.Description -eq $SearchPhrase){
            $FromTeamsNewOrder += GetLastId $($entry.id)
            break
        }
    }
    
}

#Write-Host $($CurrentSortingOrder -join ",") -ForegroundColor Red
#Write-Host $($FromTeamsNewOrder -join ",") -ForegroundColor Green

$FromTeamsNewOrderString = $($FromTeamsNewOrder -join ",")

    Write-Host "Updating sequencing on Routing Table '$($TableToSort)'" -ForegroundColor White
            $url = "https://$($sbcfqdn)/rest/routingtable/$($FromTeamsTableId)"
            $args1 = "Sequence=$($FromTeamsNewOrderString)"
            [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()
            if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}
         
}

function RoutingEntry_Validate($sbfqdn, $ToTeamsCustomerDDIInfo, $DivertToPSTNCustomerDDIInfo, $ToEnghouseCustomerDDIInfo){
Write-Host "Validating Call Routing Entry Configuration" -ForegroundColor Yellow -NoNewline
#$CustomersToTeams, $CustomersToDivert, $CustomersToEnghouse
$RoutingEntriesRequired = @()
$RoutingEntriesToAdd = @()
$RoutingEntriesToDelete = @()

$CustomersToTeams = $ToTeamsCustomerDDIInfo | select -expand customer -Unique
$CustomersToDivert =  $DivertToPSTNCustomerDDIInfo | select -expand customer -Unique
$CustomersToEnghouse = $ToEnghouseCustomerDDIInfo | select -expand customer -Unique

$DivertToPstnTables = $TTTable | Where-Object {$_.TTDescription -match "To PSTN \- .* \- Divert"} | select -expand TTDescription -Unique
    

    foreach($Organisation in $CustomersToDivert){
        $TableName = "From PSTN"
        $EntryName = "To PSTN - $($Organisation) - Divert"
                
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=1;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
                    'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
                    'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                
        $RoutingEntriesRequired += $object          
    }

    foreach($Organisation in $CustomersToTeams){
        $TableName = "From PSTN"
        $EntryName = "To Teams - $($Organisation)"
        
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Teams"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Teams - $($Organisation)"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=3;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
                    'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
                    'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
        $RoutingEntriesRequired += $object

        $TableName = "From Enghouse"
        $EntryName = "To Teams - $($Organisation)"
        
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Teams"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Teams - $($Organisation)"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=1;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
                    'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
                    'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
        $RoutingEntriesRequired += $object         
    }

    foreach($Organisation in $CustomersToEnghouse){
        $TableName = "From PSTN"
        $EntryName = "To Enghouse - $($Organisation)"
        
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Enghouse"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Enghouse - $($Organisation)"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=2;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
                    'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
                    'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
        $RoutingEntriesRequired += $object             

        $TableName = "From Teams"
        $EntryName = "To Enghouse - $($Organisation)"
        
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Enghouse"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Enghouse - $($Organisation)"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=2;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
                    'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
                    'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
        $RoutingEntriesRequired += $object  
    }

    foreach($DivertToPstnTable in $DivertToPstnTables){
        #SIMRing/Forward Rules
        $TableName = "From Teams"
        $EntryName = $DivertToPstnTable
    
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=4;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
            'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
            'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
        $RoutingEntriesRequired += $object

        #SIMRing/Forward Rules
        $TableName = "From Enghouse"
        $EntryName = $DivertToPstnTable
    
        $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
        $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
        $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

        $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=3;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
            'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
            'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
        $RoutingEntriesRequired += $object
    }

    
    #region From Teams To PSTN (SIMRing/Forward) Rules
    $TableName = "From Teams"
    $EntryName = "To PSTN (SIMRing/Forward)"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=1;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
    $RoutingEntriesRequired += $object
    #endregion

    #region "From Enghouse to PSTN"
    #region Enghouse to PSTN Calling (Mask CLID)
    $TableName = "From Enghouse"
    $EntryName = "To PSTN (Mask CLID)"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=2;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                        
    $RoutingEntriesRequired += $object
    #endregion

    #region Enghouse to PSTN Calling (Mask CLID)
    $TableName = "From Enghouse"
    $EntryName = "To PSTN (Redirect as Pilot)"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=2;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                        
    $RoutingEntriesRequired += $object
    #endregion

    #region Normal Enghouse to PSTN Calling
    $TableName = "From Enghouse"
    $EntryName = "To PSTN"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=4;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                        
    $RoutingEntriesRequired += $object
    #endregion
    #endregion

    
    #region Teams to PSTN Calling (Mask CLID)
    $TableName = "From Teams"
    $EntryName = "To PSTN (Mask CLID)"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=3;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                        
    $RoutingEntriesRequired += $object
    #endregion

    #region Teams to PSTN Calling (Refer)
    $TableName = "From Teams"
    $EntryName = "To PSTN (Refer)"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=1;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                        
    $RoutingEntriesRequired += $object
    #endregion


    #region Normal Teams to PSTN Calling
    $TableName = "From Teams"
    $EntryName = "To PSTN"
    
    $MediaListId = GetLastId $($MediaLists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id | select -first 1)
    $SignallingGroupId = GetLastid $($SipSignallingGroups | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -expand id | select -First 1)
    $TransformationTableId = GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $EntryName} | select -ExpandProperty ttid  |select -first 1)

    $object = New-Object –Type PSObject –Prop(@{'TableDesc'=$TableName;'Description'=$EntryName;'ConfigIEState'=1;'RoutePriority'=5;'CallPriority'=1;'TransformationTable'=$TransformationTableId;'DestinationType'=0;`
        'MessageTranslationTable'=0;'DenyCauseCode'=16;'CancelOthersUponForwarding'=0;'SignalingGroupList'=$SignallingGroupId;'MaximumCallDuration'=0;`
        'MediaMode'=0;'MediaSelection'=$MediaListId;'MediaTranscoding'=1;})
    
                        
    $RoutingEntriesRequired += $object
    #endregion





    #Determine objects to Add
foreach($Profile in $RoutingEntriesRequired){
    if(!($RoutingEntries | Where-Object {$_.TableDesc -eq $Profile.TableDesc -and $_.Description -eq $Profile.Description -and $_.RoutePriority -eq $Profile.RoutePriority -and $_.CallPriority -eq $Profile.CallPriority})){
        $RoutingEntriesToAdd += $Profile
    }
}

#Determine objects to Delete
foreach($Profile in $RoutingEntries){
    if(!($RoutingEntriesRequired | Where-Object {$_.TableDesc -eq $Profile.TableDesc -and $_.Description -eq $Profile.Description -and $_.RoutePriority -eq $Profile.RoutePriority -and $_.CallPriority -eq $Profile.CallPriority})){
        $RoutingEntriesToDelete += $Profile
    }
}

  if (!($RoutingEntriesToAdd) -and !($RoutingEntriesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $RoutingEntriesToAdd){
        RoutingEntry_Add $sbcfqdn $profile
    }

    foreach($profile in $RoutingEntriesToDelete){
        RoutingEntry_Delete $sbcfqdn $profile
    }
     



}
#endregion Routing Table Entries

#region SIP Contact Register
function SIPContactRegister_Add($sbcfqdn, $Profile){


    if(!($SipContactRegistrationDetails | Where-Object {$_.Description -eq $Profile.Description})){
        Write-Host "Creating SIP Contact Register Table" -ForegroundColor White        
        $NextId = 1 + $(GetLastId $($SipContactRegistrationDetails | select -ExpandProperty tableid -ErrorAction SilentlyContinue))
        $args1 = "Description=$($Profile.Description)"
        $url = "https://$($sbcfqdn)/rest/sipcontactregistrant/$($NextId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $sipcontactregistrantdetails = $result.root.sipcontactregistrant
            $object = New-Object –Type PSObject –Prop(@{'TableId'=$sipcontactregistrantdetails.id;'Description'=$sipcontactregistrantdetails.description;`
                'EntryId'='';'AOR'='';'AORTTL'='';'AORType'='';'FailedRegistrationRetryTimer'='';'Q1'='';'TTL1'='';'URI1'='';})
            $global:SipContactRegistrationDetails += $object
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }

    }else{
        Write-Host "Record aleady exists" -ForegroundColor Yellow
    }

    
        Write-Host "Creating SIP Contact Register for user $($Profile.AOR)" -ForegroundColor White

        
        $TableId = GetLastId $($SipContactRegistrationDetails | Where-Object {$_.Description -eq $Profile.Description} | select -ExpandProperty tableid)

        #Entry
        $NextId = 1 + $(GetLastId $($SipContactRegistrationDetails | Where-Object {$_.Description -eq $Profile.Description} | select -ExpandProperty entryid -ErrorAction SilentlyContinue))
        $args1 = "Description=$($Profile.Description)&AOR=$($Profile.AOR)&AORTTL=$($Profile.AORTTL)&AorType=$($Profile.AORType)&TTL1=$($Profile.TTL1)&URI1=$($Profile.URI1)&Q1=$($Profile.Q1)&FailedRegistrationRetryTimer=$($Profile.FailedRegistrationRetryTimer)"
        $url = "https://$($sbcfqdn)/rest/sipcontactregistrant/$($TableId)/sipregistrantentry/$($NextId)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $entrydetails = $result.root.sipregistrantentry
            #
            $object = New-Object –Type PSObject –Prop(@{'TableId'=$sipcontactregistrant.id;'TableHref'=$sipcontactregistrant.href;`
                            'EntryId'=$(0 + $($entrydetails.Id -split ":")[1]);'EntryHref'=$entrydetails.href;`
                            'Description'=$sipcontactregistrantdetails.description;`
                            'AOR'=$entrydetails.AOR;'AORTTL'=$entrydetails.aorttl;'AORType'=$entrydetails.AorType;`
                            'FailedRegistrationRetryTimer'=$entrydetails.FailedRegistrationRetryTimer;`
                            'Q1'=$entrydetails.q1;'TTL1'=$entrydetails.ttl1;'URI1'=$entrydetails.URI1;})
            $global:SipContactRegistrationDetails += $object
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }



}

function SIPContactRegister_Delete($sbcfqdn, $Profile){

        Write-Host "Deleting SIP Contact Register Entry" -ForegroundColor White        
        
        #Delete Entry
        if($profile.EntryHref){
            [xml]$result = $(Invoke-RestMethod -uri $profile.EntryHref -Method Delete -WebSession $sbcauthsession -ErrorAction SilentlyContinue).trim()
            if($result.root.status.http_code -eq 200){
            
                Write-Host "Operation Success" -ForegroundColor Green
                $global:SipContactRegistrationDetails = $SipContactRegistrationDetails | where {$_.EntryHref -ne $Profile.EntryHref}
            }else{
                Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
                Read-Host
            }
        }
        

        #Delete Table
        if($profile.TableHref){
            [xml]$result = $(Invoke-RestMethod -uri $profile.TableHref -Method Delete -WebSession $sbcauthsession -ErrorAction SilentlyContinue).trim()
            if($result.root.status.http_code -eq 200){
                Write-Host "Operation Success" -ForegroundColor Green
                $global:SipContactRegistrationDetails = $SipContactRegistrationDetails | where {$_.TableHref -ne $Profile.TableHref}
            }else{
                Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
                Read-Host
            }
        }
        

}

function SIPContactRegister_Get($sbcfqdn){
Write-Host "Loading Sip Contact Registration Configuration from SBC" -ForegroundColor Magenta
$global:SipContactRegistrationDetails = @()

$url = "https://$($sbcfqdn)/rest/sipcontactregistrant"
[xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()

$sipcontactregistrants = $results.root.sipcontactregistrant_list.sipcontactregistrant_pk

foreach($sipcontactregistrant in $sipcontactregistrants){
    #Get Contact Registrant Details
    $url = "$($sipcontactregistrant.href)"
    [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $sipcontactregistrantdetails = $results.root.sipcontactregistrant

    #Get Contact Registrant Entries
    $url = "$($sipcontactregistrantdetails.href)/sipregistrantentry"
    #$url
    [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    $sipcontactregistrantentries = $results.root.sipregistrantentry_list.sipregistrantentry_pk

    if($sipcontactregistrantentries){
        foreach($sipcontactregistrantentry in $sipcontactregistrantentries){
            $url = $sipcontactregistrantentry.href
            [xml]$results = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
            $entrydetails = $results.root.sipregistrantentry
            #
            $object = New-Object –Type PSObject –Prop(@{'TableId'=$sipcontactregistrant.id;'TableHref'=$sipcontactregistrant.href;`
                            'EntryId'=$(0 + $($entrydetails.Id -split ":")[1]);'EntryHref'=$entrydetails.href;`
                            'Description'=$sipcontactregistrantdetails.description;`
                            'AOR'=$entrydetails.AOR;'AORTTL'=$entrydetails.aorttl;'AORType'=$entrydetails.AorType;`
                            'FailedRegistrationRetryTimer'=$entrydetails.FailedRegistrationRetryTimer;`
                            'Q1'=$entrydetails.q1;'TTL1'=$entrydetails.ttl1;'URI1'=$entrydetails.URI1;})
            $global:SipContactRegistrationDetails += $object

        }
    }else{
        $object = New-Object –Type PSObject –Prop(@{'TableId'=$sipcontactregistrantdetails.id;'Description'=$sipcontactregistrantdetails.description;`
            'TableHref'=$sipcontactregistrantdetails.href;`
            'EntryId'='';'AOR'='';'AORTTL'='';'AORType'='';'FailedRegistrationRetryTimer'='';'Q1'='';'TTL1'='';'URI1'='';})
        $global:SipContactRegistrationDetails += $object
    }
}


}

function SIPContactRegister_Validate($sbcfqdn){
Write-Host "Validating SIP Contact Register Configuration" -ForegroundColor Yellow -NoNewline
$SipContactRegistersRequired = @()
$SipContactRegistersToAdd = @()
$SipContactRegistersToDelete = @()

$trunkconfigdata = $TrunkData | where {$_.TrunkName -match "Shared\d{2}" -and $_.sbcfqdn -eq $sbcfqdn} | select TrunkName, UserName


foreach($TrunkInfo in $trunkconfigdata){
$TrunkName = "Spark Voice Connect - $($trunkconfigdata.TrunkName)"
$UserName = $trunkconfigdata.Username 


#Spark Contact
$SipContactRegister = New-Object –Type PSObject –Prop(@{'Description'=$TrunkName;'AOR'=$Username;'AORTTL'='3600';'AorType'=2;'TTL1'=3600;'URI1'=$Username;'Q1'=0;'FailedRegistrationRetryTimer'=120;})
$SipContactRegistersRequired += $SipContactRegister

}


#Determine objects to Add
foreach($Profile in $SipContactRegistersRequired){
    if(!($SipContactRegistrationDetails | Where-Object {$_.Description -eq $Profile.Description -and $_.AOR -eq $Profile.AOR -and $_.AORTTL -eq $Profile.AORTTL -and $_.AorType -eq $Profile.AorType -and $_.TTL1 -eq $Profile.TTL1 -and $_.URI1 -eq $Profile.URI1 -and $_.Q1 -eq $Profile.Q1 -and $_.FailedRegistrationRetryTimer -eq $Profile.FailedRegistrationRetryTimer})){
        $SipContactRegistersToAdd += $Profile
    }
}

#Determine objects to Delete
foreach($Profile in $SipContactRegistrationDetails){
    if(!($SipContactRegistersRequired | Where-Object {$_.Description -eq $Profile.Description -and $_.AOR -eq $Profile.AOR -and $_.AORTTL -eq $Profile.AORTTL -and $_.AorType -eq $Profile.AorType -and $_.TTL1 -eq $Profile.TTL1 -and $_.URI1 -eq $Profile.URI1 -and $_.Q1 -eq $Profile.Q1 -and $_.FailedRegistrationRetryTimer -eq $Profile.FailedRegistrationRetryTimer})){
        $SipContactRegistersToDelete += $Profile
    }
}

  if (!($SipContactRegistersToAdd) -and !($SipContactRegistersToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $SipContactRegistersToAdd){
        SipContactRegister_Add $sbcfqdn $profile
    }

    foreach($profile in $SipContactRegistersToDelete){
        SipContactRegister_Delete $sbcfqdn $profile
    }

}
#endregion SIP Contact Register

#region SIP Profiles
function SIPProfile_Add($sbcfqdn, $description, $profileargs){
Write-Host "Creating SIP Profile '$($Description)'" -ForegroundColor White

    $id = 1 + $(GetLastId $($sptable | select -expand id -ErrorAction SilentlyContinue))

    $url = "https://$($sbcfqdn)/rest/sipprofile/$($id)"
    $args1 = $profileargs
    
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $sipprofiledetail = $result.root.sipprofile

         $object = New-Object –Type PSObject –Prop(@{'id'=$sipprofiledetail.id;'href'=$sipprofiledetail.href;'AllowHeader'=$sipprofiledetail.AllowHeader;'CgNumberNameFromHdr'=$sipprofiledetail.CgNumberNameFromHdr;`
        'ConnectionInfoInMediaSection'=$sipprofiledetail.ConnectionInfoInMediaSection;'Description'=$sipprofiledetail.Description; 'DiagnosticsHeader'=$sipprofiledetail.DiagnosticsHeader; `
        'DigitPreference'=$sipprofiledetail.DigitPreference; 'DiversionSelection'=$sipprofiledetail.DiversionSelection; 'ElinIdentifier'=$sipprofiledetail.ElinIdentifier; 'FQDNinContactHeader'=$sipprofiledetail.FQDNinContactHeader; `
        'FQDNinFromHeader'=$sipprofiledetail.FQDNinFromHeader; 'MaxRetransmits'=$sipprofiledetail.MaxRetransmits; 'Option100Rel'=$sipprofiledetail.Option100Rel; 'OptionPath'=$sipprofiledetail.OptionPath; 'OptionTimer'=$sipprofiledetail.OptionTimer; `
        'OptionUpdate'=$sipprofiledetail.OptionUpdate; 'OriginFieldUserName'=$sipprofiledetail.OriginFieldUserName; 'PidfPlPassthru'=$sipprofiledetail.PidfPlPassthru; 'RecordRouteHdrPref'=$sipprofiledetail.RecordRouteHdrPref; `
        'SDPHandling'=$sipprofiledetail.SDPHandling; 'SendAssertHdrAlways'=$sipprofiledetail.SendAssertHdrAlways; 'SendNumberofAudioChan'=$sipprofiledetail.SendNumberofAudioChan; 'SessionName'=$sipprofiledetail.SessionName; `
        'SessionTimer'=$sipprofiledetail.SessionTimer; 'SessionTimerExp'=$sipprofiledetail.SessionTimerExp; 'SessionTimerMin'=$sipprofiledetail.SessionTimerMin; 'StaticHost'=$sipprofiledetail.StaticHost; `
        'TerminateOnRefreshFailure'=$sipprofiledetail.TerminateOnRefreshFailure; 'TimerC'=$sipprofiledetail.TimerC; 'TimerD'=$sipprofiledetail.TimerD; 'TimerJ'=$sipprofiledetail.TimerJ; 'TimerT1'=$sipprofiledetail.TimerT1; `
        'TimerT2'=$sipprofiledetail.TimerT2; 'TimerT4'=$sipprofiledetail.TimerT4; 'TransportTimeoutTimer'=$sipprofiledetail.TransportTimeoutTimer; 'TrustedInterface'=$sipprofiledetail.TrustedInterface; `
        'UnknownPlPassthru'=$sipprofiledetail.UnknownPlPassthru; 'UserAgentHeader'=$sipprofiledetail.UserAgentHeader;})
                
        $global:SPTable += $object 
        
   
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }

}

function SIPProfile_Get($sbcfqdn){
Write-Host "Loading SIP Profile Configuration from SBC" -ForegroundColor Magenta
    $ReturnObject = @()
    $url = "https://$($sbcfqdn)/rest/sipprofile"
    
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    foreach($sipprofile in $result.root.sipprofile_list.sipprofile_pk){
        [xml]$sipprofiledetailroot = $(Invoke-RestMethod -Uri $sipprofile.href -Method Get -WebSession $sbcauthsession).trim()
        $sipprofiledetail = $sipprofiledetailroot.root.sipprofile

 $object = New-Object –Type PSObject –Prop(@{'id'=$sipprofiledetail.id;'href'=$sipprofiledetail.href;'AllowHeader'=$sipprofiledetail.AllowHeader;'CgNumberNameFromHdr'=$sipprofiledetail.CgNumberNameFromHdr;`
'ConnectionInfoInMediaSection'=$sipprofiledetail.ConnectionInfoInMediaSection;'Description'=$sipprofiledetail.Description; 'DiagnosticsHeader'=$sipprofiledetail.DiagnosticsHeader; `
'DigitPreference'=$sipprofiledetail.DigitPreference; 'DiversionSelection'=$sipprofiledetail.DiversionSelection; 'ElinIdentifier'=$sipprofiledetail.ElinIdentifier; 'FQDNinContactHeader'=$sipprofiledetail.FQDNinContactHeader; `
'FQDNinFromHeader'=$sipprofiledetail.FQDNinFromHeader; 'MaxRetransmits'=$sipprofiledetail.MaxRetransmits; 'Option100Rel'=$sipprofiledetail.Option100Rel; 'OptionPath'=$sipprofiledetail.OptionPath; 'OptionTimer'=$sipprofiledetail.OptionTimer; `
'OptionUpdate'=$sipprofiledetail.OptionUpdate; 'OriginFieldUserName'=$sipprofiledetail.OriginFieldUserName; 'PidfPlPassthru'=$sipprofiledetail.PidfPlPassthru; 'RecordRouteHdrPref'=$sipprofiledetail.RecordRouteHdrPref; `
'SDPHandling'=$sipprofiledetail.SDPHandling; 'SendAssertHdrAlways'=$sipprofiledetail.SendAssertHdrAlways; 'SendNumberofAudioChan'=$sipprofiledetail.SendNumberofAudioChan; 'SessionName'=$sipprofiledetail.SessionName; `
'SessionTimer'=$sipprofiledetail.SessionTimer; 'SessionTimerExp'=$sipprofiledetail.SessionTimerExp; 'SessionTimerMin'=$sipprofiledetail.SessionTimerMin; 'StaticHost'=$sipprofiledetail.StaticHost; `
'TerminateOnRefreshFailure'=$sipprofiledetail.TerminateOnRefreshFailure; 'TimerC'=$sipprofiledetail.TimerC; 'TimerD'=$sipprofiledetail.TimerD; 'TimerJ'=$sipprofiledetail.TimerJ; 'TimerT1'=$sipprofiledetail.TimerT1; `
'TimerT2'=$sipprofiledetail.TimerT2; 'TimerT4'=$sipprofiledetail.TimerT4; 'TransportTimeoutTimer'=$sipprofiledetail.TransportTimeoutTimer; 'TrustedInterface'=$sipprofiledetail.TrustedInterface; `
'UnknownPlPassthru'=$sipprofiledetail.UnknownPlPassthru; 'UserAgentHeader'=$sipprofiledetail.UserAgentHeader;})
                
                $ReturnObject += $object 
       # AddSipProfileEntry $sipprofiledetail.id $sipprofiledetail.href $sipprofiledetail.AllowHeader $sipprofiledetail.CgNumberNameFromHdr $sipprofiledetail.ConnectionInfoInMediaSection $sipprofiledetail.Description $sipprofiledetail.DiagnosticsHeader $sipprofiledetail.DigitPreference $sipprofiledetail.DiversionSelection $sipprofiledetail.ElinIdentifier $sipprofiledetail.FQDNinContactHeader $sipprofiledetail.FQDNinFromHeader $sipprofiledetail.MaxRetransmits $sipprofiledetail.Option100Rel $sipprofiledetail.OptionPath $sipprofiledetail.OptionTimer $sipprofiledetail.OptionUpdate $sipprofiledetail.OriginFieldUserName $sipprofiledetail.PidfPlPassthru $sipprofiledetail.RecordRouteHdrPref $sipprofiledetail.SDPHandling $sipprofiledetail.SendAssertHdrAlways $sipprofiledetail.SendNumberofAudioChan $sipprofiledetail.SessionName $sipprofiledetail.SessionTimer $sipprofiledetail.SessionTimerExp $sipprofiledetail.SessionTimerMin $sipprofiledetail.StaticHost $sipprofiledetail.TerminateOnRefreshFailure $sipprofiledetail.TimerC $sipprofiledetail.TimerD $sipprofiledetail.TimerJ $sipprofiledetail.TimerT1 $sipprofiledetail.TimerT2 $sipprofiledetail.TimerT4 $sipprofiledetail.TransportTimeoutTimer $sipprofiledetail.TrustedInterface $sipprofiledetail.UnknownPlPassthru $sipprofiledetail.UserAgentHeader
        
    }
   
   $global:SPTable = $ReturnObject
          
}

function SIPProfile_Delete($sbcfqdn, $description){


$ProfileExists = $SPTable | Where-Object {$_.Description -eq $description} 
    if($ProfileExists){
        Write-Host "Deleting SIP Profile '$($Description)'" -ForegroundColor White
        $ids = $SPTable | Where-Object {$_.Description -eq $description} | select -ExpandProperty id
        foreach($id in $ids){
            $url = "https://$($sbcfqdn)/rest/sipprofile/$($id)"
    
            [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Delete -WebSession $sbcauthsession).trim()
            if($result.root.status.http_code -eq 200){
                Write-Host "Operation Success" -ForegroundColor Green
                $global:SPTable = $SPTable | where {$_.Id -ne $Id}
            }else{
                Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
            }
        }
    }

}

function SIPProfile_Validate($sbcfqdn){
Write-Host "Validating SIP Profile Configuration" -ForegroundColor Yellow -NoNewline
$SIPProfilesRequired = @()
$SIPProfilesToAdd = @()
$SIPProfilesToDelete = @()
#region "Teams SIP Profiles"
$SBCShortNames = $TeamsData | where {$_.Customer -and $_.SBCShortName}|  select customer, @{Label = 'SBCShortName' ; Expression = {$_.SBCShortName.ToLower()}}


foreach($SBCShortName in $SBCShortNames){
    $Description = "Teams - $($SBCShortName.Customer)"
    $FQDNinContactHeader = 3
    $FQDNinFromHeader = 3

    if($SBCShortName.SBCShortName){
        $sbcfqdn -match '(.*)\.(365calling.nz)' | out-null
        $OriginFieldUserName = "$($matches[01])-$($SBCShortName.SBCShortName).$($matches[2])"
    }
    $StaticHost = $OriginFieldUserName
    $args1 = "Description=$($Description)&StaticHost=$($StaticHost)&OriginFieldUserName=$($OriginFieldUserName)&FQDNinContactHeader=$($FQDNinContactHeader)&FQDNinFromHeader=$($FQDNinFromHeader)"
    $SIPProfile = New-Object –Type PSObject –Prop(@{'Description'=$Description;'FQDNinContactHeader'=$FQDNinContactHeader;'FQDNinFromHeader'=$FQDNinFromHeader;'OriginFieldUserName'=$OriginFieldUserName;'StaticHost'=$StaticHost;'Args'=$args1;})
    $SIPProfilesRequired += $SIPProfile
}
#endregion

#region "Spark"

    $Description = "Spark Voice Connect"
    $FQDNinContactHeader = 0
    $FQDNinFromHeader = 2
    $OriginFieldUserName = "SBC"
    $StaticHost = ""

    $args1 = "AllowHeader=1&CgNumberNameFromHdr=0&ConnectionInfoInMediaSection=1&Description=$($Description)&DiagnosticsHeader=1&DigitPreference=1&DiversionSelection=0&`
            ElinIdentifier=0&FQDNinContactHeader=$($FQDNinContactHeader)&FQDNinFromHeader=$($FQDNinFromHeader)&MaxRetransmits=0&Option100Rel=1&OptionPath=3&OptionTimer=1&OptionUpdate=1&OriginFieldUserName=$($OriginFieldUserName)&PidfPlPassthru=1&`
            RecordRouteHdrPref=0&SDPHandling=0&SendAssertHdrAlways=0&SendNumberofAudioChan=0&SessionName=VoipCall&SessionTimer=1&SessionTimerExp=3600&SessionTimerMin=600&StaticHost=$($StaticHost)&`
            TerminateOnRefreshFailure=0&TimerC=180000&TimerD=32000&TimerJ=4000&TimerT1=500&TimerT2=4000&TimerT4=5000&TransportTimeoutTimer=5000&TrustedInterface=1&UnknownPlPassthru=0&UserAgentHeader=Sonus SBC"
    $SIPProfile = New-Object –Type PSObject –Prop(@{'Description'=$Description;'FQDNinContactHeader'=$FQDNinContactHeader;'FQDNinFromHeader'=$FQDNinFromHeader;'OriginFieldUserName'=$OriginFieldUserName;'StaticHost'=$StaticHost;'Args'=$args1;})
    $SIPProfilesRequired += $SIPProfile
#endregion

#region "Spark"

    $Description = "Enghouse"
    $FQDNinContactHeader = 0
    $FQDNinFromHeader = 2
    $OriginFieldUserName = "SBC"
    $StaticHost = ""

    $args1 = "AllowHeader=1&CgNumberNameFromHdr=0&ConnectionInfoInMediaSection=1&Description=$($Description)&DiagnosticsHeader=1&DigitPreference=1&DiversionSelection=0&`
            ElinIdentifier=0&FQDNinContactHeader=$($FQDNinContactHeader)&FQDNinFromHeader=$($FQDNinFromHeader)&MaxRetransmits=0&Option100Rel=1&OptionPath=3&OptionTimer=1&OptionUpdate=1&OriginFieldUserName=$($OriginFieldUserName)&PidfPlPassthru=1&`
            RecordRouteHdrPref=0&SDPHandling=0&SendAssertHdrAlways=0&SendNumberofAudioChan=0&SessionName=VoipCall&SessionTimer=1&SessionTimerExp=3600&SessionTimerMin=600&StaticHost=$($StaticHost)&`
            TerminateOnRefreshFailure=0&TimerC=180000&TimerD=32000&TimerJ=4000&TimerT1=500&TimerT2=4000&TimerT4=5000&TransportTimeoutTimer=5000&TrustedInterface=1&UnknownPlPassthru=0&UserAgentHeader=Sonus SBC"
    $SIPProfile = New-Object –Type PSObject –Prop(@{'Description'=$Description;'FQDNinContactHeader'=$FQDNinContactHeader;'FQDNinFromHeader'=$FQDNinFromHeader;'OriginFieldUserName'=$OriginFieldUserName;'StaticHost'=$StaticHost;'Args'=$args1;})
    $SIPProfilesRequired += $SIPProfile
#endregion
    
#Determine objects to Add
foreach($profile in $SIPProfilesRequired){
    if(!($SPTable | Where-Object {$_.Description -eq $profile.Description -and $_.StaticHost -eq $profile.StaticHost -and $_.OriginFieldUserName -eq $profile.OriginFieldUserName -and $_.FQDNinContactHeader -eq $profile.FQDNinContactHeader -and $_.FQDNinFromHeader -eq $profile.FQDNinFromHeader})){
        $SIPProfilesToAdd += $profile
    }
}

#Determine objects to Delete
foreach($profile in $SPTable){
    if(!($SIPProfilesRequired | Where-Object {$_.Description -eq $profile.Description -and $_.StaticHost -eq $profile.StaticHost -and $_.OriginFieldUserName -eq $profile.OriginFieldUserName -and $_.FQDNinContactHeader -eq $profile.FQDNinContactHeader -and $_.FQDNinFromHeader -eq $profile.FQDNinFromHeader})){
        $SIPProfilesToDelete += $profile
    }
}


    if (!($SIPProfilesToAdd) -and !($SIPProfilesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


foreach($profile in $SIPProfilesToAdd){
    SIPProfile_Add $sbcfqdn $profile.Description $profile.Args
}


foreach($profile in $SIPProfilesToDelete){
    SIPProfile_Delete $sbcfqdn $profile.Description
}

}

#endregion

#region SIP TLS Profiles
function SIPTLSProfile_Add($sbcfqdn, $Description, $FallbackCompatibleMode, $HandshakeTimeout, $MutualAuth, $TLSVersion, $ValidateClientFQDN, $ValidateServerFQDN, $VerifyPeersCertificate){
    $url = "https://$($sbcfqdn)/rest/siptlsprofile"
    Write-Host "Creating SIP TLS Profile for $($Description)" -ForegroundColor White
    $nextId = 1 + $(GetLastId $($SIPTLSProfiles | select -ExpandProperty id -ErrorAction SilentlyContinue))
    $url = "https://$($sbcfqdn)/rest/siptlsprofile/$($nextid)"
    $args1 = "Description=$($Description)&FallbackCompatibleMode=$($FallbackCompatibleMode)&HandshakeTimeout=$($HandshakeTimeout)&MutualAuth=$($MutualAuth)&TLSVersion=$($TLSVersion)&ValidateClientFQDN=$($ValidateClientFQDN)&ValidateServerFQDN=$($ValidateServerFQDN)&VerifyPeersCertificate=$($VerifyPeersCertificate)"
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $global:SIPTLSProfiles += $result.root.siptlsprofile
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
}

function SIPTLSProfile_Validate($sbcfqdn){
Write-Host "Validating SIP TLS Profile Configuration" -ForegroundColor Yellow -NoNewline
$SIPTLSProfilesRequired = @()
$SIPTLSProfilesToAdd = @()
$SIPTLSProfilesToDelete = @()

$Description = "Teams"
$FallbackCompatibleMode = 0
$HandshakeTimeout = 10
$MutualAuth = 1
$TLSVersion = 0
$ValidateClientFQDN = 0
$ValidateServerFQDN = 1
$VerifyPeersCertificate = 1

$SIPTLSProfile = New-Object –Type PSObject –Prop(@{'Description'=$Description; 'FallbackCompatibleMode'=$FallbackCompatibleMode; 'HandshakeTimeout'=$HandshakeTimeout; 'MutualAuth'=$MutualAuth; 'TLSVersion'=$TLSVersion; 'ValidateClientFQDN'=$ValidateClientFQDN; 'ValidateServerFQDN'=$ValidateServerFQDN; 'VerifyPeersCertificate'=$VerifyPeersCertificate;})
$SIPTLSProfilesRequired += $SIPTLSProfile


#Determine objects to Add
foreach($SIPTLSProfile in $SIPTLSProfilesRequired){
    if(!($SIPTLSProfiles | Where-Object {$_.Description -eq $SIPTLSProfile.Description -and $_.FallbackCompatibleMode -eq $SIPTLSProfile.FallbackCompatibleMode -and $_.HandshakeTimeout -eq $SIPTLSProfile.HandshakeTimeout -and $_.MutualAuth -eq $SIPTLSProfile.MutualAuth -and $_.TLSVersion -eq $SIPTLSProfile.TLSVersion -and $_.ValidateClientFQDN -eq $SIPTLSProfile.ValidateClientFQDN -and $_.ValidateServerFQDN -eq $SIPTLSProfile.ValidateServerFQDN -and $_.VerifyPeersCertificate -eq $SIPTLSProfile.VerifyPeersCertificate})){
        $SIPTLSProfilesToAdd += $SIPTLSProfile
    }
}

#Determine objects to Delete
foreach($SIPTLSProfile in $SIPTLSProfiles){
    if(!($SIPTLSProfilesRequired | Where-Object {$_.Description -eq $SIPTLSProfile.Description -and $_.FallbackCompatibleMode -eq $SIPTLSProfile.FallbackCompatibleMode -and $_.HandshakeTimeout -eq $SIPTLSProfile.HandshakeTimeout -and $_.MutualAuth -eq $SIPTLSProfile.MutualAuth -and $_.TLSVersion -eq $SIPTLSProfile.TLSVersion -and $_.ValidateClientFQDN -eq $SIPTLSProfile.ValidateClientFQDN -and $_.ValidateServerFQDN -eq $SIPTLSProfile.ValidateServerFQDN -and $_.VerifyPeersCertificate -eq $SIPTLSProfile.VerifyPeersCertificate})){
        $SIPTLSProfilesToDelete += $SIPTLSProfile
    }
}

  if (!($SIPTLSProfilesToAdd) -and !($SIPTLSProfilesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $SIPTLSProfilesToAdd){
        SIPTLSProfile_Add $sbcfqdn $profile.Description $profile.FallbackCompatibleMode $profile.HandshakeTimeout $profile.MutualAuth $profile.TLSVersion $profile.ValidateClientFQDN $profile.ValidateServerFQDN $profile.VerifyPeersCertificate
    }

    foreach($profile in $SIPTLSProfilesToDelete){
        SIPTLSProfile_Delete $sbcfqdn $profile.Description
    }


}

function SIPTLSProfile_Delete($sbcfqdn, $TLSProfileName){
$url = $SIPTLSProfiles | Where-Object {$_.Description -eq $TLSProfileName} | select -ExpandProperty href
Write-Host "Deleting SIP TLS Profile '$($TLSProfileName)'" -ForegroundColor White
        
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
    
}

function SIPTLSProfile_GetIDByName($sbcfqdn, $TLSProfileName){
#Get TLS Profile ID
    return $(GetLastId $($SIPTLSProfiles | Where-Object {$_.Description -eq $TLSProfileName} | select -ExpandProperty id))

}

function SIPTLSProfile_Get($sbcfqdn){
$global:SIPTLSProfiles = @()
    
$url = "https://$($sbcfqdn)/rest/siptlsprofile"
[xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()

    foreach($siptlsprofile in $result.root.siptlsprofile_list.siptlsprofile_pk){
        [xml]$siptlsprofiledetailroot = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/siptlsprofile/$($siptlsprofile.Id)" -Method Get -WebSession $sbcauthsession).trim()
        $global:SIPTLSProfiles += $siptlsprofiledetailroot.root.siptlsprofile
    }


}
#endregion SIP TLS Profiles

#region SIP Server Entries
function SIPServerEntry_Add($sbcfqdn, $profile){
       
        
        $SipServerTableName = $profile.SipServerTableName
        $SipServerTableId = GetlastId $($SipServerTableDetails | Where-Object {$_.SIPServerTableName -eq $SipServerTableName} | select -ExpandProperty SIPServerTableID)
        $TLSProfileId = GetLastId $($SIPTLSProfiles | where {$_.Description -eq $profile.TLSProfileName} | select -ExpandProperty id)
        $args1="AuthorizationOnRefresh=$($Profile.AuthorizationOnRefresh)&ClearRemoteRegistrationOnStartup=$($Profile.ClearRemoteRegistrationOnStartup)&ContactRegistrantTableID=$($Profile.ContactRegistrantTableID)&ContactURIRandomizer=$($Profile.ContactURIRandomizer)&DomainName=$($Profile.DomainName)&Host=$($Profile.Host)&HostIpVersion=$($Profile.HostIpVersion)&KeepAliveFrequency=$($Profile.KeepAliveFrequency)&LocalUserName=$($Profile.LocalUserName)&Monitor=$($Profile.Monitor)&PeerUserName=$(if($Profile.PeerUserName -eq $null){''}else{$Profile.PeerUserName.ToString().trim()})&Port=$($Profile.Port)&Priority=$($Profile.Priority)&Protocol=$($Profile.Protocol)&RecoverFrequency=$($Profile.RecoverFrequency)&RemoteAuthorizationTableID=$($Profile.RemoteAuthorizationTableID)&RetryNonStaleNonce=$($Profile.RetryNonStaleNonce)&ReuseTimeout=$($Profile.ReuseTimeout)&ReuseTransport=$($Profile.ReuseTransport)&ServerLookup=$($Profile.ServerLookup)&ServerType=$($Profile.ServerType)&ServiceName=$($Profile.ServiceName)&SessionURIValidation=$($Profile.SessionURIValidation)&StaggerRegistration=$($Profile.StaggerRegistration)&TLSProfileID=$($TLSProfileId)&TransportSocket=$($Profile.TransportSocket)&Weight=$($Profile.Weight)"

        
        $Priority = $profile.Priority
        Write-Host "Creating SIP Server $($Profile.Host) in $($Profile.SipServerTableName)" -ForegroundColor White
               
        $url = "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTableId)/sipserver/$($Priority)"                    
            
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
                    
            $SipServerDetail = $result.root.sipserver
                    
                    $TLSProfileId = $SipServerdetail.TLSProfileId | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                    $TLSProfileName = $SIPTLSProfiles | where {$_.Id -eq $TLSProfileId} | select -ExpandProperty Description
                    $RemoteAuthorizationTableID = $SipServerDetail.RemoteAuthorizationTableID | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                    $ContactRegistrantTableID = $SipServerDetail.ContactRegistrantTableID | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                
                    $object = New-Object –Type PSObject –Prop(@{'SIPServerTableID'=$SipServerTableId;'SIPServerTableName'=$SIPServerTableName;'SIPServerTableHREF'=$SipServerTableHref;`
                            'id'=$SipServerDetail.id; 'href'=$SipServerDetail.href;`
                            'AuthorizationOnRefresh'=$SipServerDetail.AuthorizationOnRefresh;'ClearRemoteRegistrationOnStartup'=$SipServerDetail.ClearRemoteRegistrationOnStartup;'ContactRegistrantTableID'=$ContactRegistrantTableID;`
                            'ContactURIRandomizer'=$SipServerDetail.ContactURIRandomizer;'DomainName'=$SipServerDetail.DomainName;'Host'=$SipServerDetail.Host;'HostIpVersion'=$SipServerDetail.HostIpVersion;`
                            'KeepAliveFrequency'=$SipServerDetail.KeepAliveFrequency;'LocalUserName'=$SipServerDetail.LocalUserName;'Monitor'=$SipServerDetail.Monitor;'PeerUserName'=$(if($SipServerDetail.PeerUserName -eq $null){''}else{$SipServerDetail.PeerUserName.trim()});'Port'=$SipServerDetail.Port;`
                            'Priority'=$SipServerDetail.Priority;'Protocol'=$SipServerDetail.Protocol;'RecoverFrequency'=$SipServerDetail.RecoverFrequency;'RemoteAuthorizationTableID'=$RemoteAuthorizationTableID;`
                            'RetryNonStaleNonce'=$SipServerDetail.RetryNonStaleNonce;'ReuseTimeout'=$SipServerDetail.ReuseTimeout;'ReuseTransport'=$SipServerDetail.ReuseTransport;`
                            #'rt_DownTime'=$SipServerDetail.rt_DownTime;`
                            #'rt_PersistentConnections'=$SipServerDetail.rt_PersistentConnections;'rt_RemotePorts'=$SipServerDetail.rt_RemotePorts;'rt_RemotePriorities'=$SipServerDetail.rt_RemotePriorities;`
                            #'rt_RemoteProtocols'=$SipServerDetail.rt_RemoteProtocols;'rt_RemoteServers'=$SipServerDetail.rt_RemoteServers;'rt_RemoteSrvrIDs'=$SipServerDetail.rt_RemoteSrvrIDs;'rt_RemoteTTLs'=$SipServerDetail.rt_RemoteTTLs;`
                            #'rt_RemoteWeights'=$SipServerDetail.rt_RemoteWeights;'rt_TransactionFalures'=$SipServerDetail.rt_TransactionFalures;'rt_Transactions'=$SipServerDetail.rt_Transactions;'rt_UpTime'=$SipServerDetail.rt_UpTime;`
                            'ServerLookup'=$SipServerDetail.ServerLookup;'ServerType'=$SipServerDetail.ServerType;'ServiceName'=$SipServerDetail.ServiceName;'SessionURIValidation'=$SipServerDetail.SessionURIValidation;`
                            'StaggerRegistration'=$SipServerDetail.StaggerRegistration;'TLSProfileId'=$TLSProfileId;'TLSProfileName'=$TLSProfileName;'TransportSocket'=$SipServerDetail.TransportSocket;'Weight'=$SipServerDetail.Weight;})
                    $global:SipServerDetails += $object


            }else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}

                    #Write-Host "SIP Server $($FQDN) successfully added to $($SipServerTableName)" -ForegroundColor Green
            
                
            
        
  

}

function SIPServerEntry_Delete($sbcfqdn, $profile){
              
            
            $SSTableExists = $SipServerDetails | Where-Object {$_.SipServerTableName -eq $SipServerTableName}
            if($SSTableExists){
                Write-Host "Deleting SIP Server Table $($SipServerTableName)" -ForegroundColor White
                #Create SIP Server Table
                $TableId = $SSTableExists | select -ExpandProperty SipServerTableId
                $url = "https://$($sbcfqdn)/rest/sipservertable/$($TableId)" 
                [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Delete -WebSession $sbcauthsession).trim()
                if($result.root.status.http_code -eq 200){
                    Write-Host "Operation Success" -ForegroundColor Green
                    $global:SipServerDetails = $SipServerDetails | where {$_.SipServerTableName -ne $SipServerTableName}
                }else{
                    Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
                    Read-Host
                }
            }
           
        

}

function SIPServerEntry_Get($sbcfqdn){
Write-Host "Loading Sip Server Host Configuration from SBC" -ForegroundColor Magenta
$global:SipServerDetails = @()
        [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable" -Method GET -WebSession $sbcauthsession).trim()
        $SipServerTables =  $result.root.sipservertable_list.sipservertable_pk
        foreach($SipServerTable in $SipServerTables){
            $SipServers = $null
            [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTable.Id)" -Method Get -WebSession $sbcauthsession).trim()
            $SipServerTableDetail = $result.root.sipservertable
                        
            $SipServerTableId = $SipServerTableDetail.Id
            $SipServerTableHref = $SipServerTableDetail.href
            $SipServerTableName = $SipServerTableDetail.Description
            $SipServerTableSeq = $SipServerTableDetail.Sequence

            #Get List of SIP Servers associated with this Sip Server Table
            [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTable.Id)/sipserver" -Method Get -WebSession $sbcauthsession).trim()
            $SipServers = $result.root.sipserver_list.sipserver_pk
            
            #Get Sip Server Details for each server
            if($SipServers){
                foreach($SipServer in $SipServers){
                    $SipServerDetail = $null
                    $SipServerId = GetLastId $($SipServer.id)
                    $SipServerhref = $sipserver.href
                
                
                    [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTableId)/sipserver/$($sipserverid)" -Method Get -WebSession $sbcauthsession).trim()     
                    $SipServerDetail = $result.root.sipserver
                    #$SipServerDetail  | fl
                    
                    $TLSProfileId = $SipServerdetail.TLSProfileId | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                    $TLSProfileName = $SIPTLSProfiles | where {$_.Id -eq $TLSProfileId} | select -ExpandProperty Description
                    $RemoteAuthorizationTableID = $SipServerDetail.RemoteAuthorizationTableID | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                    $ContactRegistrantTableID = $SipServerDetail.ContactRegistrantTableID | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                

                    #$object = New-Object –Type PSObject –Prop(@{'SSTableId'=$SipServerTableId;'SSTablehref'=$SipServerTableHref;'SSTableName'=$SipServerTableName;'SSTableSeq'=$SipServerTableSeq;`
                    #                                        'SipServerId'=$SipServerId;'SipServerhref'=$SipServerhref;'SipServerTLSProfileId'=$TLSProfileId;`
                    #                                        'SipServerPriority'=$SipServerDetail.Priority;'SipServerHost'=$SipServerDetail.Host;'SipServerPort'=$SipServerDetail.Port;`
                    #                                        'SipServerProtocol'=$SipServerDetail.Protocol;'SipServerMonitor'=$SipServerDetail.Monitor;`
                    #                                        'ContactRegistrantTableID'=$SipServerDetail.ContactRegistrantTableID;'RemoteAuthorizationTableID'=$SipServerDetail.RemoteAuthorizationTableID;`
                    #                                        'SipServerDomainName'=$SipServerDetail.DomainName;'SipServerServerLookup'=$SipServerDetail.ServerLookup; })
                    

                    $object = New-Object –Type PSObject –Prop(@{'SIPServerTableID'=$SipServerTableId;'SIPServerTableName'=$SIPServerTableName;'SIPServerTableHREF'=$SipServerTableHref;`
                            'id'=$SipServerDetail.id; 'href'=$SipServerDetail.href;`
                            'AuthorizationOnRefresh'=$SipServerDetail.AuthorizationOnRefresh;'ClearRemoteRegistrationOnStartup'=$SipServerDetail.ClearRemoteRegistrationOnStartup;'ContactRegistrantTableID'=$ContactRegistrantTableID;`
                            'ContactURIRandomizer'=$SipServerDetail.ContactURIRandomizer;'DomainName'=$SipServerDetail.DomainName;'Host'=$SipServerDetail.Host;'HostIpVersion'=$SipServerDetail.HostIpVersion;`
                            'KeepAliveFrequency'=$SipServerDetail.KeepAliveFrequency;'LocalUserName'=$SipServerDetail.LocalUserName;'Monitor'=$SipServerDetail.Monitor;'PeerUserName'=$(if($SipServerDetail.PeerUserName -eq $null){''}else{$SipServerDetail.PeerUserName.trim()});'Port'=$SipServerDetail.Port;`
                            'Priority'=$SipServerDetail.Priority;'Protocol'=$SipServerDetail.Protocol;'RecoverFrequency'=$SipServerDetail.RecoverFrequency;'RemoteAuthorizationTableID'=$RemoteAuthorizationTableID;`
                            'RetryNonStaleNonce'=$SipServerDetail.RetryNonStaleNonce;'ReuseTimeout'=$SipServerDetail.ReuseTimeout;'ReuseTransport'=$SipServerDetail.ReuseTransport;'rt_DownTime'=$SipServerDetail.rt_DownTime;`
                            'rt_PersistentConnections'=$SipServerDetail.rt_PersistentConnections;'rt_RemotePorts'=$SipServerDetail.rt_RemotePorts;'rt_RemotePriorities'=$SipServerDetail.rt_RemotePriorities;`
                            'rt_RemoteProtocols'=$SipServerDetail.rt_RemoteProtocols;'rt_RemoteServers'=$SipServerDetail.rt_RemoteServers;'rt_RemoteSrvrIDs'=$SipServerDetail.rt_RemoteSrvrIDs;'rt_RemoteTTLs'=$SipServerDetail.rt_RemoteTTLs;`
                            'rt_RemoteWeights'=$SipServerDetail.rt_RemoteWeights;'rt_TransactionFalures'=$SipServerDetail.rt_TransactionFalures;'rt_Transactions'=$SipServerDetail.rt_Transactions;'rt_UpTime'=$SipServerDetail.rt_UpTime;`
                            'ServerLookup'=$SipServerDetail.ServerLookup;'ServerType'=$SipServerDetail.ServerType;'ServiceName'=$SipServerDetail.ServiceName;'SessionURIValidation'=$SipServerDetail.SessionURIValidation;`
                            'StaggerRegistration'=$SipServerDetail.StaggerRegistration;'TLSProfileId'=$TLSProfileId;'TLSProfileName'=$TLSProfileName;'TransportSocket'=$SipServerDetail.TransportSocket;'Weight'=$SipServerDetail.Weight;})
                    $global:SipServerDetails += $object
                    #priority, host, port, protocol, monitor
                }
            }
            
            
        }
}

function SIPServerEntry_Modify($sbcfqdn, $profile){
       
        
        $SipServerTableName = $profile.SipServerTableName
        $SipServerTableId = GetlastId $($SipServerTableDetails | Where-Object {$_.SIPServerTableName -eq $SipServerTableName} | select -ExpandProperty SIPServerTableID)
        $TLSProfileId = GetLastId $($SIPTLSProfiles | where {$_.Description -eq $profile.TLSProfileName} | select -ExpandProperty id)
        $args1="AuthorizationOnRefresh=$($Profile.AuthorizationOnRefresh)&ClearRemoteRegistrationOnStartup=$($Profile.ClearRemoteRegistrationOnStartup)&ContactRegistrantTableID=$($Profile.ContactRegistrantTableID)&ContactURIRandomizer=$($Profile.ContactURIRandomizer)&DomainName=$($Profile.DomainName)&Host=$($Profile.Host)&HostIpVersion=$($Profile.HostIpVersion)&KeepAliveFrequency=$($Profile.KeepAliveFrequency)&LocalUserName=$($Profile.LocalUserName)&Monitor=$($Profile.Monitor)&PeerUserName=$(if($Profile.PeerUserName -eq $null){''}else{$Profile.PeerUserName.ToString().trim()})&Port=$($Profile.Port)&Priority=$($Profile.Priority)&Protocol=$($Profile.Protocol)&RecoverFrequency=$($Profile.RecoverFrequency)&RemoteAuthorizationTableID=$($Profile.RemoteAuthorizationTableID)&RetryNonStaleNonce=$($Profile.RetryNonStaleNonce)&ReuseTimeout=$($Profile.ReuseTimeout)&ReuseTransport=$($Profile.ReuseTransport)&ServerLookup=$($Profile.ServerLookup)&ServerType=$($Profile.ServerType)&ServiceName=$($Profile.ServiceName)&SessionURIValidation=$($Profile.SessionURIValidation)&StaggerRegistration=$($Profile.StaggerRegistration)&TLSProfileID=$($TLSProfileId)&TransportSocket=$($Profile.TransportSocket)&Weight=$($Profile.Weight)"

        
        $Priority = $profile.Priority
        Write-Host "Updating SIP Server $($Profile.Host) in $($Profile.SipServerTableName)" -ForegroundColor White
               
        $url = "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTableId)/sipserver/$($Priority)"                    
            
        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
                    
            $SipServerDetail = $result.root.sipserver
                    
                    $TLSProfileId = $SipServerdetail.TLSProfileId | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                    $TLSProfileName = $SIPTLSProfiles | where {$_.Id -eq $TLSProfileId} | select -ExpandProperty Description
                    $RemoteAuthorizationTableID = $SipServerDetail.RemoteAuthorizationTableID | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                    $ContactRegistrantTableID = $SipServerDetail.ContactRegistrantTableID | select -ExpandProperty '#text' -ErrorAction SilentlyContinue
                
                    $object = New-Object –Type PSObject –Prop(@{'SIPServerTableID'=$SipServerTableId;'SIPServerTableName'=$SIPServerTableName;'SIPServerTableHREF'=$SipServerTableHref;`
                            'id'=$SipServerDetail.id; 'href'=$SipServerDetail.href;`
                            'AuthorizationOnRefresh'=$SipServerDetail.AuthorizationOnRefresh;'ClearRemoteRegistrationOnStartup'=$SipServerDetail.ClearRemoteRegistrationOnStartup;'ContactRegistrantTableID'=$ContactRegistrantTableID;`
                            'ContactURIRandomizer'=$SipServerDetail.ContactURIRandomizer;'DomainName'=$SipServerDetail.DomainName;'Host'=$SipServerDetail.Host;'HostIpVersion'=$SipServerDetail.HostIpVersion;`
                            'KeepAliveFrequency'=$SipServerDetail.KeepAliveFrequency;'LocalUserName'=$SipServerDetail.LocalUserName;'Monitor'=$SipServerDetail.Monitor;'PeerUserName'=$(if($SipServerDetail.PeerUserName -eq $null){''}else{$SipServerDetail.PeerUserName.trim()});'Port'=$SipServerDetail.Port;`
                            'Priority'=$SipServerDetail.Priority;'Protocol'=$SipServerDetail.Protocol;'RecoverFrequency'=$SipServerDetail.RecoverFrequency;'RemoteAuthorizationTableID'=$RemoteAuthorizationTableID;`
                            'RetryNonStaleNonce'=$SipServerDetail.RetryNonStaleNonce;'ReuseTimeout'=$SipServerDetail.ReuseTimeout;'ReuseTransport'=$SipServerDetail.ReuseTransport;`
                            #'rt_DownTime'=$SipServerDetail.rt_DownTime;`
                            #'rt_PersistentConnections'=$SipServerDetail.rt_PersistentConnections;'rt_RemotePorts'=$SipServerDetail.rt_RemotePorts;'rt_RemotePriorities'=$SipServerDetail.rt_RemotePriorities;`
                            #'rt_RemoteProtocols'=$SipServerDetail.rt_RemoteProtocols;'rt_RemoteServers'=$SipServerDetail.rt_RemoteServers;'rt_RemoteSrvrIDs'=$SipServerDetail.rt_RemoteSrvrIDs;'rt_RemoteTTLs'=$SipServerDetail.rt_RemoteTTLs;`
                            #'rt_RemoteWeights'=$SipServerDetail.rt_RemoteWeights;'rt_TransactionFalures'=$SipServerDetail.rt_TransactionFalures;'rt_Transactions'=$SipServerDetail.rt_Transactions;'rt_UpTime'=$SipServerDetail.rt_UpTime;`
                            'ServerLookup'=$SipServerDetail.ServerLookup;'ServerType'=$SipServerDetail.ServerType;'ServiceName'=$SipServerDetail.ServiceName;'SessionURIValidation'=$SipServerDetail.SessionURIValidation;`
                            'StaggerRegistration'=$SipServerDetail.StaggerRegistration;'TLSProfileId'=$TLSProfileId;'TLSProfileName'=$TLSProfileName;'TransportSocket'=$SipServerDetail.TransportSocket;'Weight'=$SipServerDetail.Weight;})
                    $global:SipServerDetails += $object


            }else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}

                    #Write-Host "SIP Server $($FQDN) successfully added to $($SipServerTableName)" -ForegroundColor Green
            
                
            
        
  

}

function SIPServerEntry_Validate($sbcfqdn){
Write-Host "Validating SIP Server Configuration" -ForegroundColor Yellow -NoNewline
$SIPServerEntriesRequired = @()
$SIPServerEntriesToAdd = @()
$SIPServerEntriesToDelete = @()
$SIPServerEntriesToModify = @()

$Sparktrunkconfigdata = $TrunkData | where {$_.TrunkName -match "Shared\d{2}" -and $_.Vendor -eq "Spark" -and $_.sbcfqdn -eq $sbcfqdn}
$Enghousetrunkconfigdata = $TrunkData | where {$_.Vendor -eq "Enghouse" -and $_.sbcfqdn -eq $sbcfqdn}

$TLSProfileID = GetLastId $($SIPTLSProfiles | where {$_.Description -eq "Teams"} | select -ExpandProperty id)

$SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'='Teams';'AuthorizationOnRefresh'=1;'ClearRemoteRegistrationOnStartup'=0;'ContactRegistrantTableID'=$null;'ContactURIRandomizer'=0;'DomainName'='';'Host'='sip.pstnhub.microsoft.com';'HostIpVersion'=0;'KeepAliveFrequency'=30;'LocalUserName'='Anonymous';'Monitor'=1;'PeerUserName'='Anonymous';'Port'=5061;'Priority'=1;'Protocol'=4;'RecoverFrequency'=5;'RemoteAuthorizationTableID'=$null;'RetryNonStaleNonce'=1;'ReuseTimeout'=0;'ReuseTransport'=1;'rt_DownTime'=0;'rt_PersistentConnections'=0;'rt_RemotePorts'='';'rt_RemotePriorities'='';'rt_RemoteProtocols'='';'rt_RemoteServers'='';'rt_RemoteSrvrIDs'='';'rt_RemoteTTLs'='';'rt_RemoteWeights'='';'rt_TransactionFalures'=0;'rt_Transactions'=0;'rt_UpTime'=0;'ServerLookup'=0;'ServerType'=0;'ServiceName'='sip';'SessionURIValidation'=0;'StaggerRegistration'=0;'TLSProfileID'=$TLSProfileID;'TLSProfileName'='Teams';'TransportSocket'=4;'Weight'=0;})
$SIPServerEntriesRequired += $SIPServer

$SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'='Teams';'AuthorizationOnRefresh'=1;'ClearRemoteRegistrationOnStartup'=0;'ContactRegistrantTableID'=$null;'ContactURIRandomizer'=0;'DomainName'='';'Host'='sip2.pstnhub.microsoft.com';'HostIpVersion'=0;'KeepAliveFrequency'=30;'LocalUserName'='Anonymous';'Monitor'=1;'PeerUserName'='Anonymous';'Port'=5061;'Priority'=2;'Protocol'=4;'RecoverFrequency'=5;'RemoteAuthorizationTableID'=$null;'RetryNonStaleNonce'=1;'ReuseTimeout'=0;'ReuseTransport'=1;'rt_DownTime'=0;'rt_PersistentConnections'=0;'rt_RemotePorts'='';'rt_RemotePriorities'='';'rt_RemoteProtocols'='';'rt_RemoteServers'='';'rt_RemoteSrvrIDs'='';'rt_RemoteTTLs'='';'rt_RemoteWeights'='';'rt_TransactionFalures'=0;'rt_Transactions'=0;'rt_UpTime'=0;'ServerLookup'=0;'ServerType'=0;'ServiceName'='sip';'SessionURIValidation'=0;'StaggerRegistration'=0;'TLSProfileID'=$TLSProfileID;'TLSProfileName'='Teams';'TransportSocket'=4;'Weight'=0;})
$SIPServerEntriesRequired += $SIPServer

$SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'='Teams';'AuthorizationOnRefresh'=1;'ClearRemoteRegistrationOnStartup'=0;'ContactRegistrantTableID'=$null;'ContactURIRandomizer'=0;'DomainName'='';'Host'='sip3.pstnhub.microsoft.com';'HostIpVersion'=0;'KeepAliveFrequency'=30;'LocalUserName'='Anonymous';'Monitor'=1;'PeerUserName'='Anonymous';'Port'=5061;'Priority'=3;'Protocol'=4;'RecoverFrequency'=5;'RemoteAuthorizationTableID'=$null;'RetryNonStaleNonce'=1;'ReuseTimeout'=0;'ReuseTransport'=1;'rt_DownTime'=0;'rt_PersistentConnections'=0;'rt_RemotePorts'='';'rt_RemotePriorities'='';'rt_RemoteProtocols'='';'rt_RemoteServers'='';'rt_RemoteSrvrIDs'='';'rt_RemoteTTLs'='';'rt_RemoteWeights'='';'rt_TransactionFalures'=0;'rt_Transactions'=0;'rt_UpTime'=0;'ServerLookup'=0;'ServerType'=0;'ServiceName'='sip';'SessionURIValidation'=0;'StaggerRegistration'=0;'TLSProfileID'=$TLSProfileID;'TLSProfileName'='Teams';'TransportSocket'=4;'Weight'=0;})
$SIPServerEntriesRequired += $SIPServer

foreach($TrunkInfo in $Sparktrunkconfigdata){
    $TrunkName = $TrunkInfo.TrunkName 
    $Realm = $TrunkInfo.Realm 
    $UserName = $TrunkInfo.Username 
    $SparkSignallingPort = $TrunkInfo.SIPPort


    $SIPServerTableName = "Spark Voice Connect - $($TrunkName)"
    $RemoteAuthTableId = GetLastId $($SipServerAuthDetails | Where-Object {$_.Description -eq $SIPServerTableName} | select -expand id)
    $ContactRegisterId = GetLastId $($SipContactRegistrationDetails | Where-Object {$_.Description -eq $SIPServerTableName} | select -ExpandProperty TableId)

    $SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'=$SIPServerTableName;'AuthorizationOnRefresh'=1;'ClearRemoteRegistrationOnStartup'=1;'ContactRegistrantTableID'=$ContactRegisterId;'ContactURIRandomizer'=0;'DomainName'='';'Host'=$Realm;'HostIpVersion'=0;'KeepAliveFrequency'=30;'LocalUserName'=$UserName;'Monitor'=1;'PeerUserName'=$UserName;'Port'=$SparkSignallingPort;'Priority'=1;'Protocol'=1;'RecoverFrequency'=5;'RemoteAuthorizationTableID'=$RemoteAuthTableId;'RetryNonStaleNonce'=1;'ReuseTimeout'=0;'ReuseTransport'=1;'rt_DownTime'=0;'rt_PersistentConnections'=0;'rt_RemotePorts'='';'rt_RemotePriorities'='';'rt_RemoteProtocols'='';'rt_RemoteServers'='';'rt_RemoteSrvrIDs'='';'rt_RemoteTTLs'='';'rt_RemoteWeights'='';'rt_TransactionFalures'=0;'rt_Transactions'=0;'rt_UpTime'=0;'ServerLookup'=0;'ServerType'=0;'ServiceName'='sip';'SessionURIValidation'=0;'StaggerRegistration'=0;'TLSProfileID'=$null;'TLSProfileName'=$null;'TransportSocket'=4;'Weight'=0;})
    $SIPServerEntriesRequired += $SIPServer

}

foreach($TrunkInfo in $Enghousetrunkconfigdata){
    $TrunkName = $TrunkInfo.TrunkName 
    $RemoteHost = $TrunkInfo.FQDNPrimary 
    $RemoteSignallingPort = $TrunkInfo.SIPPort


    $SIPServerTableName = "Enghouse - $($TrunkName)"
   
    $SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'=$SIPServerTableName;'AuthorizationOnRefresh'=1;'ClearRemoteRegistrationOnStartup'=0;'ContactRegistrantTableID'=$null;'ContactURIRandomizer'=0;'DomainName'='';`
                    'Host'=$RemoteHost;'HostIpVersion'=0;'KeepAliveFrequency'=30;'LocalUserName'='Anonymous';'Monitor'=1;'PeerUserName'='Anonymous';'Port'=$RemoteSignallingPort;'Priority'=1;'Protocol'=1;'RecoverFrequency'=5;`
                    'RemoteAuthorizationTableID'=$null;'RetryNonStaleNonce'=1;'ReuseTimeout'=0;'ReuseTransport'=1;'rt_DownTime'=0;'rt_PersistentConnections'=0;'rt_RemotePorts'='';'rt_RemotePriorities'='';'rt_RemoteProtocols'='';`
                    'rt_RemoteServers'='';'rt_RemoteSrvrIDs'='';'rt_RemoteTTLs'='';'rt_RemoteWeights'='';'rt_TransactionFalures'=0;'rt_Transactions'=0;'rt_UpTime'=0;'ServerLookup'=0;'ServerType'=0;'ServiceName'='sip';`
                    'SessionURIValidation'=0;'StaggerRegistration'=0;'TLSProfileID'=$null;'TLSProfileName'=$null;'TransportSocket'=4;'Weight'=0;})
    $SIPServerEntriesRequired += $SIPServer

}


#Determine objects to Add
foreach($Profile in $SIPServerEntriesRequired){
    if(!($SipServerDetails | Where-Object {$_.AuthorizationOnRefresh -eq $Profile.AuthorizationOnRefresh -and $_.ClearRemoteRegistrationOnStartup -eq $Profile.ClearRemoteRegistrationOnStartup -and $_.ContactRegistrantTableID -eq $Profile.ContactRegistrantTableID -and $_.ContactURIRandomizer -eq $Profile.ContactURIRandomizer -and $_.Host -eq $Profile.Host -and $_.HostIpVersion -eq $Profile.HostIpVersion -and $_.KeepAliveFrequency -eq $Profile.KeepAliveFrequency -and $_.LocalUserName -eq $Profile.LocalUserName -and $_.Monitor -eq $Profile.Monitor -and $_.PeerUserName -eq $Profile.PeerUserName -and $_.Port -eq $Profile.Port -and $_.Priority -eq $Profile.Priority -and $_.Protocol -eq $Profile.Protocol -and $_.RecoverFrequency -eq $Profile.RecoverFrequency -and $_.RemoteAuthorizationTableID -eq $Profile.RemoteAuthorizationTableID -and $_.RetryNonStaleNonce -eq $Profile.RetryNonStaleNonce -and $_.ReuseTimeout -eq $Profile.ReuseTimeout -and $_.ReuseTransport -eq $Profile.ReuseTransport -and $_.ServerLookup -eq $Profile.ServerLookup -and $_.ServerType -eq $Profile.ServerType -and $_.ServiceName -eq $Profile.ServiceName -and $_.SessionURIValidation -eq $Profile.SessionURIValidation -and $_.SIPServerTableName -eq $Profile.SIPServerTableName -and $_.StaggerRegistration -eq $Profile.StaggerRegistration -and $_.TLSProfileName -eq $Profile.TLSProfileName -and $_.TransportSocket -eq $Profile.TransportSocket -and $_.Weight -eq $Profile.Weight})){
        if($SipServerDetails | Where-Object {$_.SIPServerTableName -eq $Profile.SIPServerTableName -and $_.Host -eq $Profile.Host}){
            $SIPServerEntriesToModify += $Profile
        }else{
            $SIPServerEntriesToAdd += $Profile
        }
    }
}

#Determine objects to Delete
foreach($Profile in $SipServerDetails){
    if(!($SIPServerEntriesRequired | Where-Object {$_.SIPServerTableName -eq $Profile.SIPServerTableName -and $_.Host -eq $Profile.Host})){ #Where-Object {$_.AuthorizationOnRefresh -eq $Profile.AuthorizationOnRefresh -and $_.ClearRemoteRegistrationOnStartup -eq $Profile.ClearRemoteRegistrationOnStartup -and $_.ContactRegistrantTableID -eq $Profile.ContactRegistrantTableID -and $_.ContactURIRandomizer -eq $Profile.ContactURIRandomizer -and $_.Host -eq $Profile.Host -and $_.HostIpVersion -eq $Profile.HostIpVersion -and $_.KeepAliveFrequency -eq $Profile.KeepAliveFrequency -and $_.LocalUserName -eq $Profile.LocalUserName -and $_.Monitor -eq $Profile.Monitor -and $_.PeerUserName -eq $Profile.PeerUserName -and $_.Port -eq $Profile.Port -and $_.Priority -eq $Profile.Priority -and $_.Protocol -eq $Profile.Protocol -and $_.RecoverFrequency -eq $Profile.RecoverFrequency -and $_.RemoteAuthorizationTableID -eq $Profile.RemoteAuthorizationTableID -and $_.RetryNonStaleNonce -eq $Profile.RetryNonStaleNonce -and $_.ReuseTimeout -eq $Profile.ReuseTimeout -and $_.ReuseTransport -eq $Profile.ReuseTransport -and $_.ServerLookup -eq $Profile.ServerLookup -and $_.ServerType -eq $Profile.ServerType -and $_.ServiceName -eq $Profile.ServiceName -and $_.SessionURIValidation -eq $Profile.SessionURIValidation -and $_.SIPServerTableName -eq $Profile.SIPServerTableName -and $_.StaggerRegistration -eq $Profile.StaggerRegistration -and $_.TLSProfileName -eq $Profile.TLSProfileName -and $_.TransportSocket -eq $Profile.TransportSocket -and $_.Weight -eq $Profile.Weight})){
        $SIPServerEntriesToDelete += $Profile
    }
}

  if (!($SIPServerEntriesToAdd) -and !($SIPServerEntriesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $SIPServerEntriesToAdd){
        SIPServerEntry_Add $sbcfqdn $Profile
        #.Description $profile.FallbackCompatibleMode $profile.HandshakeTimeout $profile.MutualAuth $profile.TLSVersion $profile.ValidateClientFQDN $profile.ValidateServerFQDN $profile.VerifyPeersCertificate
    }

    foreach($profile in $SIPServerEntriesToModify){
        SIPServerEntry_Modify $sbcfqdn $Profile
    }

    foreach($profile in $SIPServerEntriesToDelete){
        SIPServerEntry_Delete $sbcfqdn $Profile
    }


}
#endregion SIP Server Tables

#region SIP Server Tables
function SIPServerTable_Add($sbcfqdn, $profile){
        $SipServerTableDetail = $SipServerTableDetails | where {$_.SIPServerTableName -eq $profile.SIPServerTableName}
        if(!($SipServerTableDetail)){
            $NextTableId = GetLastId $($SipServerTableDetails | select -expand SipServerTableId | sort -Descending)
            Write-Host "Creating SIP Server Table $($profile.SipServerTableName)" -ForegroundColor White
            #Create SIP Server Table
            $NextTableId = $NextTableId + 1
            $args1 = "Description=$($profile.SipServerTableName)"
            $url = "https://$($sbcfqdn)/rest/sipservertable/$($NextTableId)" 
            [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
            if($result.root.status.http_code -eq 200){
                $SipServerDetail = $result.root.sipservertable
                Write-Host "Operation Success" -ForegroundColor Green
                 $object = New-Object –Type PSObject –Prop(@{'SIPServerTableID'=$SipServerDetail.id;'SIPServerTableName'=$SipServerDetail.Description;'SIPServerTableHREF'=$SipServerDetail.href;})
                            
                try{
                    $global:SipServerTableDetails += $object
                }catch{
                    $global:SipServerTableDetails = @()
                    $global:SipServerTableDetails += $object
                }        
                
            }else{
                Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
                Read-Host
            }
        }
   
        

}

function SIPServerTable_DeleteByName($sbcfqdn, $SipServerTableName){
              
            
            $SSTableExists = $SipServerTableDetails | Where-Object {$_.SipServerTableName -eq $SipServerTableName}
            if($SSTableExists){
                Write-Host "Deleting SIP Server Table $($SipServerTableName)" -ForegroundColor White
                #Create SIP Server Table
                $TableId = $SSTableExists | select -ExpandProperty SipServerTableId
                $url = "https://$($sbcfqdn)/rest/sipservertable/$($TableId)" 
                [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Delete -WebSession $sbcauthsession).trim()
                if($result.root.status.http_code -eq 200){
                    Write-Host "Operation Success" -ForegroundColor Green
                    $global:SipServerTableDetails = $SipServerTableDetails | where {$_.SipServerTableName -ne $SipServerTableName}
                }else{
                    Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
                    Read-Host
                }
            }
           
        

}

function SIPServerTable_Get($sbcfqdn){
Write-Host "Loading Sip Server Tables Configuration from SBC" -ForegroundColor Magenta
$global:SipServerTableDetails = @()
        [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable" -Method GET -WebSession $sbcauthsession).trim()
        $SipServerTables =  $result.root.sipservertable_list.sipservertable_pk
        foreach($SipServerTable in $SipServerTables){
            $SipServers = $null
            [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTable.Id)" -Method Get -WebSession $sbcauthsession).trim()
            $SipServerTableDetail = $result.root.sipservertable
                        
            $SipServerTableId = $SipServerTableDetail.Id
            $SipServerTableHref = $SipServerTableDetail.href
            $SipServerTableName = $SipServerTableDetail.Description
            $SipServerTableSeq = $SipServerTableDetail.Sequence

            #Get List of SIP Servers associated with this Sip Server Table
            [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipservertable/$($SipServerTable.Id)/sipserver" -Method Get -WebSession $sbcauthsession).trim()
            
            $object = New-Object –Type PSObject –Prop(@{'SipServerTableId'=$SipServerTableId;'SIPServerTableName'=$SIPServerTableName;'SipServerTableHref'=$SipServerTableHref;'SipServerTableSeq'=$SipServerTableSeq;})
            $global:SipServerTableDetails += $object
            #priority, host, port, protocol, monitor
        }
                 
            
        
}

function SIPServerTable_Validate($sbcfqdn){
Write-Host "Validating SIP Server Table Configuration" -ForegroundColor Yellow -NoNewline
$SIPServerTablesRequired = @()
$SIPServerTablesToAdd = @()
$SIPServerTablesToDelete = @()

$Sparktrunkconfigdata = $TrunkData | where {$_.Vendor -eq "Spark" -and $_.sbcfqdn -eq $sbcfqdn}
$Enghousetrunkconfigdata = $TrunkData | where {$_.Vendor -eq "Enghouse" -and $_.sbcfqdn -eq $sbcfqdn}

$SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'='Teams';})
$SIPServerTablesRequired += $SIPServer


foreach($TrunkInfo in $Sparktrunkconfigdata){
    $TrunkName = $TrunkInfo.TrunkName 
    $SIPServerTableName = "Spark Voice Connect - $($TrunkName)"

    $SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'=$SIPServerTableName;})
    $SIPServerTablesRequired += $SIPServer
}

foreach($TrunkInfo in $Enghousetrunkconfigdata){
    $TrunkName = $TrunkInfo.TrunkName 
    $SIPServerTableName = "Enghouse - $($TrunkName)"

    $SIPServer = New-Object –Type PSObject –Prop(@{'SIPServerTableName'=$SIPServerTableName;})
    $SIPServerTablesRequired += $SIPServer
}


#Determine objects to Add
foreach($Profile in $SIPServerTablesRequired){
    if(!($SipServerTableDetails | Where-Object {$_.SIPServerTableName -eq $Profile.SIPServerTableName})){
        $SIPServerTablesToAdd += $Profile
    }
}

#Determine objects to Delete
foreach($Profile in $SipServerTableDetails){
    if(!($SIPServerTablesRequired | Where-Object {$_.SIPServerTableName -eq $Profile.SIPServerTableName})){
        $SIPServerTablesToDelete += $Profile
    }
}

    if(!($SIPServerTablesToAdd) -and !($SIPServerTablesToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $SIPServerTablesToAdd){
        SIPServerTable_Add $sbcfqdn $profile
        #.Description $profile.FallbackCompatibleMode $profile.HandshakeTimeout $profile.MutualAuth $profile.TLSVersion $profile.ValidateClientFQDN $profile.ValidateServerFQDN $profile.VerifyPeersCertificate
    }

    foreach($profile in $SIPServerTablesToDelete){
        SIPServerTable_DeleteByName $sbcfqdn $profile.SIPServerTableName
    }


}
#endregion SIP Server Tables

#region SIP Signalling Group
function SIPSignallingGroup_Add($sbcfqdn, $profile){
Write-Host "Creating Signalling Group '$($Profile.Description)'" -ForegroundColor White

$nextId = 1 + $(GetLastId $($SipSignallingGroups | select -ExpandProperty id))
    
    
$args1 = "Description=$($profile.Description)&ServerClusterId=$($profile.ServerClusterId)&ProfileID=$($profile.ProfileID)&RouteTableID=$($profile.RouteTableID)&Channels=$($profile.Channels)&RemoteHosts=$($profile.RemoteHosts)&ToneTableID=$($profile.ToneTableID)&MediaConfigID=$($profile.MediaConfigID)&NetInterfaceSignaling=$($profile.NetInterfaceSignaling)&RingBack=$($profile.RingBack)&ServerSelection=$($profile.ServerSelection)&ListenPort_1=$($profile.ListenPort_1)&Protocol_1=$($profile.Protocol_1)&AllowRefreshSDP=$($profile.AllowRefreshSDP)&ChallengeRequest=$($profile.ChallengeRequest)&DSCP=$($profile.DSCP)&Direction=$($profile.Direction)&Early183=$($profile.Early183)&HuntMethod=$($profile.HuntMethod)&InboundNATPeerRegistrarMaxEnabled=$($profile.InboundNATPeerRegistrarMaxEnabled)&InboundNATPeerRegistrarMaxTTL=$($profile.InboundNATPeerRegistrarMaxTTL)&InboundNATTraversalDetection=$($profile.InboundNATTraversalDetection)&InboundSecureNATMediaLatching=$($profile.InboundSecureNATMediaLatching)&InboundSecureNATMediaPrefix=$($profile.InboundSecureNATMediaPrefix)&InteropMode=$($profile.InteropMode)&Monitor=$($profile.Monitor)&NoChannelAvailableId=$($profile.NoChannelAvailableId)&NotifyCACProfile=$($profile.NotifyCACProfile)&OutboundProxyPort=$($profile.OutboundProxyPort)&OutboundRegistrarTTL=$($profile.OutboundRegistrarTTL)&PassthruPeerSIPRespCode=$($profile.PassthruPeerSIPRespCode)&PlayCongestionTone=$($profile.PlayCongestionTone)&ProxyIpVersion=$($profile.ProxyIpVersion)&RTPDirectMode=$($profile.RTPDirectMode)&RTPMode=$($profile.RTPMode)&RTPProxyMode=$($profile.RTPProxyMode)&RTPProxySrtpMode=$($profile.RTPProxySrtpMode)&RegisterKeepAlive=$($profile.RegisterKeepAlive)&RegistrantTTL=$($profile.RegistrantTTL)&RegistrarTTL=$($profile.RegistrarTTL)&RelOnQckConnect=$($profile.RelOnQckConnect)&RelOnQckConnectTimer=$($profile.RelOnQckConnectTimer)&RemoteMasks=$($profile.RemoteMasks)&SGLevelMOHService=$($profile.SGLevelMOHService)&SIPReSync=$($profile.SIPReSync)&TimerCallProceeding=$($profile.TimerCallProceeding)&TimerSanitySetup=$($profile.TimerSanitySetup)&VideoDirectMode=$($profile.VideoDirectMode)&VideoProxyMode=$($profile.VideoProxyMode)&customAdminState=$($profile.customAdminState)&NATTraversalType=$($profile.NATTraversalType)&NATPublicIPAddress=$($profile.NATPublicIPAddress)"
if($profile.IngressSPRMessageTableList){
    $args1 += "&IngressSPRMessageTableList=$($profile.IngressSPRMessageTableList)"
}    

if($profile.EgressSPRMessageTableList){
    $args1 += "&EgressSPRMessageTableList=$($profile.EgressSPRMessageTableList)"
}

if($profile.TLSProfileID_1){
    $args1 += "&TLSProfileID_1=$($profile.TLSProfileID_1)"
}
    #write-host $args1
    #read-host

    $url = "https://$($sbcfqdn)/rest/sipsg/$($NextId)"
    #$url

    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:SipSignallingGroups += $result.root.sipsg
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
    


}

function SIPSignallingGroup_Modify($sbcfqdn, $profile){
Write-Host "Modifying Signalling Group '$($Profile.Description)'" -ForegroundColor White

$nextId = $SipSignallingGroups | where {$_.Description -eq $profile.Description -and $_.ServerClusterId -eq $profile.ServerClusterId} | select -ExpandProperty id
    
    
$args1 = "ProfileID=$($profile.ProfileID)&RouteTableID=$($profile.RouteTableID)&Channels=$($profile.Channels)&RemoteHosts=$($profile.RemoteHosts)&ToneTableID=$($profile.ToneTableID)&MediaConfigID=$($profile.MediaConfigID)&NetInterfaceSignaling=$($profile.NetInterfaceSignaling)&RingBack=$($profile.RingBack)&ServerSelection=$($profile.ServerSelection)&ListenPort_1=$($profile.ListenPort_1)&Protocol_1=$($profile.Protocol_1)&AllowRefreshSDP=$($profile.AllowRefreshSDP)&ChallengeRequest=$($profile.ChallengeRequest)&DSCP=$($profile.DSCP)&Direction=$($profile.Direction)&Early183=$($profile.Early183)&HuntMethod=$($profile.HuntMethod)&InboundNATPeerRegistrarMaxEnabled=$($profile.InboundNATPeerRegistrarMaxEnabled)&InboundNATPeerRegistrarMaxTTL=$($profile.InboundNATPeerRegistrarMaxTTL)&InboundNATTraversalDetection=$($profile.InboundNATTraversalDetection)&InboundSecureNATMediaLatching=$($profile.InboundSecureNATMediaLatching)&InboundSecureNATMediaPrefix=$($profile.InboundSecureNATMediaPrefix)&InteropMode=$($profile.InteropMode)&Monitor=$($profile.Monitor)&NoChannelAvailableId=$($profile.NoChannelAvailableId)&NotifyCACProfile=$($profile.NotifyCACProfile)&OutboundProxyPort=$($profile.OutboundProxyPort)&OutboundRegistrarTTL=$($profile.OutboundRegistrarTTL)&PassthruPeerSIPRespCode=$($profile.PassthruPeerSIPRespCode)&PlayCongestionTone=$($profile.PlayCongestionTone)&ProxyIpVersion=$($profile.ProxyIpVersion)&RTPDirectMode=$($profile.RTPDirectMode)&RTPMode=$($profile.RTPMode)&RTPProxyMode=$($profile.RTPProxyMode)&RTPProxySrtpMode=$($profile.RTPProxySrtpMode)&RegisterKeepAlive=$($profile.RegisterKeepAlive)&RegistrantTTL=$($profile.RegistrantTTL)&RegistrarTTL=$($profile.RegistrarTTL)&RelOnQckConnect=$($profile.RelOnQckConnect)&RelOnQckConnectTimer=$($profile.RelOnQckConnectTimer)&RemoteMasks=$($profile.RemoteMasks)&SGLevelMOHService=$($profile.SGLevelMOHService)&SIPReSync=$($profile.SIPReSync)&TimerCallProceeding=$($profile.TimerCallProceeding)&TimerSanitySetup=$($profile.TimerSanitySetup)&VideoDirectMode=$($profile.VideoDirectMode)&VideoProxyMode=$($profile.VideoProxyMode)&customAdminState=$($profile.customAdminState)&NATTraversalType=$($profile.NATTraversalType)&NATPublicIPAddress=$($profile.NATPublicIPAddress)"
if($profile.IngressSPRMessageTableList){
    $args1 += "&IngressSPRMessageTableList=$($profile.IngressSPRMessageTableList)"
}    

if($profile.EgressSPRMessageTableList){
    $args1 += "&EgressSPRMessageTableList=$($profile.EgressSPRMessageTableList)"
}

if($profile.TLSProfileID_1){
    $args1 += "&TLSProfileID_1=$($profile.TLSProfileID_1)"
}
    #write-host $args1
    #read-host

    $url = "https://$($sbcfqdn)/rest/sipsg/$($NextId)"
    #$url

    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:SipSignallingGroups += $result.root.sipsg
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
    


}

function SIPSignallingGroup_CreateTeams($sbcfqdn, $ps, $Organisation, $SIPListeningPort, $trunkname){
$MediaLists = MediaList_GetSummary $sbcfqdn $ps
$messagemanipulationdetails = MessageManipulationRules_GetSummary $sbcfqdn $ps
$RoutingTables = RoutingTable_GetSummary $sbcfqdn $ps
$sipprofiles = SIPProfile_GetSummary $sbcfqdn $ps 
$sipservers = SIPServerTable_GetSummary $sbcfqdn $ps 
$tonetableinfo = ToneTable_GetSummary $sbcfqdn $ps
$CurrentSIPSignallingGroup = SIPSignallingGroup_GetSummary $sbcfqdn $ps
$SIPTLSProfileId = SIPTLSProfile_GetIDByName $sbcfqdn $ps "Teams"
$LogicalInterfaces = LogicalInterface_GetSummary $sbcfqdn $ps

foreach($LogicalInterface in $LogicalInterfaces){
    if(!(IsPrivateNetwork $LogicalInterface.ifIPv4AddressPrimary)){
        $PublicLogicalInterfaceName = "$($LogicalInterface.ifName)-1"
        $PublicLogicalInterfaceIPAddress = $LogicalInterface.ifIPv4AddressPrimary
        break
    }
}

$SGDescription = "Teams - $($Organisation)"
$ProviderSIPServers = "sip.pstnhub.microsoft.com,sip2.pstnhub.microsoft.com,sip3.pstnhub.microsoft.com,sip-all.pstnhub.microsoft.com,52.120.0.0,52.112.0.0"
$ProviderSIPServersMask = "255.255.255.255,255.255.255.255,255.255.255.255,255.255.255.255,255.252.0.0,255.252.0.0"

Write-Host "Creating SIP Signalling Group '$($SGDescription)'" -ForegroundColor White
if(!($CurrentSIPSignallingGroup | Where-Object {$_.Description -eq $SGDescription})){
    $nextId = 1 + $(GetLastId $($CurrentSIPSignallingGroup | select -ExpandProperty id))
    $url = "https://$($sbcfqdn)/rest/sipsg/$($NextId)"
    
    $argsbase = "AllowRefreshSDP=1&ChallengeRequest=0&DSCP=40&Direction=2&Early183=1&HuntMethod=4&InboundNATPeerRegistrarMaxEnabled=0&InboundNATPeerRegistrarMaxTTL=120&InboundNATTraversalDetection=0&InboundSecureNATMediaLatching=1&InboundSecureNATMediaPrefix=255.255.255.255&InteropMode=0&Monitor=3&NoChannelAvailableId=34&NotifyCACProfile=0&OutboundProxyPort=5060&OutboundRegistrarTTL=600&PassthruPeerSIPRespCode=1&PlayCongestionTone=0&ProxyIpVersion=0&RTPDirectMode=0&RTPMode=1&RTPProxyMode=0&RTPProxySrtpMode=0&RegisterKeepAlive=1&RegistrantTTL=3600&RegistrarTTL=600&RelOnQckConnect=0&RelOnQckConnectTimer=1000&RemoteMasks=$($ProviderSIPServersMask)&SGLevelMOHService=0&SIPReSync=0&ServerSelection=1&TimerCallProceeding=180000&TimerSanitySetup=255000&VideoDirectMode=0&VideoProxyMode=0&customAdminState=1"

    $IngressMessageTableRules = $($messagemanipulationdetails | Where-Object `
        {$_.MTableDescription -eq "Microsoft - Inbound Manipulation (REFER)" -or `
        $_.MTableDescription -eq "Microsoft - Inbound Manipulation (INVITE)"} | select -expand mtableid -Unique) -join ","
    #$messagemanipulationdetails | Where-Object {$_.MTableDescription -eq "Teams - Collect History-Info"} | select -expand mtableid -Unique
    $ToneTableId = $tonetableinfo | Where-Object {$_.TTableName -eq "NZ Tones"} | select -ExpandProperty TTableId -Unique | select -First 1
    $MediaListId = $medialists | Where-Object {$_.Description -eq "Teams"} | select -ExpandProperty id -Unique | select -first 1
    $SipProfileID = $sptable | Where-Object {$_.Description -eq "Teams - $($Organisation)"} | select -ExpandProperty id -Unique | select -first 1
    #$RouteTableID =  $RoutingTables | Where-Object {$_.description -eq "From Teams - $($Organisation)"}  |select -ExpandProperty id -Unique | select -first 1
    $RouteTableID =  $RoutingTables | Where-Object {$_.description -eq "From Teams - $($trunkname)"}  |select -ExpandProperty id -Unique | select -first 1
    $SipServerTable = $sipservers | Where-Object {$_.SSTableName -eq "Teams"} | select -ExpandProperty SSTableId -unique | select -first 1
    
    $argscustom = "Description=$($SGDescription)&ServerClusterId=$($SipServerTableId)&ProfileID=$($SipProfileID)&RingBack=4&RouteTableID=$($RouteTableID)&IngressSPRMessageTableList=$($IngressMessageTableRules)&Channels=25&RemoteHosts=$($ProviderSIPServers)&ToneTableID=$($ToneTableID)&MediaConfigID=$($MediaListId)&NetInterfaceSignaling=$($PublicLogicalInterfaceName)"
    $argsports = "ListenPort_1=$($SIPListeningPort)&Protocol_1=4&TLSProfileID_1=$($SIPTLSProfileId)"
    $argsnat = "NATTraversalType=0&NATPublicIPAddress=$($PublicLogicalInterfaceIPAddress)"

    $args1 = "$($argscustom)&$($argsports)&$($argsbase)&$($argsnat)" -replace "`n|`r"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $ps).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:SipSignallingGroups += $result.root.sipsg
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }
	
}else{
	Write-Host "Record already exists" -ForegroundColor Yellow
	}

}

#function SIPSignallingGroup_CreateSpark($sbcfqdn){
#$SparkSignallingPort = "5060"
#$Description = "Spark Voice Connect"
#$trunkinfo = $TrunkData | where {$_.sbcfqdn -eq $sbcfqdn} | select -first 1

#$trunkname = $trunkinfo.TrunkName
#$SIPListeningPort = $trunkinfo.SIPPort
#$Channels = $trunkinfo.ChannelCount
#$FQDNPrimary = $trunkinfo.FQDNPrimary
#$FQDNSecondary = $trunkinfo.FQDNSecondary
#$Realm = $trunkinfo.Realm


#Write-Host "Creating Signalling Group '$($Description)'" -ForegroundColor White
#if(!($SipSignallingGroups | Where-Object {$_.Description -eq $Description})){
#    $nextId = 1 + $(GetLastId $($SipSignallingGroups | select -ExpandProperty id))
    
    
   #$argsbase = "ADAttribute=pager&ADFirstUpdateTime=0&ADUpdateFrequency=1&ActionSetTableID=0&AgentType=0&AllowRefreshSDP=1&AuthorizationRealm=&ChallengeRequest=0&ConfigIEState=1&CryptoProfileID=0&DSCP=40&Direction=2&Early183=1&HuntMethod=4&InboundNATPeerRegistrarMaxEnabled=0&InboundNATPeerRegistrarMaxTTL=120&InboundNATQualifiedPrefixesTableID=0&InboundNATTraversalDetection=0&InboundSecureNATMediaLatching=1&InboundSecureNATMediaPrefix=255.255.255.255&InteropMode=0&ListenPort_1=5060&ListenPort_2=5060&ListenPort_3=0&ListenPort_4=0&ListenPort_5=0&ListenPort_6=0&LocalIP_1=&LocalIP_2=&LocalIP_3=&LocalIP_4=&LocalIP_5=&LocalIP_6=&Monitor=3&NATPublicIPAddress=&NATTraversalType=0&NetInterfaceSignaling=&NoChannelAvailableId=34&NonceLifetime=0&NotifyCACProfile=0&Office365FQDN=&OutboundProxy=&OutboundProxyPort=5060&OutboundRegistrarTTL=600&PassthruPeerSIPRespCode=1&PlayCongestionTone=0&Protocol_1=1&Protocol_2=2&Protocol_3=0&Protocol_4=0&Protocol_5=0&Protocol_6=0&ProxyAuthorizationTableID=0&ProxyIpVersion=0&RTPDirectMode=0&RTPMode=1&RTPProxyMode=0&RTPProxySrtpMode=0&RegisterKeepAlive=1&RegistrantTTL=3600&RegistrarID=0&RegistrarTTL=600&RelOnQckConnect=0&RelOnQckConnectTimer=1000&RemoteMasks=255.255.255.255,255.255.255.255&RingBack=0&SGLevelMOHService=0&SIPReSync=0&ServerClusterId=3&ServerSelection=0&TLSProfileID_1=0&TLSProfileID_2=0&TLSProfileID_3=0&TLSProfileID_4=0&TLSProfileID_5=0&TLSProfileID_6=0&TimerCallProceeding=180000&TimerSanitySetup=255000&VideoDirectMode=0&VideoProxyMode=0&customAdminState=1&rt_BusyHourCallAttempts=0&rt_BusyHourCallCompletions=0&rt_ClientTransactions=2&rt_ClientTransactionsCompleted=14&rt_In1xxResp=0&rt_In2xxResp=0&rt_In3xxResp=0&rt_In4xxResp=0&rt_In5xxResp=0&rt_In6xxResp=0&rt_InAck=0&rt_InBye=0&rt_InCancel=0&rt_InInfo=0&rt_InInvite=0&rt_InNotify=0&rt_InOptions=0&rt_InPing=0&rt_InPrack=0&rt_InRefer=0&rt_InRegister=0&rt_InSubscribe=0&rt_InUpdate=0&rt_NumBlockedCalls=0&rt_NumConnectedCalls=0&rt_NumCurrentCalls=0&rt_NumEgressCallAttempts=0&rt_NumEgressCallsAccepted=0&rt_NumEgressCallsBlocked=0&rt_NumEgressCallsCompleted=0&rt_NumEgressCallsRejected=0&rt_NumEgressCurrentCalls=0&rt_NumErroredCalls=0&rt_NumIngressCallAttempts=0&rt_NumIngressCallsAccepted=0&rt_NumIngressCallsBlocked=0&rt_NumIngressCallsCompleted=0&rt_NumIngressCallsRejected=0&rt_NumIngressCurrentCalls=0&rt_NumRefusedCalls=0&rt_NumTotalCalls=0&rt_NumberOfChannels=250&rt_Out1xxResp=0&rt_Out2xxResp=0&rt_Out3xxResp=0&rt_Out4xxResp=0&rt_Out5xxResp=0&rt_Out6xxResp=0&rt_OutAck=0&rt_OutBye=0&rt_OutCancel=0&rt_OutInfo=0&rt_OutInvite=0&rt_OutNotify=0&rt_OutOptions=16&rt_OutPing=0&rt_OutPrack=0&rt_OutRefer=0&rt_OutRegister=0&rt_OutSubscribe=0&rt_OutUpdate=0&rt_PortId=&rt_Res1xxResp=0&rt_Res2xxResp=0&rt_Res3xxResp=0&rt_Res4xxResp=0&rt_Res5xxResp=0&rt_Res6xxResp=0&rt_ResAck=0&rt_ResBye=0&rt_ResCancel=0&rt_ResInfo=0&rt_ResInvite=0&rt_ResNotify=0&rt_ResOptions=128&rt_ResPing=0&rt_ResPrack=0&rt_ResRefer=0&rt_ResRegister=0&rt_ResSubscribe=0&rt_ResUpdate=0&rt_ServerTransactions=0&rt_ServerTransactionsCompleted=0&rt_Status=1&rt_Type=1"
#    $argsbase = "AllowRefreshSDP=1&ChallengeRequest=0&DSCP=40&Direction=2&Early183=0&HuntMethod=4&InboundNATPeerRegistrarMaxEnabled=0&InboundNATPeerRegistrarMaxTTL=120&InboundNATTraversalDetection=0&`
#InboundSecureNATMediaLatching=1&InboundSecureNATMediaPrefix=255.255.255.255&InteropMode=0&Monitor=3&NoChannelAvailableId=34&NotifyCACProfile=0&OutboundProxyPort=$($SparkSignallingPort)&OutboundRegistrarTTL=600&`
#PassthruPeerSIPRespCode=1&PlayCongestionTone=0&ProxyIpVersion=0&RTPDirectMode=0&RTPMode=1&RTPProxyMode=0&RTPProxySrtpMode=0&RegisterKeepAlive=1&RegistrantTTL=3600&RegistrarTTL=600&RelOnQckConnect=0&`
#RelOnQckConnectTimer=1000&RemoteMasks=255.255.255.255,255.255.255.255&SGLevelMOHService=0&SIPReSync=0&TimerCallProceeding=180000&TimerSanitySetup=255000&VideoDirectMode=0&`
#VideoProxyMode=0&customAdminState=1"

#    $EgressMessageTableRuleIds = $mmTables | Where-Object {$_.Description -eq "Spark - Outbound Manipulation (Common)" -or $_.Description -eq "Spark - Outbound Manipulation ($($Realm))" -or $_.Description -eq "Spark - Outbound Authentication ($($trunkname))"} | select -expand id -Unique
#    $EgressMessageTableRules = $EgressMessageTableRuleIds -join ","
#    $IngressMessageTableRules = $mmTables | Where-Object {$_.Description -eq "Spark - Inbound Manipulation"} | select -expand id -Unique
#    $ToneTableId = $tonetableinfo | Where-Object {$_.TableName -eq "NZ Tones"} | select -ExpandProperty TableId -unique | select -First 1
#    $MediaListId = $medialists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id -Unique | select -first 1
#    $SipProfileID = $sptable | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id -Unique | select -first 1
#    $RouteTableID =  $RoutingTables | Where-Object {$_.description -eq "From PSTN"}  |select -ExpandProperty id -Unique | select -first 1
#    $SipServerTableId = GetLastId $($SipServerDetails | Where-Object {$_.SIPServerTableName -eq "Spark Voice Connect - $($trunkname)"} | select -ExpandProperty id)
#    $StaticNatIP = $LogicalInterfaces | Where-Object {$_.ifdescription -match "SIP"} | select -expand ifIPv4AddressPrimary
#    $StaticNatIPInterface = "$($LogicalInterfaces | Where-Object {$_.ifdescription -match "SIP"} | select -expand ifName)-1"

#    $argscustom = "Description=$($Description)&ServerClusterId=$($SipServerTableId)&ProfileID=$($SipProfileID)&RouteTableID=$($RouteTableID)&`
#EgressSPRMessageTableList=$($EgressMessageTableRules)&IngressSPRMessageTableList=$($IngressMessageTableRules)&Channels=$($Channels)&RemoteHosts=$($FQDNPrimary),$($FQDNSecondary)&`
#ToneTableID=$($ToneTableID)&MediaConfigID=$($MediaListId)&NetInterfaceSignaling=$($StaticNatIPInterface)&`
#RingBack=4&ServerSelection=4"
#    $argsports = "ListenPort_1=$($SIPListeningPort)&Protocol_1=1" 
#    #$argsNAT = "&NATTraversalType=0&NATPublicIPAddress=$($StaticNatIP)"
#    if($CurrentSIPSignallingGroup){
#        $NATIPAddress = GetNextSignallingGroupNATIPAddress $($CurrentSIPSignallingGroup | where {$_.natpublicipaddress -match $StaticNatIP.Substring(0, 8)} | select -ExpandProperty NATPublicIPAddress)
#    }else{
#        $NATIPAddress = GetNextSignallingGroupNATIPAddress $StaticNatIP
#    }
    
#    $argsNAT = "NATTraversalType=1&NATPublicIPAddress=$($NATIPAddress)"


#    $args1 = "$($argscustom)&$($argsports)&$($argsbase)&$($argsNAT)" -replace "`n|`r"

#    $args1 = "$($argscustom)" -replace "`n|`r"
#    $args1 = "$($argscustom)&$($argsports)" -replace "`n|`r"
#    $args1 = "$($argscustom)&$($argsports)&$($argsbase)" -replace "`n|`r"
#    $args1 = "$($argscustom)&$($argsports)&$($argsbase)&$($argsNAT)" -replace "`n|`r"
    
    #write-host $args1
    #read-host

#    $url = "https://$($sbcfqdn)/rest/sipsg/$($NextId)"
#    $url

#    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
#    if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}

    
#}else{
#	Write-Host "Record already exists" -ForegroundColor Yellow
#	}

#}

function SIPSignallingGroup_Get($sbcfqdn){

$global:SipSignallingGroups = @()
Write-Host "Loading Signalling Group Configuration from SBC" -ForegroundColor Magenta
    [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/sipsg" -Method GET -WebSession $sbcauthsession).trim()
    $SGTables =  $result.root.sipsg_list.sipsg_pk
    foreach($SGTable in $SGTables){
        [xml]$result = $(Invoke-RestMethod -Uri $SGTable.href -Method GET -WebSession $sbcauthsession).trim()
        $detail = $result.root.sipsg

        $object = New-Object –Type PSObject –Prop(@{'AllowRefreshSDP'=$detail.AllowRefreshSDP;'ChallengeRequest'=$detail.ChallengeRequest;'Channels'=$detail.Channels;`
                'customAdminState'=$detail.customAdminState;'Description'=$detail.Description;'Direction'=$detail.Direction;'DSCP'=$detail.DSCP;'Early183'=$detail.Early183;`
                'EgressSPRMessageTableList'=$($detail.EgressSPRMessageTableList.entry.'#text' | sort) -join ",";'HuntMethod'=$detail.HuntMethod;'id'=$detail.id;'InboundNATPeerRegistrarMaxEnabled'=$detail.InboundNATPeerRegistrarMaxEnabled;`
                'InboundNATPeerRegistrarMaxTTL'=$detail.InboundNATPeerRegistrarMaxTTL;'InboundNATTraversalDetection'=$detail.InboundNATTraversalDetection;'InboundSecureNATMediaLatching'=$detail.InboundSecureNATMediaLatching;`
                'InboundSecureNATMediaPrefix'=$detail.InboundSecureNATMediaPrefix;'IngressSPRMessageTableList'=$($detail.IngressSPRMessageTableList.entry.'#text' | sort) -join ",";'InteropMode'=$detail.InteropMode;'ListenPort_1'=$detail.ListenPort_1;`
                'MediaConfigID'=$($detail.MediaConfigID.'#text' | sort) -join ",";'Monitor'=$detail.Monitor;'NATPublicIPAddress'=$detail.NATPublicIPAddress;'NATTraversalType'=$detail.NATTraversalType;'NetInterfaceSignaling'=$detail.NetInterfaceSignaling;`
                'NoChannelAvailableId'=$detail.NoChannelAvailableId;'NotifyCACProfile'=$detail.NotifyCACProfile;'OutboundProxyPort'=$detail.OutboundProxyPort;'OutboundRegistrarTTL'=$detail.OutboundRegistrarTTL;`
                'PassthruPeerSIPRespCode'=$detail.PassthruPeerSIPRespCode;'PlayCongestionTone'=$detail.PlayCongestionTone;'ProfileID'=$($detail.ProfileID.'#text' | sort) -join ",";'Protocol_1'=$detail.Protocol_1;'ProxyIpVersion'=$detail.ProxyIpVersion;`
                'RegisterKeepAlive'=$detail.RegisterKeepAlive;'RegistrantTTL'=$detail.RegistrantTTL;'RegistrarTTL'=$detail.RegistrarTTL;'RelOnQckConnect'=$detail.RelOnQckConnect;'RelOnQckConnectTimer'=$detail.RelOnQckConnectTimer;`
                'RemoteHosts'=$detail.RemoteHosts;'RemoteMasks'=$detail.RemoteMasks;'RingBack'=$detail.RingBack;'RouteTableID'=$($detail.RouteTableID.'#text' | sort) -join ",";'RTPDirectMode'=$detail.RTPDirectMode;'RTPMode'=$detail.RTPMode;`
                'RTPProxyMode'=$detail.RTPProxyMode;'RTPProxySrtpMode'=$detail.RTPProxySrtpMode;'ServerClusterId'=$detail.ServerClusterId;'ServerSelection'=$detail.ServerSelection;'SGLevelMOHService'=$detail.SGLevelMOHService;`
                'SIPReSync'=$detail.SIPReSync;'TimerCallProceeding'=$detail.TimerCallProceeding;'TimerSanitySetup'=$detail.TimerSanitySetup;'TLSProfileID_1'=$detail.TLSProfileID_1;'ToneTableID'=$($detail.ToneTableID.'#text' | sort) -join ",";})


               


        $global:SipSignallingGroups += $object
    }
 
 
}

function SIPSignallingGroup_Validate($sbcfqdn, $ToTeamsCustomerDDIInfo, $ToEnghouseCustomerDDIInfo){
Write-Host "Validating Signalling Group Configuration" -ForegroundColor Yellow -NoNewline
$SIPSGRequired = @()
$SIPSGToAdd = @()
$SIPSGToModify = @()
$SIPSGToDelete = @()

#region "Spark SG"

$trunkinfo = $TrunkData | where {$_.sbcfqdn -eq $sbcfqdn -and $_.vendor -eq "Spark"} | select -first 1

$trunkname = $trunkinfo.TrunkName
$SIPListeningPort = $trunkinfo.SIPPort
$Channels = $trunkinfo.ChannelCount
$FQDNPrimary = $trunkinfo.FQDNPrimary
$FQDNSecondary = $trunkinfo.FQDNSecondary


$Description = "Spark Voice Connect"
$ServerClusterId = GetLastId $($SipServerDetails | Where-Object {$_.SIPServerTableName -eq "Spark Voice Connect - $($trunkname)"} | select -ExpandProperty sipservertableid)
$ProfileID = $sptable | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id -Unique | select -first 1
$RouteTableID = $RoutingTables | Where-Object {$_.description -eq "From PSTN"}  |select -ExpandProperty id -Unique | select -first 1
$EgressSPRMessageTableList = $($($mmTables | Where-Object {$_.Description -eq "Spark - Outbound Manipulation (Common)" -or $_.Description -eq "Spark - Outbound Manipulation ($($Realm))" -or $_.Description -eq "Spark - Outbound Authentication ($($trunkname))"} | select -expand id -Unique) | sort) -join ","
$IngressSPRMessageTableList = $($mmTables | Where-Object {$_.Description -eq "Spark - Inbound Manipulation"} | select -expand id -Unique) -join ","
$Channels = $trunkinfo.ChannelCount
$RemoteHosts = "$($FQDNPrimary),$($FQDNSecondary)"
$ToneTableID = $tonetableinfo | Where-Object {$_.TableName -eq "NZ Tones"} | select -ExpandProperty TableId -unique | select -First 1
$MediaConfigID = $medialists | Where-Object {$_.Description -eq "Spark Voice Connect"} | select -ExpandProperty id -Unique | select -first 1
$NetInterfaceSignaling = "$($LogicalInterfaces | Where-Object {$_.ifdescription -match "SIP"} | select -expand ifName)-1"
$ListenPort_1 = $trunkinfo.SIPPort
$NATPublicIPAddress = $LogicalInterfaces | Where-Object {$_.ifdescription -match "SIP"} | select -expand ifIPv4AddressPrimary


$object = New-Object –Type PSObject –Prop(@{'Description'=$Description;'ServerClusterId'=$ServerClusterId;'ProfileID'=$ProfileID;'RouteTableID'=$RouteTableID;'EgressSPRMessageTableList'=$EgressSPRMessageTableList;`
        'IngressSPRMessageTableList'=$IngressSPRMessageTableList;'Channels'=$Channels;'RemoteHosts'=$RemoteHosts;'ToneTableID'=$ToneTableID;'MediaConfigID'=$MediaConfigID;'NetInterfaceSignaling'=$NetInterfaceSignaling;`
        'RingBack'=4;'ServerSelection'=4;'ListenPort_1'=$ListenPort_1;'Protocol_1'=1;'AllowRefreshSDP'=1;'ChallengeRequest'=0;'DSCP'=40;'Direction'=2;'Early183'=0;'HuntMethod'=4;'InboundNATPeerRegistrarMaxEnabled'=0;`
        'InboundNATPeerRegistrarMaxTTL'=120;'InboundNATTraversalDetection'=0;'InboundSecureNATMediaLatching'=1;'InboundSecureNATMediaPrefix'='255.255.255.255';'InteropMode'=0;'Monitor'=3;'NoChannelAvailableId'=34;`
        'NotifyCACProfile'=0;'OutboundProxyPort'=5060;'OutboundRegistrarTTL'=600;'PassthruPeerSIPRespCode'=1;'PlayCongestionTone'=0;'ProxyIpVersion'=0;'RTPDirectMode'=0;'RTPMode'=1;'RTPProxyMode'=0;'RTPProxySrtpMode'=0;`
        'RegisterKeepAlive'=1;'RegistrantTTL'=3600;'RegistrarTTL'=600;'RelOnQckConnect'=0;'RelOnQckConnectTimer'=1000;'RemoteMasks'='255.255.255.255,255.255.255.255';'SGLevelMOHService'=0;'SIPReSync'=0;'TimerCallProceeding'=180000;`
        'TimerSanitySetup'=255000;'customAdminState'=1;'NATTraversalType'=1;'NATPublicIPAddress'=$NATPublicIPAddress;'TLSProfileID_1'=$null;})
        #excluded 'VideoDirectMode'=0;'VideoProxyMode'=0;
$SIPSGRequired += $object
#endregion

#region "Teams SGs"

$NetInterfaceSignaling = "$($LogicalInterfaces | Where-Object {$_.ifdescription -match "Internet"} | select -expand ifName)-1"
$NATPublicIPAddress = $LogicalInterfaces | Where-Object {$_.ifdescription -match "Internet"} | select -expand ifIPv4AddressPrimary

$trunksonsbc = $ToTeamsCustomerDDIInfo  |select -ExpandProperty TrunkName -Unique
$customersonsbc = $ToTeamsCustomerDDIInfo  |select -ExpandProperty SBCshortName -Unique

$SGsonSBC = $TeamsData | where {$_.SBCshortname -in $customersonsbc} | select Customer, MSSIPPortNumber, Channels

$IngressSPRMessageTableList = $($mmTables | Where-Object {$_.Description -eq "Microsoft - Inbound Manipulation (REFER)" -or $_.Description -eq "Microsoft - Inbound Manipulation (INVITE)"} | select -ExpandProperty id | sort) -join ","
$MediaConfigID = $medialists | Where-Object {$_.Description -eq "Teams"} | select -ExpandProperty id -Unique | select -first 1
$RemoteHosts = "sip.pstnhub.microsoft.com,sip2.pstnhub.microsoft.com,sip3.pstnhub.microsoft.com,sip-all.pstnhub.microsoft.com,52.120.0.0,52.112.0.0"
$RemoteMasks = "255.255.255.255,255.255.255.255,255.255.255.255,255.255.255.255,255.252.0.0,255.252.0.0"
$RouteTableID = $RoutingTables | Where-Object {$_.description -eq "From Teams"} | Select-Object -ExpandProperty id -Unique | select -first 1
$ServerClusterId = GetLastId $($SipServerDetails | Where-Object {$_.SIPServerTableName -eq "Teams"} | Select-Object -ExpandProperty sipservertableid)
$TLSProfileID_1 = GetLastId $($SIPTLSProfiles | Where-Object {$_.Description -eq "Teams"} | Select-Object -ExpandProperty id)
$ToneTableID = $tonetableinfo | Where-Object {$_.TableName -eq "NZ Tones"} | Select-Object -ExpandProperty TableId -Unique | select -First 1

foreach($Organisation in $SGsonSBC){
    $Channels = $Organisation.Channels
    $Description = "Teams - $($Organisation.Customer)"
    $ListenPort_1 = $Organisation.MSSIPPortNumber
    $ProfileID = $sptable | Where-Object {$_.Description -eq $Description} | select -ExpandProperty id -Unique | select -first 1

    $object = New-Object –Type PSObject –Prop(@{'Channels'=$Channels;'Description'=$Description;'ListenPort_1'=$ListenPort_1;'IngressSPRMessageTableList'=$IngressSPRMessageTableList;'MediaConfigID'=$MediaConfigID;`
                'NATTraversalType'=1;'NATPublicIPAddress'=$NATPublicIPAddress;'NetInterfaceSignaling'=$NetInterfaceSignaling;'ProfileID'=$ProfileID;'RemoteHosts'=$RemoteHosts;'RemoteMasks'=$RemoteMasks;'RouteTableID'=$RouteTableID;`
                'ServerClusterId'=$ServerClusterId;`
                'TLSProfileID_1'=$TLSProfileID_1;'ToneTableID'=$ToneTableID;'AllowRefreshSDP'=1;'ChallengeRequest'=0;'customAdminState'=1;'Direction'=2;'DSCP'=40;'Early183'=1;'HuntMethod'=4;'InboundNATPeerRegistrarMaxEnabled'=0;`
                'InboundNATPeerRegistrarMaxTTL'=120;'InboundNATTraversalDetection'=0;'InboundSecureNATMediaLatching'=1;'InboundSecureNATMediaPrefix'='255.255.255.255';'InteropMode'=0;'Monitor'=3;`
                'NoChannelAvailableId'=34;'NotifyCACProfile'=0;'OutboundProxyPort'=5060;'OutboundRegistrarTTL'=600;'PassthruPeerSIPRespCode'=1;'PlayCongestionTone'=0;'Protocol_1'=4;'ProxyIpVersion'=0;'RegisterKeepAlive'=1;`
                'RegistrantTTL'=3600;'RegistrarTTL'=600;'RelOnQckConnect'=0;'RelOnQckConnectTimer'=1000;'RingBack'=4;'RTPDirectMode'=0;'RTPMode'=1;`
                'RTPProxyMode'=0;'RTPProxySrtpMode'=0;'ServerSelection'=1;'SGLevelMOHService'=0;'SIPReSync'=0;'TimerCallProceeding'=180000;'TimerSanitySetup'=255000;})
                #excluded 'VideoDirectMode'=0;'VideoProxyMode'=0;
    $SIPSGRequired += $object
}

#endregion

#region "Enghouse"

$NetInterfaceSignaling = "$($LogicalInterfaces | Where-Object {$_.ifdescription -match "Interop"} | select -expand ifName)-1"
$NATPublicIPAddress = $LogicalInterfaces | Where-Object {$_.ifdescription -match "Interop"} | select -expand ifIPv4AddressPrimary

$trunksonsbc = $ToEnghouseCustomerDDIInfo  |select -ExpandProperty TrunkName -Unique
$trunkconfig = $trunkdata | where {$_.vendor -eq "Enghouse" -and $_.sbcfqdn -eq $sbcfqdn}

foreach($trunkinfo in $trunkconfig){

    $trunkname = $trunkinfo.TrunkName
    $SIPListeningPort = $trunkinfo.SIPPort
    $Channels = $trunkinfo.ChannelCount
    $FQDNPrimary = $trunkinfo.FQDNPrimary
    $FQDNSecondary = $trunkinfo.FQDNSecondary
    $fqdns = @()
    if($trunkinfo.FQDNPrimary -match "(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\.)+[a-zA-Z]{2,63}$)"){$fqdns += $trunkinfo.FQDNPrimary} 
    if($trunkinfo.FQDNSecondary -match "(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9]\.)+[a-zA-Z]{2,63}$)"){$fqdns += $trunkinfo.FQDNSecondary} 
    
    $RemoteMasksArray = @()
    for($i=0;$i-lt $fqdns.count; $i++){
        $RemoteMasksArray += "255.255.255.255"
    }
    $RemoteMasks = $RemoteMasksArray -join ","


    $Description = "Enghouse - $($trunkname)"
    $ServerClusterId = GetLastId $($SipServerDetails | Where-Object {$_.SIPServerTableName -eq "Enghouse - $($trunkname)"} | select -ExpandProperty sipservertableid)
    $ProfileID = $sptable | Where-Object {$_.Description -eq "Enghouse"} | select -ExpandProperty id -Unique | select -first 1
    $RouteTableID = $RoutingTables | Where-Object {$_.description -eq "From Enghouse"}  |select -ExpandProperty id -Unique | select -first 1
    $Channels = $trunkinfo.ChannelCount
    $RemoteHosts = $fqdns -join ","
    $ToneTableID = $tonetableinfo | Where-Object {$_.TableName -eq "NZ Tones"} | select -ExpandProperty TableId -unique | select -First 1
    $MediaConfigID = $medialists | Where-Object {$_.Description -eq "Enghouse"} | select -ExpandProperty id -Unique | select -first 1
    $NetInterfaceSignaling = "$($LogicalInterfaces | Where-Object {$_.ifdescription -match "Interop"} | select -expand ifName)-1"
    $ListenPort_1 = $trunkinfo.SIPPort
    $NATPublicIPAddress = $LogicalInterfaces | Where-Object {$_.ifdescription -match "Interop"} | select -expand ifIPv4AddressPrimary


    $object = New-Object –Type PSObject –Prop(@{'Description'=$Description;'ServerClusterId'=$ServerClusterId;'ProfileID'=$ProfileID;'RouteTableID'=$RouteTableID;'EgressSPRMessageTableList'=$null;`
            'IngressSPRMessageTableList'=$null;'Channels'=$Channels;'RemoteHosts'=$RemoteHosts;'ToneTableID'=$ToneTableID;'MediaConfigID'=$MediaConfigID;'NetInterfaceSignaling'=$NetInterfaceSignaling;`
            'RingBack'=4;'ServerSelection'=4;'ListenPort_1'=$ListenPort_1;'Protocol_1'=1;'AllowRefreshSDP'=1;'ChallengeRequest'=0;'DSCP'=40;'Direction'=2;'Early183'=0;'HuntMethod'=4;'InboundNATPeerRegistrarMaxEnabled'=0;`
            'InboundNATPeerRegistrarMaxTTL'=120;'InboundNATTraversalDetection'=0;'InboundSecureNATMediaLatching'=1;'InboundSecureNATMediaPrefix'='255.255.255.255';'InteropMode'=0;'Monitor'=3;'NoChannelAvailableId'=34;`
            'NotifyCACProfile'=0;'OutboundProxyPort'=5060;'OutboundRegistrarTTL'=600;'PassthruPeerSIPRespCode'=1;'PlayCongestionTone'=0;'ProxyIpVersion'=0;'RTPDirectMode'=0;'RTPMode'=1;'RTPProxyMode'=0;'RTPProxySrtpMode'=0;`
            'RegisterKeepAlive'=1;'RegistrantTTL'=3600;'RegistrarTTL'=600;'RelOnQckConnect'=0;'RelOnQckConnectTimer'=1000;'RemoteMasks'=$RemoteMasks;'SGLevelMOHService'=0;'SIPReSync'=0;'TimerCallProceeding'=180000;`
            'TimerSanitySetup'=255000;'customAdminState'=1;'NATTraversalType'=0;'NATPublicIPAddress'=$NATPublicIPAddress;'TLSProfileID_1'=$null;})
            #excluded 'VideoDirectMode'=0;'VideoProxyMode'=0;
    $SIPSGRequired += $object
}

#endregion

   
#Determine objects to Add
foreach($Profile in $SIPSGRequired){
    if(!($SipSignallingGroups | Where-Object {$_.Description -eq $Profile.Description -and $_.ServerClusterId -eq $Profile.ServerClusterId -and $_.profileid -eq $($Profile.profileid) -and `
            $_.routetableid -eq $($Profile.routetableid) -and $_.EgressSPRMessageTableList -eq $($($Profile.EgressSPRMessageTableList -split "," | sort) -join ",") -and `
            $_.IngressSPRMessageTableList -eq $($($Profile.IngressSPRMessageTableList -split "," | sort) -join ",") -and `
            $_.Channels -eq $Profile.Channels -and $($($_.remotehosts -split "," | sort) -join ",") -eq $($($Profile.remotehosts -split "," | sort) -join ",") -and $_.tonetableid -eq $($Profile.tonetableid) -and `
            $_.MediaConfigID -eq $Profile.MediaConfigID -and `
            $_.NetInterfaceSignaling -eq $Profile.NetInterfaceSignaling -and $_.RingBack -eq $Profile.RingBack -and $_.ServerSelection -eq $Profile.ServerSelection -and $_.ListenPort_1 -eq $Profile.ListenPort_1 -and `
            $_.Protocol_1 -eq $Profile.Protocol_1 -and $_.AllowRefreshSDP -eq $Profile.AllowRefreshSDP -and $_.ChallengeRequest -eq $Profile.ChallengeRequest -and $_.DSCP -eq $Profile.DSCP -and `
            $_.Direction -eq $Profile.Direction -and $_.Early183 -eq $Profile.Early183 -and $_.HuntMethod -eq $Profile.HuntMethod -and $_.InboundNATPeerRegistrarMaxEnabled -eq $Profile.InboundNATPeerRegistrarMaxEnabled -and `
            $_.InboundNATPeerRegistrarMaxTTL -eq $Profile.InboundNATPeerRegistrarMaxTTL -and $_.InboundNATTraversalDetection -eq $Profile.InboundNATTraversalDetection -and `
            $_.InboundSecureNATMediaLatching -eq $Profile.InboundSecureNATMediaLatching -and $_.InboundSecureNATMediaPrefix -eq $Profile.InboundSecureNATMediaPrefix -and $_.InteropMode -eq $Profile.InteropMode -and `
            $_.Monitor -eq $Profile.Monitor -and $_.NoChannelAvailableId -eq $Profile.NoChannelAvailableId -and $_.NotifyCACProfile -eq $Profile.NotifyCACProfile -and $_.OutboundProxyPort -eq $Profile.OutboundProxyPort -and `
            $_.OutboundRegistrarTTL -eq $Profile.OutboundRegistrarTTL -and $_.PassthruPeerSIPRespCode -eq $Profile.PassthruPeerSIPRespCode -and $_.PlayCongestionTone -eq $Profile.PlayCongestionTone -and `
            $_.ProxyIpVersion -eq $Profile.ProxyIpVersion -and $_.RTPDirectMode -eq $Profile.RTPDirectMode -and $_.RTPMode -eq $Profile.RTPMode -and $_.RTPProxyMode -eq $Profile.RTPProxyMode -and `
            $_.RTPProxySrtpMode -eq $Profile.RTPProxySrtpMode -and $_.RegisterKeepAlive -eq $Profile.RegisterKeepAlive -and $_.RegistrantTTL -eq $Profile.RegistrantTTL -and $_.RegistrarTTL -eq $Profile.RegistrarTTL -and `
            $_.RelOnQckConnect -eq $Profile.RelOnQckConnect -and $_.RelOnQckConnectTimer -eq $Profile.RelOnQckConnectTimer -and $_.RemoteMasks -eq $Profile.RemoteMasks -and $_.SGLevelMOHService -eq $Profile.SGLevelMOHService -and `
            $_.SIPReSync -eq $Profile.SIPReSync -and $_.TimerCallProceeding -eq $Profile.TimerCallProceeding -and $_.TimerSanitySetup -eq $Profile.TimerSanitySetup -and `
            $_.customAdminState -eq $Profile.customAdminState -and $_.NATTraversalType -eq $Profile.NATTraversalType -and $_.NATPublicIPAddress -eq $Profile.NATPublicIPAddress})){
            #excluded -and $_.VideoDirectMode -eq $Profile.VideoDirectMode -and $_.VideoProxyMode -eq $Profile.VideoProxyMode
    
    if($SipSignallingGroups | Where-Object {$_.Description -eq $Profile.Description -and $_.ServerClusterId -eq $Profile.ServerClusterId}){
        $SIPSGToModify += $Profile
    }else{
        $SIPSGToAdd += $Profile
    }                    


    }
}

#foreach($Profile in $SIPSGRequired){
#    if(!($SipSignallingGroups | Where-Object {$_.Description -eq $Profile.Description -and $_.ServerClusterId -eq $Profile.ServerClusterId -and $($_.profileid.'#text') -eq $($Profile.profileid) -and `
#            $($_.routetableid.'#text') -eq $($Profile.routetableid) -and $($($_.EgressSPRMessageTableList.entry.'#text' | sort) -join ",") -eq $($($Profile.EgressSPRMessageTableList -split "," | sort) -join ",") -and `
#            $($($_.IngressSPRMessageTableList.entry.'#text' | sort) -join ",") -eq $($($Profile.IngressSPRMessageTableList -split "," | sort) -join ",") -and `
#            $_.Channels -eq $Profile.Channels -and $($($_.remotehosts -split "," | sort) -join ",") -eq $($($Profile.remotehosts -split "," | sort) -join ",") -and $($_.tonetableid.'#text') -eq $($Profile.tonetableid) -and `
#            $($_.MediaConfigID.'#text') -eq $Profile.MediaConfigID -and `
#            $_.NetInterfaceSignaling -eq $Profile.NetInterfaceSignaling -and $_.RingBack -eq $Profile.RingBack -and $_.ServerSelection -eq $Profile.ServerSelection -and $_.ListenPort_1 -eq $Profile.ListenPort_1 -and `
#            $_.Protocol_1 -eq $Profile.Protocol_1 -and $_.AllowRefreshSDP -eq $Profile.AllowRefreshSDP -and $_.ChallengeRequest -eq $Profile.ChallengeRequest -and $_.DSCP -eq $Profile.DSCP -and `
#            $_.Direction -eq $Profile.Direction -and $_.Early183 -eq $Profile.Early183 -and $_.HuntMethod -eq $Profile.HuntMethod -and $_.InboundNATPeerRegistrarMaxEnabled -eq $Profile.InboundNATPeerRegistrarMaxEnabled -and `
#            $_.InboundNATPeerRegistrarMaxTTL -eq $Profile.InboundNATPeerRegistrarMaxTTL -and $_.InboundNATTraversalDetection -eq $Profile.InboundNATTraversalDetection -and `
#            $_.InboundSecureNATMediaLatching -eq $Profile.InboundSecureNATMediaLatching -and $_.InboundSecureNATMediaPrefix -eq $Profile.InboundSecureNATMediaPrefix -and $_.InteropMode -eq $Profile.InteropMode -and `
#            $_.Monitor -eq $Profile.Monitor -and $_.NoChannelAvailableId -eq $Profile.NoChannelAvailableId -and $_.NotifyCACProfile -eq $Profile.NotifyCACProfile -and $_.OutboundProxyPort -eq $Profile.OutboundProxyPort -and `
#            $_.OutboundRegistrarTTL -eq $Profile.OutboundRegistrarTTL -and $_.PassthruPeerSIPRespCode -eq $Profile.PassthruPeerSIPRespCode -and $_.PlayCongestionTone -eq $Profile.PlayCongestionTone -and `
#            $_.ProxyIpVersion -eq $Profile.ProxyIpVersion -and $_.RTPDirectMode -eq $Profile.RTPDirectMode -and $_.RTPMode -eq $Profile.RTPMode -and $_.RTPProxyMode -eq $Profile.RTPProxyMode -and `
#            $_.RTPProxySrtpMode -eq $Profile.RTPProxySrtpMode -and $_.RegisterKeepAlive -eq $Profile.RegisterKeepAlive -and $_.RegistrantTTL -eq $Profile.RegistrantTTL -and $_.RegistrarTTL -eq $Profile.RegistrarTTL -and `
#            $_.RelOnQckConnect -eq $Profile.RelOnQckConnect -and $_.RelOnQckConnectTimer -eq $Profile.RelOnQckConnectTimer -and $_.RemoteMasks -eq $Profile.RemoteMasks -and $_.SGLevelMOHService -eq $Profile.SGLevelMOHService -and `
#            $_.SIPReSync -eq $Profile.SIPReSync -and $_.TimerCallProceeding -eq $Profile.TimerCallProceeding -and $_.TimerSanitySetup -eq $Profile.TimerSanitySetup -and `
#            $_.customAdminState -eq $Profile.customAdminState -and $_.NATTraversalType -eq $Profile.NATTraversalType -and $_.NATPublicIPAddress -eq $Profile.NATPublicIPAddress})){
#            #excluded -and $_.VideoDirectMode -eq $Profile.VideoDirectMode -and $_.VideoProxyMode -eq $Profile.VideoProxyMode
#        $SIPSGToAdd += $Profile
#    }
#}

#Determine objects to Delete
foreach($Profile in $SipSignallingGroups){
    if(!($SIPSGRequired | Where-Object {$_.Description -eq $Profile.Description `
-and $_.ServerClusterId -eq $Profile.ServerClusterId `
-and $_.ProfileID -eq $profile.ProfileID.'#text'`
-and $_.RouteTableID -eq $profile.RouteTableID.'#text' `
-and $($($_.EgressSPRMessageTableList -split ",") | sort) -join "," -eq $($profile.EgressSPRMessageTableList.entry.'#text' | sort) -join ","`
-and $($($_.IngressSPRMessageTableList -split ",") | sort) -join "," -eq $($profile.IngressSPRMessageTableList.entry.'#text' | sort) -join ","`
-and $_.Channels -eq $Profile.Channels `
-and $($($_.remotehosts -split "," | sort) -join ",") -eq $($($Profile.remotehosts -split "," | sort) -join ",") `
-and $($_.tonetableid) -eq $($Profile.tonetableid.'#text') `
-and $($_.mediaconfigid) -eq $($Profile.mediaconfigid.'#text')`
-and $_.NetInterfaceSignaling -eq $Profile.NetInterfaceSignaling `
-and $_.RingBack -eq $Profile.RingBack `
-and $_.ServerSelection -eq $Profile.ServerSelection `
-and $_.ListenPort_1 -eq $Profile.ListenPort_1 `
-and $_.Protocol_1 -eq $Profile.Protocol_1 `
-and $_.AllowRefreshSDP -eq $Profile.AllowRefreshSDP `
-and $_.ChallengeRequest -eq $Profile.ChallengeRequest `
-and $_.DSCP -eq $Profile.DSCP `
-and $_.Direction -eq $Profile.Direction `
-and $_.Early183 -eq $Profile.Early183 `
-and $_.HuntMethod -eq $Profile.HuntMethod `
-and $_.InboundNATPeerRegistrarMaxEnabled -eq $Profile.InboundNATPeerRegistrarMaxEnabled `
-and $_.InboundNATPeerRegistrarMaxTTL -eq $Profile.InboundNATPeerRegistrarMaxTTL `
-and $_.InboundNATTraversalDetection -eq $Profile.InboundNATTraversalDetection `
-and $_.InboundSecureNATMediaLatching -eq $Profile.InboundSecureNATMediaLatching `
-and $_.InboundSecureNATMediaPrefix -eq $Profile.InboundSecureNATMediaPrefix `
-and $_.InteropMode -eq $Profile.InteropMode `
-and $_.Monitor -eq $Profile.Monitor `
-and $_.NoChannelAvailableId -eq $Profile.NoChannelAvailableId `
-and $_.NotifyCACProfile -eq $Profile.NotifyCACProfile `
-and $_.OutboundProxyPort -eq $Profile.OutboundProxyPort `
-and $_.OutboundRegistrarTTL -eq $Profile.OutboundRegistrarTTL `
-and $_.PassthruPeerSIPRespCode -eq $Profile.PassthruPeerSIPRespCode `
-and $_.PlayCongestionTone -eq $Profile.PlayCongestionTone `
-and $_.ProxyIpVersion -eq $Profile.ProxyIpVersion `
-and $_.RTPDirectMode -eq $Profile.RTPDirectMode `
-and $_.RTPMode -eq $Profile.RTPMode `
-and $_.RTPProxyMode -eq $Profile.RTPProxyMode `
-and $_.RTPProxySrtpMode -eq $Profile.RTPProxySrtpMode `
-and $_.RegisterKeepAlive -eq $Profile.RegisterKeepAlive `
-and $_.RegistrantTTL -eq $Profile.RegistrantTTL `
-and $_.RegistrarTTL -eq $Profile.RegistrarTTL `
-and $_.RelOnQckConnect -eq $Profile.RelOnQckConnect `
-and $_.RelOnQckConnectTimer -eq $Profile.RelOnQckConnectTimer `
-and $_.RemoteMasks -eq $Profile.RemoteMasks `
-and $_.SGLevelMOHService -eq $Profile.SGLevelMOHService `
-and $_.SIPReSync -eq $Profile.SIPReSync `
-and $_.TimerCallProceeding -eq $Profile.TimerCallProceeding `
-and $_.TimerSanitySetup -eq $Profile.TimerSanitySetup `
-and $_.customAdminState -eq $Profile.customAdminState `
-and $_.NATTraversalType -eq $Profile.NATTraversalType `
-and $_.NATPublicIPAddress -eq $Profile.NATPublicIPAddress})){
            #excluded -and $_.VideoDirectMode -eq $Profile.VideoDirectMode -and $_.VideoProxyMode -eq $Profile.VideoProxyMode
        $SIPSGToDelete += $Profile
    }
}

    if(!($SIPSGToAdd) -and !($SIPSGToDelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($profile in $SIPSGToAdd){
        SIPSignallingGroup_Add $sbcfqdn $profile
    }

     foreach($profile in $SIPSGToModify){
        SIPSignallingGroup_Modify $sbcfqdn $profile
    }

    foreach($profile in $SIPSGToDelete){
        #SIPSignallingGroup_Delete $sbcfqdn $profile
    }

}
#endregion SIP Signalling Group


#region Static Host Entries
function StaticHost_Add($sbcfqdn, $HostName, $IpAddress){
Write-Host "Adding static host for $($HostName)" -ForegroundColor White
    $NextId = 1 + $(GetLastId $($HostEntries | select -expand id -ErrorAction SilentlyContinue))
    $args1 = "HostName=$($HostName)&IPAddress=$($IpAddress)"
    $url = "https://$($sbcfqdn)/rest/hosts/$($NextId)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $global:HostEntries += $result.root.hosts
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }
    
}

function StaticHost_Delete($sbcfqdn, $HostName, $IpAddress){
Write-Host "Deleting static host for $($HostName)" -ForegroundColor White
       
    $hostinfo = $HostEntries | Where-Object {$_.HostName -eq $statichost.HostName -and $_.IPAddress -eq $statichost.IPAddress}
       
    [xml]$result = $(Invoke-RestMethod -Uri $hostinfo.href -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green;
        $global:HostEntries = $HostEntries | where {$_.id -ne $hostinfo.id}
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }
}

function StaticHost_Get($sbcfqdn){
$global:HostEntries = @()
    [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/hosts" -Method GET -WebSession $sbcauthsession).trim()
    $HostTables =  $result.root.hosts_list.hosts_pk
    foreach($HostTable in $HostTables){
        [xml]$result = $(Invoke-RestMethod -Uri $HostTable.href -Method GET -WebSession $sbcauthsession).trim()
        $global:HostEntries += $result.root.hosts

    }
}

function StaticHost_Validate($sbcfqdn){
Write-Host "Validating Host Table Configuration" -ForegroundColor Yellow -NoNewline
$statichosts = @()
$statichosttoadd = @()
$statichosttodelete = @()

$TrunkInfo =  $trunkdata | where {$_.sbcfqdn -eq $sbcfqdn} | select realm, FQDNPrimary,	IPPrimary, FQDNSecondary, IPSecondary -Unique

foreach($trunk in $trunkinfo){
    #host entries
    if(!($statichosts | where {$_.FQDN -eq $trunk.realm})){
        if($trunk.IPPrimary){
            $statichost = New-Object –Type PSObject –Prop(@{'HostName'=$trunk.realm;'IPAddress'=$trunk.IPPrimary;})
            $statichosts += $statichost
        }elseif($trunk.IPSecondary){
            $statichost = New-Object –Type PSObject –Prop(@{'HostName'=$trunk.realm;'IPAddress'=$trunk.IPPrimary;})
            $statichosts += $statichost
        }
    }
    
    if($trunk.FQDNPrimary -and $trunk.IPPrimary){
        $statichost = New-Object –Type PSObject –Prop(@{'HostName'=$trunk.FQDNPrimary;'IPAddress'=$trunk.IPPrimary;})
        $statichosts += $statichost
    }

    if($trunk.FQDNSecondary -and $trunk.IPSecondary){
        $statichost = New-Object –Type PSObject –Prop(@{'HostName'=$trunk.FQDNSecondary;'IPAddress'=$trunk.IPSecondary;})
        $statichosts += $statichost
    }
  }

#Determine Static Hosts to Add
foreach($statichost in $statichosts){
    if(!($HostEntries | Where-Object {$_.HostName -eq $statichost.HostName -and $_.IPAddress -eq $statichost.IPAddress})){
        $statichosttoadd += $statichost
    }
}

#Determine Static Hosts to Delete
foreach($statichost in $HostEntries){
    if(!($statichosts | Where-Object {$_.HostName -eq $statichost.HostName -and $_.IPAddress -eq $statichost.IPAddress})){
        $statichosttodelete += $statichost
    }
}

    if (!($statichosttoadd) -and !($statichosttodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }

foreach($statichost in $statichosttoadd){
    StaticHost_Add $sbcfqdn $statichost.HostName $statichost.IpAddress
}

foreach($statichost in $statichosttodelete){
    StaticHost_Delete $sbcfqdn $statichost.HostName $statichost.IpAddress
}



}


#endregion Static Host Entries

#region Static IP Routes

function StaticIPRoute_Add($sbcfqdn, $ipDestinationAddr, $ipDestinationMask, $ipNexthopAddress, $ipStaticRouteMetric){
Write-Host "Adding static route for $($route)" -ForegroundColor White
    $NextId = 1 + $(GetLastId $($iproutedetails | select -expand id -ErrorAction SilentlyContinue))
    
    $url = "https://$($sbcfqdn)/rest/staticiproute/$($NextId)"
       
    $args1 = "ipDestinationAddr=$($ipDestinationAddr)&ipDestinationMask=$($ipDestinationMask)&ipNexthopAddress=$($ipNexthopAddress)&ipStaticRouteMetric=$($ipStaticRouteMetric)"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green;
        $global:IPRouteDetails += $result.root.staticiproute
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }

}

function StaticIPRoute_Delete($sbcfqdn, $ipDestinationAddr, $ipDestinationMask, $ipNexthopAddress){
Write-Host "Deleting static route for @{ipNexthopAddress=$($ipNexthopAddress); ipDestinationAddr=$($ipDestinationAddr); ipDestinationMask=$($ipDestinationMask)}" -ForegroundColor White
       
    $routeinfo = $iproutedetails | Where-Object {$_.ipDestinationAddr -eq $ipDestinationAddr -and $_.ipNexthopAddress -eq $ipNexthopAddress -and $_.ipDestinationMask -eq $ipDestinationMask} 
       
    [xml]$result = $(Invoke-RestMethod -Uri $routeinfo.href -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green;
        $global:IPRouteDetails = $IPRouteDetails | where {$_.id -ne $routeinfo.id}
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }

}

function StaticIPRoute_Get($sbfqdn){
$global:IPRouteDetails = @()
Write-Host "Loading Static IP Route Configuration from SBC" -ForegroundColor Magenta

[xml]$existingroutes = $(Invoke-RestMethod -uri "https://$($sbcfqdn)/rest/staticiproute" -Method get -WebSession $sbcauthsession).trim()

    foreach($staticiproute in $existingroutes.root.staticiproute_list.staticiproute_pk){
        
        [xml]$iproutedetail = $(Invoke-RestMethod -uri $staticiproute.href -Method get -WebSession $sbcauthsession).trim()

        $global:IPRouteDetails += $iproutedetail.root.staticiproute
    }

}

function StaticIPRoute_Validate($sbcfqdn){
$routes = @()
$routestoadd = @()
$routestodelete = @()

Write-Host "Validating Static IP Route Configuration from SBC" -ForegroundColor Yellow -NoNewline

$SparkInfo =  $trunkdata | where {$_.sbcfqdn -eq $sbcfqdn} | where {$_.Vendor -eq "Spark"}
$SparkIPAddresses = @()
$SparkIPAddresses += $SparkInfo | select -ExpandProperty IPPrimary | Get-Unique
$SparkIPAddresses += $SparkInfo | select -ExpandProperty IPSecondary | Get-Unique

$EnghouseInfo =  $trunkdata | where {$_.sbcfqdn -eq $sbcfqdn} | where {$_.Vendor -eq "Enghouse"}
$EnghouseIPAddresses = @()
$EnghouseIPAddresses += $EnghouseInfo | select -ExpandProperty IPPrimary | Get-Unique
$EnghouseIPAddresses += $EnghouseInfo | select -ExpandProperty IPSecondary | Get-Unique

$SparkInterfaceAddress = $LogicalInterfaces | Where-Object {$_.ifDescription -match "Spark"} | select ifDescription, ifipv4address*, ifIPv4NextHop
$InteropInterfaceAddress = $LogicalInterfaces | Where-Object {$_.ifDescription -match "Interop"} | select ifDescription, ifipv4address*, ifIPv4NextHop
$ManagementInterfaceAddress = $LogicalInterfaces | Where-Object {$_.ifDescription -match "Management"} | select ifDescription, ifipv4address*, ifIPv4NextHop
$InternetInterfaceAddress = $LogicalInterfaces | Where-Object {$_.ifDescription -match "Internet"} | select ifDescription, ifipv4address*, ifIPv4NextHop

$InternetGW = $InternetInterfaceAddress.ifIPv4NextHop
$SparkGW = $SparkInterfaceAddress.ifIPv4NextHop
$InteropGW = $InteropInterfaceAddress.ifIPv4NextHop

$ManagementAddress = $ManagementInterfaceAddress.ifIPv4AddressPrimary
$ManagementGW = $ManagementAddress.Split('.')
$ManagementGW[-1] = 1
$ManagementGW = $ManagementGW -join '.'

#region default route
$route = New-Object –Type PSObject –Prop(@{'ipDestinationAddr'="0.0.0.0";'ipDestinationMask'="0.0.0.0";'ipNexthopAddress'=$InternetGW;})
$routes += $route
#endregion 

#region private routes
$route = New-Object –Type PSObject –Prop(@{'ipDestinationAddr'="10.0.0.0";'ipDestinationMask'="255.0.0.0";'ipNexthopAddress'=$ManagementGW;})
$routes += $route
$route = New-Object –Type PSObject –Prop(@{'ipDestinationAddr'="172.16.0.0";'ipDestinationMask'="255.240.0.0";'ipNexthopAddress'=$ManagementGW;})
$routes += $route
$route = New-Object –Type PSObject –Prop(@{'ipDestinationAddr'="192.168.0.0";'ipDestinationMask'="255.255.0.0";'ipNexthopAddress'=$ManagementGW;})
$routes += $route
#endregion

#region Spark routes
foreach($ipaddress in $SparkIPAddresses){
    $route = New-Object –Type PSObject –Prop(@{'ipDestinationAddr'=$ipaddress;'ipDestinationMask'="255.255.255.255";'ipNexthopAddress'=$SparkGW;})
    $routes += $route
}
#endregion

#region Enghouse routes
foreach($ipaddress in $EnghouseAddresses){
    $route = New-Object –Type PSObject –Prop(@{'ipDestinationAddr'=$ipaddress;'ipDestinationMask'="255.255.255.255";'ipNexthopAddress'=$InteropGW;})
    $routes += $route
}
#endregion

#Determine Routes to Add
foreach($route in $routes){
    if(!($iproutedetails | Where-Object {$_.ipDestinationAddr -eq $route.ipDestinationAddr -and $_.ipNexthopAddress -eq $route.ipNexthopAddress -and $_.ipDestinationMask -eq $route.ipDestinationMask})){
        $routestoadd += $route
    }
}

#Determine Routes to Delete
foreach($route in $IPRouteDetails){
    if(!($routes | Where-Object {$_.ipDestinationAddr -eq $route.ipDestinationAddr -and $_.ipNexthopAddress -eq $route.ipNexthopAddress -and $_.ipDestinationMask -eq $route.ipDestinationMask})){
        $routestodelete += $route
    }
}


    if (!($routestoadd) -and !($routestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }

#Add Static Routes
foreach($route in $routestoadd){
    StaticIPRoute_Add $sbcfqdn $route.ipDestinationAddr $route.ipDestinationMask $route.ipNexthopAddress 1
}    

   
#Delete Static Routes
foreach($route in $routestodelete){
    StaticIPRoute_Delete $sbcfqdn $route.ipDestinationAddr $route.ipDestinationMask $route.ipNexthopAddress
}    




}

#endregion





#region Tone Tables
function ToneTable_Add($sbcqfdn, $TableName, $ToneProfileType, $Frequency1, $Frequency2, $CadenceOff, $Cadence2On, $Cadence2Off, $Amplitude1, $Amplitude2){
    $url = "https://$($sbcfqdn)/rest/tonetable"
    $ToneTableId = $tonetableinfo | Where-Object {$_.TableName -eq $TableName} | select -ExpandProperty Tableid | select -first 1

    #Create Table if it doesn't exist
    if(!($ToneTableId)){
        Write-Host "Creating Tone Table $($TableName)" -ForegroundColor White
        $NextId = 1 + $(GetLastId $($tonetableinfo | select -ExpandProperty Tableid -ErrorAction SilentlyContinue))
        $url = $url = "https://$($sbcfqdn)/rest/tonetable/$($NextId)"
        $args1 = "Description=$($TableName)"

        [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            $tonetable = $result.root.tonetable
            Write-Host "Operation Success" -ForegroundColor Green
            $object = New-Object –Type PSObject –Prop(@{'TableId'=$tonetable.id;'TableHref'=$tonetable.href;'TableName'=$tonetable.description;})
            
            $global:ToneTableInfo += $object
            $ToneTableId = $tonetable.id

        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
            Read-Host
        }
        ToneTable_Get $sbcfqdn
    }

    $toneprofileid = GetLastId $($tonetableinfo | where {$_.TableId -eq $ToneTableId -and $_.ToneProfileType -eq $ToneProfileType} | select -ExpandProperty ToneId -ErrorAction SilentlyContinue)
    $url = "https://$($sbcfqdn)/rest/tonetable/$($ToneTableId)/toneprofile/$($toneprofileid)"
    $args1 = "ToneProfileType=$($ToneProfileType)&Amplitude1=$($Amplitude1)&Frequency1=$($Frequency1)&Cadence2Off=$($Cadence2Off)&CadenceOff=$($CadenceOff)&Frequency2=$($Frequency2)&Cadence2On=$($Cadence2On)&Amplitude2=$($Amplitude2)"

    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).Amplitude1 = $Amplitude1
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).Amplitude2 = $Amplitude2
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).Cadence2Off = $Cadence2Off
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).Cadence2On = $Cadence2On
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).CadenceOff = $CadenceOff
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).Frequency1 = $Frequency1
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).Frequency2 = $Frequency2
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).TableName = $TableName
        $($global:ToneTableInfo | where {$_.toneid -eq $result.root.toneprofile.id}).ToneProfileType = $ToneProfileType

        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; 
        Read-Host
    }

          
}

function ToneTable_Delete($sbcfqdn, $TableName, $TableHref){
Write-Host "Deleting Tone Table: $($TableName)" -ForegroundColor White
       
       
    [xml]$result = $(Invoke-RestMethod -Uri $TableHref -Method Delete -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green;
        $global:ToneTableInfo = $ToneTableInfo | where {$_.TableHref -ne $TableHref}
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }

}

function ToneTable_Get($sbcfqdn){
Write-Host "Loading Tone Table Configuration from SBC" -ForegroundColor Magenta
$global:ToneTableInfo = @()

   $url = "https://$($sbcfqdn)/rest/tonetable"
    
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
    foreach($tonetable in $result.root.tonetable_list.tonetable_pk){
        [xml]$tonetabledetail = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/tonetable/$($tonetable.Id)" -Method Get -WebSession $sbcauthsession).trim()
        $ttdetail = $tonetabledetail.root.tonetable
        [xml]$tonetabledetailroot = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/tonetable/$($tonetable.Id)/toneprofile" -Method Get -WebSession $sbcauthsession).trim()
           
        $toneprofiles = $tonetabledetailroot.root.toneprofile_list.toneprofile_pk

        foreach($profile in $toneprofiles){
            $toneprofileid = $profile.id -replace "$($tonetable.id):", ""
            [xml]$toneprofiledetails = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/tonetable/$($tonetable.Id)/toneprofile/$($toneprofileid)" -Method Get -WebSession $sbcauthsession).trim()   

            $tinfo = $toneprofiledetails.root.toneprofile

            $object = New-Object –Type PSObject –Prop(@{'TableId'=$tonetable.id;'TableHref'=$tonetable.href;'TableName'=$ttdetail.description;`
                'ToneId'=$tinfo.id;'ToneHref'=$tinfo.href;'Amplitude1'=$tinfo.amplitude1;'Amplitude2'=$tinfo.amplitude2;`
                'Cadence2Off'=$tinfo.Cadence2Off;'Cadence2On'=$tinfo.Cadence2On;'CadenceOff'=$tinfo.CadenceOff;`
                'Frequency1'=$tinfo.Frequency1;'Frequency2'=$tinfo.Frequency2;'ToneProfileType'=$tinfo.ToneProfileType})
            
            $global:ToneTableInfo += $object
        }
    }
}

function ToneTable_Validate($sbcqfdn){
Write-Host "Validating Tone Table Configuration" -ForegroundColor Yellow -NoNewline
$tonetables = @()
$tonetablestoadd = @()
$tonetablestodelete = @()

$url = "https://$($sbcfqdn)/rest/tonetable"
      

    $tonetable = New-Object –Type PSObject –Prop(@{'TableName'='NZ Tones';'ToneProfileType'=1;'Frequency1'=400;'Frequency2'=450;'CadenceOff'=200;'Cadence2On'=400;'Cadence2Off'=2000;'Amplitude1'=-19;'Amplitude2'=-19;})
    $tonetables += $tonetable
    $tonetable = New-Object –Type PSObject –Prop(@{'TableName'='NZ Tones';'ToneProfileType'=4;'Frequency1'=400;'Frequency2'=0;'CadenceOff'=250;'Cadence2On'=0;'Cadence2Off'=0;'Amplitude1'=-24;'Amplitude2'=0;})
    $tonetables += $tonetable

    
    foreach($tonetable in $tonetables){
        if(!($tonetableinfo | Where-Object {$_.TableName -eq $tonetable.TableName -and $_.ToneProfileType -eq $tonetable.ToneProfileType `
            -and $_.Frequency1 -eq $tonetable.Frequency1 -and $_.Frequency2 -eq $tonetable.Frequency2 -and $_.CadenceOff -eq $tonetable.CadenceOff -and $_.Cadence2On -eq $tonetable.Cadence2On `
            -and $_.Cadence2Off -eq $tonetable.Cadence2Off -and $_.Amplitude1 -eq $tonetable.Amplitude1 -and $_.Amplitude2 -eq $tonetable.Amplitude2})){
        
            $tonetablestoadd += $tonetable
        }
    }

    
    foreach($tonetable in $tonetableinfo){
        if(!($tonetables | Where-Object {$_.TableName -eq $tonetable.TableName -and $_.ToneProfileType -eq $tonetable.ToneProfileType `
            -and $_.Frequency1 -eq $tonetable.Frequency1 -and $_.Frequency2 -eq $tonetable.Frequency2 -and $_.CadenceOff -eq $tonetable.CadenceOff -and $_.Cadence2On -eq $tonetable.Cadence2On `
            -and $_.Cadence2Off -eq $tonetable.Cadence2Off -and $_.Amplitude1 -eq $tonetable.Amplitude1 -and $_.Amplitude2 -eq $tonetable.Amplitude2})){
        
            $tonetablestodelete += $tonetable
        }
    }

    
    if (!($tonetablestoadd) -and !($tonetablestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }


    foreach($tonetable in $tonetablestoadd){
        ToneTable_Add $sbcfqdn $tonetable.TableName $tonetable.ToneProfileType $tonetable.Frequency1 $tonetable.Frequency2 $tonetable.CadenceOff $tonetable.Cadence2On $tonetable.Cadence2Off $tonetable.Amplitude1 $tonetable.Amplitude2

    }

    $tonetablestodelete = $tonetablestodelete | select TableName, TableHref -Unique
    foreach($tonetable in $tonetablestodelete){
        ToneTable_Delete $sbcfqdn $tonetable.TableName $tonetable.TableHref

    }

          
}
#endregion Tone Tables

#region Transformation Tables
function TransformationTable_Add($sbcfqdn, $Description){
#$TTTable = TransformationTable_Get $sbcfqdn
if(!($TTTable | Where-Object {$_.TTDescription -eq $Description})){
    $Id = 1 + $(GetLastId $($TTTable | select -ExpandProperty TTID -ErrorAction SilentlyContinue))

    $url = "https://$($sbcfqdn)/rest/transformationtable/$($Id)"
    $args1 = "Description=$($Description)"
    Write-Host "Adding Transformation Table '$($Description)'" -ForegroundColor White

    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
        $object = New-Object –Type PSObject –Prop(@{'TTID'=$result.root.transformationtable.Id;'TTDescription'=$result.root.transformationtable.Description;`
                        'TTSequence'=$result.root.transformationtable.sequence;'TThref'=$result.root.transformationtable.href;})
                
        $global:TTTable += $object 
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }


}else{
    return $TTTable | Where-Object {$_.TTDescription -eq $Description} | select -expand TTId
}

                   
}#function

function TransformationTable_DeleteByName($sbcfqdn, $Description){
#$TTTable = TransformationTable_Get $sbcfqdn 
Write-Host "Deleting Transformation Table: $($Description)" -ForegroundColor White
$TTableDetail = $TTTable | Where {$_.TTDescription -eq $Description}
$TTableEntries = $TTableDetail | where {$_.TTEID}

$Id = $TTableDetail | select -first 1 | select -expandproperty TTId

if($TTableEntries){
    foreach($entry in $TTableEntries){
        $url = $entry.TTEhref
        if($url){
            [xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()
            if($result.root.status.http_code -eq 200){
                Write-Host "Operation Success" -ForegroundColor Green
                $global:TTTable = $TTTable | where {$_.TTEID -ne $entry.tteid}
            }else{
                Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
            }
        }
    }
}

if($Id){
    $url = "https://$($sbcfqdn)/rest/transformationtable/$($Id)"
    if($url){
        [xml]$result = $(Invoke-RestMethod -Uri $url -Method Delete -WebSession $sbcauthsession).trim()
        if($result.root.status.http_code -eq 200){
            Write-Host "Operation Success" -ForegroundColor Green
            $global:TTTable = $TTTable | where {$_.TTDescription -ne $Description}
            if(!($TTTable)){
                $global:TTTable = @()
            }    
        }else{
            Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
        }
    }
    
}

                   
}#function

function TransformationTable_Get($sbcfqdn){
Write-Host "Loading Transformation Table Configuration from SBC" -ForegroundColor Magenta
$ReturnObject = @()
        [xml]$result = $(Invoke-RestMethod -Uri "https://$($sbcfqdn)/rest/transformationtable" -Method GET -WebSession $sbcauthsession).trim()
        $TransformationTables =  $result.root.transformationtable_list.transformationtable_pk
        foreach($TransformationTable in $TransformationTables){
            $url = $TransformationTable.href
            [xml]$result = $(Invoke-RestMethod -Uri $url -Method Get -WebSession $sbcauthsession).trim()
                        
            $TransformationTableId = $TransformationTable.Id
            $TransformationTableHref = $TransformationTable.href
            $TransformationTableName = $result.root.transformationtable.Description
            $TransformationTableSeq = $result.root.transformationtable.Sequence
                        
            #Write-Host "Transformation Table: ($($TransformationTableId)) $($TransformationTableName), Sequence: '$($TransformationTableSeq)'" -ForegroundColor Magenta
            $TableEntryIds = $TransformationTableSeq -split ","
            #$TableEntryIds

            foreach($TableEntryId in $TableEntryIds){
            $url = "$($TransformationTable.href)/transformationentry/$($TableEntryId)"
            try{
                $rawresult = $(Invoke-RestMethod -Uri $url -Method GET -WebSession $sbcauthsession).trim()
                [xml]$result = $rawresult.trim()
            }catch{
                #Write-Host "error" -ForegroundColor red
                #Read-host
            }

                
                $TransformationTableEntry = $result.root.transformationentry
                $object = New-Object –Type PSObject –Prop(@{'TTID'=$TransformationTableId;'TTDescription'=$TransformationTableName;`
                        'TTSequence'=$TransformationTableSeq;'TThref'=$TransformationTableHref;'TTEID'=$TransformationTableEntry.id;`
                        'TTEPriority'=$TableEntryId;'TTEhref'=$TransformationTableEntry.href;'TTEDescription'=$TransformationTableEntry.Description;`
                        'InputField'=$TransformationTableEntry.InputField;'InputFieldValue'=$TransformationTableEntry.InputFieldValue;`
                        'MatchType'=$TransformationTableEntry.MatchType;`
                        'OutputField'=$TransformationTableEntry.OutputField;'OutputFieldValue'=$TransformationTableEntry.OutputFieldValue;`
                        'Enabled'=$TransformationTableEntry.ConfigIEState;'TTEIDSplit'=$($TransformationTableEntry.id -split ":")[1]})
                
                $ReturnObject += $object 
            } #foreach
            
            
                        
                            
        } #foreach

#$ReturnObject[0] | fl
$global:TTTable = $ReturnObject 
$TransformationTablesEntryCount = $($ReturnObject.count)
$TransformationTablesEntryMax = 1000

Switch ($TransformationTablesEntryCount){
    {$_ -le 600}{Write-Host "Used $TransformationTablesEntryCount of $TransformationTablesEntryMax" -ForegroundColor Green}
    {$_ -gt 600 -and $_ -le 800}{Write-Host "Used $TransformationTablesEntryCount of $TransformationTablesEntryMax" -ForegroundColor Yellow; Write-Host "Press any key to continue"; Read-Host}
    {$_ -gt 800 }{Write-Host "Used $TransformationTablesEntryCount of $TransformationTablesEntryMax" -ForegroundColor Red; Write-Host "Press any key to continue"; Read-Host}
}
}#function

function TransformationTable_Validate($sbcfqdn, $ToTeamsCustomerTrunkInfo, $DivertToPSTNCustomerTrunkInfo, $ToEnghouseCustomerTrunkInfo){
$tTablesrequired = @()
$tTablestoadd = @()
$tTablestodelete = @()

$CurrentTables = $TTTable | Select-Object ttdescription, tthref -unique | sort ttdescription

Write-Host "Validating Call Routing Transformation Tables Configuration" -ForegroundColor Yellow -NoNewline

    $TablesToCreate = @("To PSTN", "To PSTN (Mask CLID)", "To PSTN (Refer)", "To Teams (Refer to Teams)", "To PSTN (SIMRing/Forward)", "To PSTN (Redirect as Pilot)")
    foreach($record in $ToTeamsCustomerTrunkInfo){
        $TablesToCreate += "To Teams - $($record.Customer)"
    }

    foreach($record in $DivertToPSTNCustomerTrunkInfo){
        $TablesToCreate += "To PSTN - $($record.Customer) - Divert"
    }

     foreach($record in $ToEnghouseCustomerTrunkInfo){
        $TablesToCreate += "To Enghouse - $($record.Customer)"
    }
      

    foreach($table in $TablesToCreate){
        $tTable = New-Object –Type PSObject –Prop(@{'ttdescription'=$table;})
        $tTablesrequired += $tTable
    }

    #Determine records to Add
    foreach($profile in $tTablesrequired){
        if(!($CurrentTables | Where-Object {$_.ttdescription -eq $profile.ttdescription})){
            $tTablestoadd += $profile
        }
    }

    #Determine records to Delete
    foreach($profile in $CurrentTables){
        if(!($tTablesrequired | Where-Object {$_.ttdescription -eq $profile.ttdescription})){
            $tTablestodelete += $profile
        }
    }

       if (!($tTablestoadd) -and !($tTablestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }



    foreach($profile in $tTablestoadd){
        TransformationTable_Add $sbcfqdn $profile.ttdescription | out-null
    }

    foreach($profile in $tTablestodelete){
        TransformationTable_DeleteByName $sbcfqdn $profile.ttdescription
    }
    

}
#endregion Transformation Tables

#region Transformation Table Entries
function TransformationTableEntry_ClearCustomerDDIRules($sbcfqdn, $Organisation, $TrunkName){
$FromPSTNTTableName = "To Teams - $($Organisation)"
$FromPSTNTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromPSTNTTableName} | select -first 1 | select -ExpandProperty TTID
    if($FromPSTNTTID){
        $FromPSTNTTEHREFs = $TTTable | Where-Object {$_.TTDescription -eq $FromPSTNTTableName -and ($_.ttedescription -match "Allow Calls from \d+ to \d+" -or $_.ttedescription -match "Allow calls to \d+")} | select -ExpandProperty ttehref
            foreach($url in $FromPSTNTTEHREFs){
                [xml]$result = $(Invoke-RestMethod -Uri $url -Method DELETE -WebSession $sbcauthsession).trim()
                if($result.root.status.http_code -eq 200){Write-Host "Operation Success" -ForegroundColor Green}else{Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host}

            }
    }
}

function TransformationTableEntry_CreateCommonRules($sbcfqdn){
    #$TTTable = TransformationTable_Get $sbcfqdn

    $FromTeamsTTableName = "To PSTN"
    $FromTeamsForwardTTableName = "To PSTN (SIMRing/Forward)"
    $FromTeamsReferPSTNTTableName = "To PSTN (Refer)"
    $FromTeamsReferTTableName = "To Teams (Refer to Teams)"

    $FromTeamsTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromTeamsTTableName} | select -first 1 | select -ExpandProperty TTID
    $FromTeamsForwardTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromTeamsForwardTTableName} | select -first 1 | select -ExpandProperty TTID
    $FromTeamsReferPSTNTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromTeamsReferPSTNTTableName} | select -first 1 | select -ExpandProperty TTID
    $FromTeamsReferTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromTeamsReferTTableName} | select -first 1 | select -ExpandProperty TTID

    if(!([string]::IsNullOrEmpty($($TTTable | Where-Object {$_.TTID -eq $FromTeamsTTID -and $_.TTEIDSplit -ne $null} | select -ExpandProperty TTEIDSplit | sort -Descending | select -first 1)))){
        $NewFromTeamsTTEId = GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromTeamsTTID} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue)
    }else{
        $NewFromTeamsTTEId = 0
    }

    if(!([string]::IsNullOrEmpty($($TTTable | Where-Object {$_.TTID -eq $FromTeamsForwardTTID -and $_.TTEIDSplit -ne $null} | select -ExpandProperty TTEIDSplit | sort -Descending | select -first 1)))){
        $NewFromTeamsForwardTTEId = GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromTeamsForwardTTID} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue)
    }else{
        $NewFromTeamsForwardTTEId = 0
    }

    if(!([string]::IsNullOrEmpty($($TTTable | Where-Object {$_.TTID -eq $FromTeamsReferTTID -and $_.TTEIDSplit -ne $null} | select -ExpandProperty TTEIDSplit | sort -Descending | select -first 1)))){
        $NewFromTeamsReferTTEId = GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromTeamsReferTTID} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue)
    }else{
        $NewFromTeamsReferTTEId = 0
    }

    if(!([string]::IsNullOrEmpty($($TTTable | Where-Object {$_.TTID -eq $FromTeamsReferPSTNTTID -and $_.TTEIDSplit -ne $null} | select -ExpandProperty TTEIDSplit | sort -Descending | select -first 1)))){
        $FromTeamsReferPSTNTTEID =  GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromTeamsReferPSTNTTID} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue)
    }else{
        $FromTeamsReferPSTNTTEID = 0
    }
    
       

    

    

    $CommonEntries_FromTeamsRefer = @()
        $object = New-Object –Type PSObject –Prop(@{'Enabled'=1;'Description'='Only if REFER';'InputFieldType'=28;'InputFieldValue'='REFER';'MatchType'=0;'OutputFieldType'=28;'OutputFieldValue'='\1';})
        $CommonEntries_FromTeamsRefer += $object

    

    #Create common "From Teams" rules
    foreach($entry in $CommonEntries_FromTeams){
        if(!($TTTable | Where-Object {$_.TTID -eq $FromTeamsTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            $NewFromTeamsTTEId = $NewFromTeamsTTEId + 1
            TransformationTableEntry_Add "CREATE" $sbcfqdn $FromTeamsTTID $NewFromTeamsTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
        }
    }

     #Create common "From Teams - (SIMRing/Forward)" rules
    foreach($entry in $CommonEntries_FromTeamsForward){
        if(!($TTTable | Where-Object {$_.TTID -eq $FromTeamsForwardTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            $NewFromTeamsForwardTTEId = $NewFromTeamsForwardTTEId + 1
            TransformationTableEntry_Add "CREATE" $sbcfqdn $FromTeamsForwardTTID $NewFromTeamsForwardTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
        }
    }

     #Create common "From Teams - (Refer to Teams)" rules
    foreach($entry in $CommonEntries_FromTeamsRefer){
        if(!($TTTable | Where-Object {$_.TTID -eq $FromTeamsReferTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            $NewFromTeamsReferTTEId = $NewFromTeamsReferTTEId + 1
            TransformationTableEntry_Add "CREATE" $sbcfqdn $FromTeamsReferTTID $NewFromTeamsReferTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
        }
    }

     #Create common "From Teams - (Refer to PSTN)" rules
    foreach($entry in $CommonEntries_FromTeamsReferPSTN){
        if(!($TTTable | Where-Object {$_.TTID -eq $FromTeamsReferPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            $NewFromTeamsReferPSTNTTEId = $NewFromTeamsReferPSTNTTEId + 1
            TransformationTableEntry_Add "CREATE" $sbcfqdn $FromTeamsReferPSTNTTID $NewFromTeamsReferPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
        }
    }

}

function TransformationTableEntry_CreateCustomerCommonRules($sbcfqdn, $Organisation, $trunkname){
    #$TTTable = TransformationTable_Get $sbcfqdn

    #$FromPSTNTTableName = "$($trunkname) - $($Organisation) - From PSTN"
    $FromPSTNTTableName = "To Teams - $($Organisation)"
    $FromPSTNTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromPSTNTTableName} | select -first 1 | select -ExpandProperty TTID
    if(!($FromPSTNTTID)){$FromPSTNTTID = TransformationTable_Add $sbcfqdn $FromPSTNTTableName}

    if(!([string]::IsNullOrEmpty($($TTTable | Where-Object {$_.TTID -eq $FromPSTNTTID -and $_.TTEIDSplit -ne $null} | select -ExpandProperty TTEIDSplit | sort -Descending | select -first 1)))){
        $NewFromPSTNTTEId =  GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromPSTNTTID} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue)
    }else{
        $NewFromPSTNTTEId = 0
    }
          
    $CommonEntries_FromPSTN = @()    
        $object = New-Object –Type PSObject –Prop(@{'Enabled'=1;'Description'='Normalise Inbound International DDI';'InputFieldType'=3;'InputFieldValue'='^00(\d+)$';'MatchType'=1;'OutputFieldType'=3;'OutputFieldValue'='+\1';})
        $CommonEntries_FromPSTN += $object

        $object = New-Object –Type PSObject –Prop(@{'Enabled'=1;'Description'='Normalise Inbound National DDI';'InputFieldType'=3;'InputFieldValue'='^0(\d+)$';'MatchType'=1;'OutputFieldType'=3;'OutputFieldValue'='+64\1';})
        $CommonEntries_FromPSTN += $object

        $object = New-Object –Type PSObject –Prop(@{'Enabled'=1;'Description'='Passthrough';'InputFieldType'=3;'InputFieldValue'='(.*)';'MatchType'=1;'OutputFieldType'=3;'OutputFieldValue'='\1';})
        $CommonEntries_FromPSTN += $object


    #Create common "From PSTN" rules
    foreach($entry in $CommonEntries_FromPSTN){
        if(!($TTTable | Where-Object {$_.TTID -eq $FromPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            $NewFromPSTNTTEId = $NewFromPSTNTTEId + 1
            TransformationTableEntry_Add "CREATE" $sbcfqdn $FromPSTNTTID $NewFromPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
        }
        
    }
}

function TransformationTableEntry_Add($sbcfqdn, $ttableid, $ttdescription, $tthref, $ttentryid, $Enabled, $Description, $InputFieldType, $InputFieldValue, $MatchType, $OutputFieldType, $OutputFieldValue){
    $url = "https://$($sbcfqdn)/rest/transformationtable/$($ttableid)/transformationentry/$($ttentryid)"
    
    Write-Host "Creating Call Routing Transformation Table Entry '$($Description)' in Table '$($TTDescription)'" -ForegroundColor White
    $args1= "Description=$($Description)&InputField=$($InputFieldType)&InputFieldValue=$($InputFieldValue)&MatchType=$($MatchType)&OutputField=$($OutputFieldType)&OutputFieldValue=$($OutputFieldValue)" -replace '\+', '%2B'
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()

    if($result.root.status.http_code -eq 200){
        if($Enabled -eq 0){
            Write-Host "Disabling Transformation Table Entry '$($Description)'" -ForegroundColor Red
            $args1= "Description=$($Description)&ConfigIEState=$($Enabled)"
            [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()            
            $TransformationTableEntry = $result.root.transformationentry
                $object = New-Object –Type PSObject –Prop(@{'TTID'=$ttableid;'TTDescription'=$TTDescription;`
                        'TTSequence'=$TableInfo.TTSequence;'TThref'=$tthref;'TTEID'=$TransformationTableEntry.id;`
                        'TTEPriority'=$TableEntryId;'TTEhref'=$TransformationTableEntry.href;'TTEDescription'=$TransformationTableEntry.Description;`
                        'InputField'=$TransformationTableEntry.InputField;'InputFieldValue'=$TransformationTableEntry.InputFieldValue;`
                        'MatchType'=$TransformationTableEntry.MatchType;`
                        'OutputField'=$TransformationTableEntry.OutputField;'OutputFieldValue'=$TransformationTableEntry.OutputFieldValue;`
                        'Enabled'=$TransformationTableEntry.ConfigIEState;'TTEIDSplit'=$($TransformationTableEntry.id -split ":")[1]})
                
                $global:TTTable += $object 
        }else{
            Write-Host "Operation Success" -ForegroundColor Green
            $TransformationTableEntry = $result.root.transformationentry
                $object = New-Object –Type PSObject –Prop(@{'TTID'=$ttableid;'TTDescription'=$TableInfo.TTDescription;`
                        'TTSequence'=$TableInfo.TTSequence;'TThref'=$TableInfo.TThref;'TTEID'=$TransformationTableEntry.id;`
                        'TTEPriority'=$TableEntryId;'TTEhref'=$TransformationTableEntry.href;'TTEDescription'=$TransformationTableEntry.Description;`
                        'InputField'=$TransformationTableEntry.InputField;'InputFieldValue'=$TransformationTableEntry.InputFieldValue;`
                        'MatchType'=$TransformationTableEntry.MatchType;`
                        'OutputField'=$TransformationTableEntry.OutputField;'OutputFieldValue'=$TransformationTableEntry.OutputFieldValue;`
                        'Enabled'=$TransformationTableEntry.ConfigIEState;'TTEIDSplit'=$($TransformationTableEntry.id -split ":")[1]})
                
                $global:TTTable += $object
        }
        
        
        

    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }
    
    
        
    
    
    
    

}

function TransformationTableEntry_CreateCustomerDDIRules($sbcfqdn, $Organisation, $TrunkName, $DDIs){
    #$TTTable = TransformationTable_Get $sbcfqdn
    $DisabledDDIs = $DDIs | where {$_.DDIType -eq "Disabled"}
    $EnabledDDIS = $DDIs | where {$_.DDI -notin $DisabledDDIS.DDI}


    $enablednumberranges =  GetRanges $($EnabledDDIS | where {!($_.TranslateTo)} | select -ExpandProperty ddi)
    $disablednumberranges =  GetRanges $($DisabledDDIs | where {!($_.TranslateTo)} | select -ExpandProperty ddi)

    #$FromPSTNTTableName = "$($Trunkname) - $($Organisation) - From PSTN"
    $FromPSTNTTableName = "To Teams - $($Organisation)"
    $FromPSTNTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromPSTNTTableName} | select -first 1 | select -ExpandProperty TTID
    if(!($FromPSTNTTID)){$FromPSTNTTID = TransformationTable_Add $sbcfqdn $FromPSTNTTableName}

    $NewFromPSTNTTEId =  GetLastId $($($TTTable | Where-Object {$_.TTID -eq $FromPSTNTTID} | select -ExpandProperty TTEID -ErrorAction SilentlyContinue) -replace "$($FromPSTNTTID):", "")
    $TranslatedDDIs = $EnabledDDIS | where {$_.TranslateTo -match ".*(\d{8})$"}

    $DDIEntries_FromPSTN = @() 
   
    if($TrunkName.ToUpper() -notmatch "Shared\d{2}"){
        if($TranslatedDDIs){
            foreach($DDI in $TranslatedDDIs){
                if($DDI.ddi.tostring().length -ge 8){
                    if($DDI.TranslateTo.tostring() -match "(?:\+64|0)?(\d{8,})$"){
                        $OutputfieldValue = "+64$($matches[1])"
                    }else{
                        $OutputfieldValue = "+64\1"
                    }
                    #$InputFieldValue = "^\+64($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
                    $SparkInputFieldValue = ".*($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
                    $Enabled = 1
                    
                    if($DDI.DisplayName){
                        $Description = $DDI.DisplayName
                    }else{
                        $Description = "Allow calls to $($DDI.DDI.tostring())"
                    }
                    
                    #$InputFieldValue = "^($($ddi.ddi.tostring().tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
                    $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$SparkInputFieldValue;'MatchType'=1;'OutputFieldType'=0;'OutputFieldValue'=$OutputfieldValue;})
                    $DDIEntries_FromPSTN += $object
                }
        
            }
        }

        $SparkInputFieldValue = "^(\d+)$"
        $Enabled = 1

        $Description = "Allow calls from PSTN to Teams"
        #$InputFieldValue = "^($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
        $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$SparkInputFieldValue;'MatchType'=1;'OutputFieldType'=0;'OutputFieldValue'='+64\1';})
        $DDIEntries_FromPSTN += $object
    }else{
        if($TranslatedDDIs){
            foreach($DDI in $TranslatedDDIs){
                if($DDI.ddi.tostring().length -ge 8){
                    if($DDI.TranslateTo -match ".*(\d{8})$"){
                        $OutputfieldValue = "+64$($matches[1])"
                    }else{
                        $OutputfieldValue = "+64\1"
                    }
                    #$InputFieldValue = "^\+64($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
                    $SparkInputFieldValue = "^($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
                    $Enabled = 1
        
                    #$Description = "Allow calls from PSTN to Teams DDI: $($DDI.DDI.tostring())"
                    if($DDI.DisplayName){
                        $Description = $DDI.DisplayName
                    }else{
                        $Description = "Allow calls to $($DDI.DDI.tostring())"
                    }
                    #$InputFieldValue = "^($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
                    $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$SparkInputFieldValue;'MatchType'=1;'OutputFieldType'=0;'OutputFieldValue'=$OutputfieldValue;})
                    $DDIEntries_FromPSTN += $object
                }
        
            }
        }
            
        foreach($ddirange in $enablednumberranges){
            $rangeregex = GetRegexStatement $ddirange.Begin $ddirange.End
                if($rangeregex.tostring().length -ge 8){
                   
                    $SparkInputFieldValue = $rangeregex
                    $Enabled = 1
        
                    $Description = "Allow calls from $($ddirange.Begin.tostring()) to $($ddirange.End.tostring())"
                    
                    $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$SparkInputFieldValue;'MatchType'=1;'OutputFieldType'=0;'OutputFieldValue'='+64\1';})
                    $DDIEntries_FromPSTN += $object
                }
        
        }
         foreach($ddirange in $disablednumberranges){
            $rangeregex = GetRegexStatement $ddirange.Begin $ddirange.End
                if($rangeregex.tostring().length -ge 8){
                   
                    $SparkInputFieldValue = $rangeregex
                    $Enabled = 0
        
                    $Description = "Allow calls from $($ddirange.Begin.tostring()) to $($ddirange.End.tostring())"
                    
                    $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$SparkInputFieldValue;'MatchType'=1;'OutputFieldType'=0;'OutputFieldValue'='+64\1';})
                    $DDIEntries_FromPSTN += $object
                }
        
        }
            
    }

    #Create "From PSTN" DDI rules
            foreach($entry in $DDIEntries_FromPSTN){
                
                if(!($TTTable | Where-Object {$_.Enabled -eq $entry.enabled -and $_.TTEDescription -eq $entry.Description -and $_.InputField -and $_.TTID -eq $FromPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
                    if(!($TTTable | Where-Object {$_.TTID -eq $FromPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
                        $NewFromPSTNTTEId = $NewFromPSTNTTEId + 1
                        TransformationTableEntry_Adds "CREATE" $sbcfqdn $FromPSTNTTID $NewFromPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
                        if($entry.enabled -eq 0){
                            TransformationTableEntry_Add "UPDATE" $sbcfqdn $FromPSTNTTID $NewFromPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
                        }
                    }else{
                        if($entry.InputFieldValue.length -gt 8){
                            $FromPSTNTTEId = GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue} | select -ExpandProperty tteid -ErrorAction SilentlyContinue | select -first 1)
                            TransformationTableEntry_Add "UPDATE" $sbcfqdn $FromPSTNTTID $FromPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
            
                        }                        
                        
                    }
                }
        
            }

}

function TransformationTableEntry_CreateCustomerDDIRules_Diverts($sbcfqdn, $Organisation, $TrunkName, $DDIs){
    #$TTTable = TransformationTable_Get $sbcfqdn

    $DivertToPSTNTTableName = "To PSTN - $($Organisation) - Divert"

    $DivertToPSTNTTID = $TTTable | Where-Object {$_.TTDescription -eq $DivertToPSTNTTableName} | select -first 1 | select -ExpandProperty TTID
    if(!($DivertToPSTNTTID)){$DivertToPSTNTTID = TransformationTable_Add $sbcfqdn $DivertToPSTNTTableName}

    $NewDivertToPSTNTTEId =  GetLastId $($($TTTable | Where-Object {$_.TTID -eq $DivertToPSTNTTID} | select -ExpandProperty TTEID -ErrorAction SilentlyContinue) -replace "$($DivertToPSTNTTID):", "")

    $DDIEntries_DivertToPSTN = @() 
   
    foreach($DDI in $DDIS){
        if($DDI.ddi.tostring().length -ge 8){
            $InputFieldValue = "^($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
            $DivertToValue = "0$($ddi.divertto.tostring().substring($ddi.ddi.tostring().Length -8, 8))"
            #$Enabled = $ddi.enabled
            $Enabled = 1

            $Description = "Divert Inbound PSTN call from DDI $($InputFieldValue) to DDI $($DivertToValue)"
            $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'OutputFieldType'=10;'OutputFieldValue'='\1';})
            $DDIEntries_DivertToPSTN += $object

            $Description = "Divert Inbound PSTN call from DDI $($InputFieldValue) to DDI $($DivertToValue)"
            $object = New-Object –Type PSObject –Prop(@{'Enabled'=$Enabled;'Description'=$Description;'InputFieldType'=0;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'OutputFieldType'=0;'OutputFieldValue'=$DivertToValue;})
            $DDIEntries_DivertToPSTN += $object

           
        }
        
    }
   

   #Create "Divert to PSTN" DDI rules
    foreach($entry in $DDIEntries_DivertToPSTN){
   
        if(!($TTTable | Where-Object {$_.Enabled -eq $entry.enabled -and $_.TTID -eq $DivertToPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            if(!($TTTable | Where-Object {$_.TTID -eq $DivertToPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
                $NewDivertToPSTNTTEId = $NewDivertToPSTNTTEId + 1
                TransformationTableEntry_Add "CREATE" $sbcfqdn $DivertToPSTNTTID $NewDivertToPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
            }else{
                $DivertToPSTNTTEId = GetLastId $($TTTable | Where-Object {$_.TTID -eq $DivertToPSTNTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue} | select -ExpandProperty tteid -ErrorAction SilentlyContinue | select -first 1)
                TransformationTableEntry_Add "UPDATE" $sbcfqdn $DivertToPSTNTTID $DivertToPSTNTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
            }
            
        }
    }
           
}

function TransformationTableEntry_CreateCustomerDDIRules_OutboundMasks($sbcfqdn, $Organisation, $TrunkName, $DDIs){
   #$TTTable = TransformationTable_Get $sbcfqdn

    $FromTeamsTTableName = "To PSTN"
    $FromTeamsTTID = $TTTable | Where-Object {$_.TTDescription -eq $FromTeamsTTableName} | select -first 1 | select -ExpandProperty TTID
    

    if(!([string]::IsNullOrEmpty($($TTTable | Where-Object {$_.TTID -eq $FromTeamsTTID -and $_.TTEIDSplit -ne $null} | select -ExpandProperty TTEIDSplit | sort -Descending | select -first 1)))){
        $NewFromTeamsTTEId = GetLastId $($TTTable | Where-Object {$_.TTID -eq $FromTeamsTTID} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue)
    }else{
        $NewFromTeamsTTEId = 0
    }
       
    foreach($DDI in $DDIs){
        $MaskDDIs_FromTeams = @()
        $object = New-Object –Type PSObject –Prop(@{'Enabled'=1;'Description'="$($Organisation) - Mask 0$($DDI.DDI) as 0$($DDI.Maskas)";'InputFieldType'=3;'InputFieldValue'="^0$($DDI.DDI)$";'MatchType'=1;'OutputFieldType'=3;'OutputFieldValue'="0$($DDI.MaskAs)";})
        $MaskDDIs_FromTeams += $object
    }
    

  
    #Create common "From Teams" rules
    foreach($entry in $MaskDDIs_FromTeams){
        if(!($TTTable | Where-Object {$_.TTID -eq $FromTeamsTTID -and $_.InputField -eq $entry.InputFieldType -and $_.InputFieldValue -eq $entry.InputFieldValue -and $_.OutputField -eq $entry.OutputFieldType -and $_.OutputFieldValue -eq $entry.OutputFieldValue})){
            $NewFromTeamsTTEId = $NewFromTeamsTTEId + 1
            TransformationTableEntry_Add "CREATE" $sbcfqdn $FromTeamsTTID $NewFromTeamsTTEId $entry.Enabled $entry.Description $entry.InputFieldType $entry.InputFieldValue $entry.MatchType $entry.OutputFieldType $entry.OutputFieldValue
        }
    }


}

function TransformationTableEntry_Delete($sbcfqdn, $description, $url){
Write-Host "Deleting Call Routing Transformation Table Entry '$($Description)'" -ForegroundColor White
    [xml]$result = $(Invoke-RestMethod -Uri $url -Method DELETE -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }
}

function TransformationTableEntry_Validate($sbcfqdn, $FromPSTNCustomerDDIInfo, $TranslateToPSTNCustomerDDIInfo, $DivertToPSTNCustomerDDIInfo, $AnonymousCustomerDDIInfo, $ToEnghouseCustomerDDIInfo, $ToEnghouseTranslateCustomerDDIInfo, $TrunkPilotDDI, $EnghouseDivertDDI){
$tEntriesrequired = @()
$tEntriestoadd = @()
$tEntriestodelete = @()

Write-Host "Validating Call Routing Transformation Entries Configuration" -ForegroundColor Yellow -NoNewline


#region "To PSTN"        
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='Service Numbers';'InputField'=0;'InputFieldValue'='^(1\d{2})$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='NZ Calling';'InputField'=0;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='International Calling';'InputField'=0;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='Toll Free Numbers';'InputField'=0;'InputFieldValue'='^(0[5|8]\d+)';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='Strip Calling Extension';'InputField'=22;'InputFieldValue'='(.*)';'MatchType'=1;'Outputfield'=22;'OutputFieldValue'='';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='Normalise Calling Number';'InputField'=3;'InputFieldValue'='^\+64(\d+)';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN';'Enabled'=1;'TTEDescription'='Normalise International Calling Number';'InputField'=3;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object


#region "Customer From Teams (Anonymous Dialing)
     $DDIs = $AnonymousCustomerDDIInfo

        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'='Service Numbers';'InputField'=0;'InputFieldValue'='^(1\d{2})$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'='NZ Calling (Hide CLID)';'InputField'=0;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='01970\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'='International Calling (Hide CLID)';'InputField'=0;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'='Toll Free Numbers';'InputField'=0;'InputFieldValue'='^(0[5|8]\d+)';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'='Strip Calling Extension';'InputField'=22;'InputFieldValue'='(.*)';'MatchType'=1;'Outputfield'=22;'OutputFieldValue'='';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'='Dummy Number to prevent false rule success';'InputField'=3;'InputFieldValue'='.*(99999999)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        

     foreach($DDI in $DDIs){
                
        $InputFieldValue = ".*($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
        if($ddi.maskas.tostring() -match "\d{8}"){
            $OutputFieldValue = "0$($ddi.maskas.tostring())"
        }else{
            $OutputFieldValue = "0\1"
        }
        $Enabled = 1
        
        if($InputFieldValue){
            $Description = "Hide outbound DDI for calls from $($InputFieldValue)"
            $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Mask CLID)';'Enabled'=1;'TTEDescription'=$Description;'InputField'=3;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'OutputField'=3;'OutputFieldValue'=$OutputFieldValue;})
            $tEntriesrequired += $object
        }
        
    }
#endregion
        
#endregion

#region "To PSTN (SIMRing/Forward)"
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Detect History Info';'InputField'=27;'InputFieldValue'='.sip.(\+.*)@.*';'MatchType'=0;'Outputfield'=10;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Forward to NZ DDI';'InputField'=0;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Forward to International DDI';'InputField'=0;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Normalise Original Caller National DDI';'InputField'=3;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Normalise Original Caller International DDI';'InputField'=3;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Passthrough Original Caller DDI';'InputField'=3;'InputFieldValue'='(.*)';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (SIMRing/Forward)';'Enabled'=1;'TTEDescription'='Normalise Redirecting Number';'InputField'=10;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=10;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
#endregion

#region "To PSTN (Redirect as Pilot)"
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Detect History Info';'InputField'=27;'InputFieldValue'='^<sip.(.*)@.*';'MatchType'=0;'Outputfield'=10;'OutputFieldValue'='\1';})
    $tEntriesrequired += $object
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Forward to NZ DDI';'InputField'=0;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='0\1';})
    $tEntriesrequired += $object
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Forward to International DDI';'InputField'=0;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='00\1';})
    $tEntriesrequired += $object
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Normalise Original Caller National DDI';'InputField'=3;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='0\1';})
    $tEntriesrequired += $object
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Normalise Original Caller International DDI';'InputField'=3;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='00\1';})
    $tEntriesrequired += $object
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Passthrough Original Caller DDI';'InputField'=3;'InputFieldValue'='(.*)';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='\1';})
    $tEntriesrequired += $object
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Redirect as Pilot)';'Enabled'=1;'TTEDescription'='Normalise Redirecting Number';'InputField'=10;'InputFieldValue'='(.*)';'MatchType'=1;'Outputfield'=10;'OutputFieldValue'=$EnghouseDivertDDI;})
    $tEntriesrequired += $object

#endregion

#region "To PSTN (Refer to Teams)"
    $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To Teams (Refer to Teams)';'Enabled'=1;'TTEDescription'='Only if REFER';'InputField'=28;'InputFieldValue'='REFER';'MatchType'=0;'Outputfield'=28;'OutputFieldValue'='\1';})
    $tEntriesrequired += $object
#endregion

#region "To PSTN (Refer to PSTN)"
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Detect Forward to PSTN';'InputField'=29;'InputFieldValue'='.sip.(\+.*)@.*';'MatchType'=0;'Outputfield'=29;'OutputFieldValue'='';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Forward to NZ DDI';'InputField'=0;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Forward to International DDI';'InputField'=0;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=0;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Normalise Original Caller National DDI';'InputField'=3;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='0\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Normalise Original Caller International DDI';'InputField'=3;'InputFieldValue'='^\+(?!64)(\d+)$';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='00\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Passthrough Original Caller DDI';'InputField'=3;'InputFieldValue'='(.*)';'MatchType'=1;'Outputfield'=3;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        $object = New-Object –Type PSObject –Prop(@{'ttDescription'='To PSTN (Refer)';'Enabled'=1;'TTEDescription'='Normalise Redirecting Number';'InputField'=10;'InputFieldValue'='^\+64(\d+)$';'MatchType'=1;'Outputfield'=10;'OutputFieldValue'='\1';})
        $tEntriesrequired += $object
        #Write-Host "Object: " $object.OutputFieldValue
#endregion

#region "Customer To Teams Entries"
$Organisations = $FromPSTNCustomerDDIInfo | select Customer, trunkname -Unique
foreach($Organisation in $Organisations){
    $TableName = "To Teams - $($Organisation.Customer)"

    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'='Normalise Inbound International DDI';'InputField'=3;'InputFieldValue'='^(?:00|\+(?!64))(\d+)';'MatchType'=1;'OutputField'=3;'OutputFieldValue'='+\1';})
    $tEntriesrequired += $object

    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'='Normalise Inbound National DDI';'InputField'=3;'InputFieldValue'='^(?:0|\+64)(\d+)';'MatchType'=1;'OutputField'=3;'OutputFieldValue'='+64\1';})
    $tEntriesrequired += $object

    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'='Passthrough';'InputField'=3;'InputFieldValue'='(.*)';'MatchType'=1;'OutputField'=3;'OutputFieldValue'='\1';})
    $tEntriesrequired += $object

    $DDIRanges = GetRanges $($FromPSTNCustomerDDIInfo | where {$_.Customer -eq $Organisation.Customer -and $_.TrunkName -eq $Organisation.TrunkName} | select -ExpandProperty DDI)

     foreach($ddirange in $DDIRanges){
            $rangeregex = GetRegexStatement $ddirange.Begin $ddirange.End
                if($rangeregex){
                   
                    $SparkInputFieldValue = $rangeregex
                    $Enabled = 1
        
                    $Description = "Allow calls from $($ddirange.Begin.tostring()) to $($ddirange.End.tostring())"
                    
                    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'=$Description;'InputField'=0;'InputFieldValue'=$SparkInputFieldValue;'MatchType'=1;'OutputField'=0;'OutputFieldValue'='+64\1';})
                    $tEntriesrequired += $object
                }
        
        }
            
       
}
#endregion

#region "Customer To Teams Entries (Translated)"
$Organisations = $TranslateToPSTNCustomerDDIInfo | select Customer, trunkname -Unique
foreach($Organisation in $Organisations){
    $TableName = "To Teams - $($Organisation.Customer)"
    $DDIs = $TranslateToPSTNCustomerDDIInfo | where {$_.Customer -eq $Organisation.Customer -and $_.TrunkName -eq $Organisation.TrunkName} | select DDI, TranslateTo

     foreach($DDI in $DDIs){
        if($DDI.TranslateTo.tostring() -match "(?:\+64|0)?(\d{8,})$"){
            $OutputfieldValue = "+64$($matches[1])"
        }else{
            $OutputfieldValue = "+64\1"
        }
        
        $InputFieldValue = ".*($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
        $Enabled = 1
        
        if($InputFieldValue -and $OutputfieldValue){
            $Description = "Translate inbound calls from $($InputFieldValue) to $($OutputfieldValue)"
            $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'=$Description;'InputField'=0;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'OutputField'=0;'OutputFieldValue'=$OutputfieldValue;})
            $tEntriesrequired += $object
        }
        
    }
            
       
}


#endregion

#region "Customer To PSTN Entries (Divert back to PSTN)"
$Organisations = $DivertToPSTNCustomerDDIInfo | select Customer, trunkname -Unique
foreach($Organisation in $Organisations){
    $TableName = "To PSTN - $($Organisation.Customer) - Divert"
    $DDIs = $DivertToPSTNCustomerDDIInfo | where {$_.Customer -eq $Organisation.Customer -and $_.TrunkName -eq $Organisation.TrunkName} | select DDI, DivertTo

     foreach($DDI in $DDIs){
        if($DDI.DivertTo.tostring() -match "(?:\+64|0)?(\d{8,})$"){
            $DDILength = $matches[1].length
            $OutputfieldValue = "0$($matches[1])"
        }else{
            $OutputfieldValue = "0\1"
        }
        
        $InputFieldValue = ".*($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length - 8, 8)))$"
        $Enabled = 1
        
        if($InputFieldValue -and $OutputfieldValue){
            $Description = "Divert Inbound PSTN call from DDI $($InputFieldValue) to DDI $($OutputfieldValue)"
            $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=$Enabled;'TTEDescription'=$Description;'InputField'=0;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'Outputfield'=10;'OutputFieldValue'='\1';})
            $tEntriesrequired += $object

            $Description = "Divert Inbound PSTN call from DDI $($InputFieldValue) to DDI $($OutputfieldValue)"
            $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=$Enabled;'TTEDescription'=$Description;'InputField'=0;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'Outputfield'=0;'OutputFieldValue'=$OutputfieldValue;})
            $tEntriesrequired += $object

        }
        
    }
            
       
}


#endregion

#region "Customer To Enghouse Entries"
$Organisations = $ToEnghouseCustomerDDIInfo | select Customer, trunkname -Unique
foreach($Organisation in $Organisations){
    $TableName = "To Enghouse - $($Organisation.Customer)"

    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'='Normalise Inbound International DDI';'InputField'=3;'InputFieldValue'='^(?:00|\+(?!64))(\d+)';'MatchType'=1;'OutputField'=3;'OutputFieldValue'='+\1';})
    $tEntriesrequired += $object

    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'='Normalise Inbound National DDI';'InputField'=3;'InputFieldValue'='^(?:0|\+64)(\d+)';'MatchType'=1;'OutputField'=3;'OutputFieldValue'='+64\1';})
    $tEntriesrequired += $object

    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'='Passthrough';'InputField'=3;'InputFieldValue'='(.*)';'MatchType'=1;'OutputField'=3;'OutputFieldValue'='\1';})
    $tEntriesrequired += $object

    $DDIRanges = GetRanges $($ToEnghouseCustomerDDIInfo | where {$_.Customer -eq $Organisation.Customer -and $_.TrunkName -eq $Organisation.TrunkName} | select -ExpandProperty DDI)

     foreach($ddirange in $DDIRanges){
            $rangeregex = GetRegexStatement $ddirange.Begin $ddirange.End
                if($rangeregex){
                   
                    $Enabled = 1
        
                    $Description = "Allow calls from $($ddirange.Begin.tostring()) to $($ddirange.End.tostring())"
                    
                    $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'=$Description;'InputField'=0;'InputFieldValue'=$rangeregex;'MatchType'=1;'OutputField'=0;'OutputFieldValue'='+64\1';})
                    $tEntriesrequired += $object
                }
        
        }
            
       
}
#endregion

#region "Customer To Enghouse Entries (Translated)"
$Organisations = $ToEnghouseTranslateCustomerDDIInfo | select Customer, trunkname -Unique
foreach($Organisation in $Organisations){
    $TableName = "To Enghouse - $($Organisation.Customer)"
    $DDIs = $ToEnghouseTranslateCustomerDDIInfo | where {$_.Customer -eq $Organisation.Customer -and $_.TrunkName -eq $Organisation.TrunkName} | select DDI, TranslateTo

     foreach($DDI in $DDIs){
        if($DDI.TranslateTo.tostring() -match "(?:\+64|0)?(\d{8,})$"){
            $OutputfieldValue = "+64$($matches[1])"
        }else{
            $OutputfieldValue = "+64\1"
        }
        
        $InputFieldValue = ".*($($ddi.ddi.tostring().substring($ddi.ddi.tostring().Length -8, 8)))$"
        $Enabled = 1
        
        if($InputFieldValue -and $OutputfieldValue){
            $Description = "Translate inbound calls from $($InputFieldValue) to $($OutputfieldValue)"
            $object = New-Object –Type PSObject –Prop(@{'ttDescription'=$TableName;'Enabled'=1;'TTEDescription'=$Description;'InputField'=0;'InputFieldValue'=$InputFieldValue;'MatchType'=1;'OutputField'=0;'OutputFieldValue'=$OutputfieldValue;})
            $tEntriesrequired += $object
        }
        
    }
            
       
}


#endregion


#Determine records to Add
    foreach($profile in $tEntriesrequired){
        if(!($TTTable | Where-Object {$_.Enabled -eq $profile.Enabled -and $_.InputField -eq $profile.InputField -and $_.InputFieldValue -eq $profile.InputFieldValue -and $_.MatchType -eq $profile.MatchType -and $_.OutputField -eq $profile.OutputField -and $_.OutputFieldValue -eq $profile.OutputFieldValue -and $_.ttDescription -eq $profile.ttDescription -and $_.TTEDescription -eq $profile.TTEDescription})){
            $tEntriestoadd += $profile
            $ToAdd = $profile
        }
    }

    
#Determine records to Delete
    foreach($profile in $TTTable){
        if(!($tEntriesrequired | Where-Object {$_.Enabled -eq $profile.Enabled -and $_.InputField -eq $profile.InputField -and $_.InputFieldValue -eq $profile.InputFieldValue -and $_.MatchType -eq $profile.MatchType -and $_.OutputField -eq $profile.OutputField -and $_.OutputFieldValue -eq $profile.OutputFieldValue -and $_.ttDescription -eq $profile.ttDescription -and $_.TTEDescription -eq $profile.TTEDescription})){
            $tEntriestodelete += $profile
            $ToDelete = $profile
        }
    }
    $tEntriestodelete = $tEntriestodelete | where {$_.TTEHref}

    #Write-Host "Debug"
    #Write-Host "ToAdd: " $ToAdd.OutputFieldValue
    #Write-Host "ToDelete: " $ToAdd.OutputFieldValue
    #Write-Host "Equality: " ($ToAdd.OutputFieldValue -eq $ToDelete.OutputFieldValue)
    #Write-Host "Equality (Add): " ($ToAdd.OutputFieldValue -eq "")
    #Write-Host "Equality (Delete): " ($ToDelete.OutputFieldValue -eq "")

    if (!($tEntriestoadd) -and !($tEntriestodelete)){
        Write-Host " - Success" -ForegroundColor Green
    }else{
        Write-Host
    }

    foreach($profile in $tEntriestoadd){
        $TableInfo = $TTTable | Where-Object {$_.TTDescription -eq $profile.TTDescription} | select ttdescription, tthref, ttid -First 1
        $TTID = $(GetLastId $($TableInfo.ttid))
        $NextTTEId = 1 + $(GetLastId $($TTTable | Where-Object {$_.TTDescription -eq $profile.TTDescription} | select -ExpandProperty tteidsplit -ErrorAction SilentlyContinue))
        TransformationTableEntry_Add $sbcfqdn $TTID $tableinfo.ttdescription $TableInfo.tthref $NextTTEId $profile.Enabled $profile.TTEDescription $profile.InputField $profile.InputFieldValue $profile.MatchType $profile.OutputField $profile.OutputFieldValue
    }

    foreach($profile in $tEntriestodelete){
        TransformationTableEntry_Delete $sbcfqdn $profile.TTEDescription $profile.ttehref
    }

}

#endregion Transformation Table Entries


#region Local Users

function LocalUser_Get($sbcfqdn) {
$global:LocalUserDetails = @()
Write-Host "Loading Local User Configuration from SBC" -ForegroundColor Magenta

[xml]$LocalUsers = $(Invoke-RestMethod -uri "https://$($sbcfqdn)/rest/localuser" -Method get -WebSession $sbcauthsession).trim()
#write-host "Got Local Users"

    foreach ($LocalUser in $LocalUsers.root.localuser_list.localuser_pk){
        [xml]$LocalUserDetail = $(Invoke-RestMethod -uri $LocalUser.href -Method get -WebSession $sbcauthsession).trim()
        $global:LocalUserDetails += $LocalUserDetail.root.localuser
    }
    write-host "Done"
}

function LocalUser_Add($sbcfqdn, $Group, $Password, $Username){
    Write-Host "Adding local user for $($Username)" -ForegroundColor White
    $NextId = 1004
    
    $url = "https://$($sbcfqdn)/rest/localuser/$($NextId)"
        
    $args1 = "AccountActive=1&Group=$($Group)&Password=$($Password)&Username=$($Username))"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Put -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green;
        
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }

}

function LocalUser_Modify($sbcfqdn, $Password){
    Write-Host "Modifying local user for $($Password)" -ForegroundColor White
    $Id = 1003
    
    $url = "https://$($sbcfqdn)/rest/localuser/$($Id)"
        
    $args1 = "Password=$($Password))"
    [xml]$result = $(Invoke-RestMethod -Uri $url -Body $args1 -Method Post -WebSession $sbcauthsession).trim()
    if($result.root.status.http_code -eq 200){
        Write-Host "Operation Success" -ForegroundColor Green;
        
    }else{
        Write-Host "Operation Failure - $($result.root.status.app_status.app_status_entry.code): $(GetAppErrorCode $($result.root.status.app_status.app_status_entry.code))" -ForegroundColor Red; read-host
    }

}


#endregion





#region Menu Display
function Menu__Main{
Do {
cls
	if ($InitialMenuOption){
		$MenuOption = $InitialMenuOption
		Remove-Variable InitialMenuOption
	} else {
		$MenuOption = Read-Host $Menu
	}
switch($MenuOption){
		01	{	New-365CallingDDI				;pause}	#AddDDI
        02	{	Remove-365CallingDDI			;pause}	#RemoveDDI
        03	{	Enable-365CallingDDI			;pause}	#EnableDDI
        04	{	Disable-365CallingDDI			;pause}	#DisableDDI
        05	{	New-365CallingDDIDivert		    ;pause}	#DDIDivert
        06	{	Remove-365CallingDDIDivert		;pause}	#RemoveDDIDivert
        07	{	Query-365CallingDDI			    ;pause}	#QueryDDI
        08	{	Move-365CallingDDI				;pause}	#MoveDDI
        11	{	Set-365CallingCustomer			;pause}	#AddCustomer
        12	{	Remove-365CallingCustomer		;pause}	#RemoveCustomer
        13	{	Get-365CallingCustomer			;pause}	#QueryCustomer
        21	{	Set-365CallingGlobalSettings	;pause}	#ConfigureGlobalSettings

        98  {   LoginToSBC                      ;pause} #LoginToSBC
        99  {   exit                                  } #Exit
}
} while ($MenuOption -notmatch {^99$|^x$})
}
#endregion


if(!($nogit)){
    CommitToSourceControl
}


$365CallingSBCFQDNs = GetActiveSBCs

if($365CallingSBCFQDNs){
    cls
foreach($sbcfqdn in $365CallingSBCFQDNs){
    if($sbcfqdn -match ".*\..*"){
            $trunkconfigdata = $TrunkData | where {$_.TrunkName -match "Shared\d{2}" -and $_.sbcfqdn -eq $sbcfqdn}
            $TrunkPilotDDI = $trunkconfigdata.UserName | select -first 1
            $realms = $trunkconfigdata | select realm | sort realm -Unique
            $usernames = $trunkconfigdata | select username, trunkname, realm | sort username, trunkname, realm -Unique
            $trunknames = $trunkconfigdata | select TrunkName | sort TrunkName -Unique
            $ToTeamsCustomerDDIInfo = $DDIData | where {$_.DDIType -ne "Disabled" -and $_.DDIType -ne "Pilot" -and $_.DDIType -ne "Enghouse" -and $_.DDIType -ne "Unallocated"} | select TrunkName, Customer, SBCShortName, DDI | sort TrunkName, Customer
            $ToTeamsCustomerTrunkInfo = $ToTeamsCustomerDDIInfo | select TrunkName, Customer -unique | sort TrunkName, Customer 
            $ToEnghouseCustomerDDIInfo = $DDIData | where {$_.DDIType -eq "Enghouse"} | select TrunkName, Customer, DDI | sort TrunkName, Customer, DDI
            $ToEnghouseTranslateCustomerDDIInfo = $DDIData | where {$_.DDIType -eq "Enghouse" -and $_.DDIType -ne "Pilot" -and $_.DDIType -ne "Enghouse" -and $_.DDIType -ne "Unallocated" -and $_.TranslateTo} | select TrunkName, Customer, DDI, TranslateTo | sort TrunkName, Customer
            $ToEnghouseCustomerTrunkInfo = $ToEnghouseCustomerDDIInfo | select TrunkName, Customer -unique | sort TrunkName, Customer 
            $EnghouseDivertDDI = $TrunkData | where {$_.Vendor -match "Enghouse" -and $_.sbcfqdn -eq $sbcfqdn} | select -ExpandProperty ddifordiverts

            $DivertToPSTNCustomerDDIInfo = $DDIData | where {$_.DDIType -ne "Disabled" -and $_.DDIType -ne "Pilot" -and $_.DDIType -ne "Enghouse" -and $_.DDIType -ne "Unallocated" -and $_.divertto} | select Customer, TrunkName, DDI, DivertTo | sort Customer
            $DivertToPSTNCustomerTrunkInfo = $DivertToPSTNCustomerDDIInfo | select TrunkName, Customer -unique | sort TrunkName, Customer 
            $TranslateToPSTNCustomerDDIInfo = $DDIData | where {$_.DDIType -ne "Disabled" -and $_.DDIType -ne "Pilot" -and $_.DDIType -ne "Enghouse" -and $_.DDIType -ne "Unallocated" -and $_.TranslateTo } | select TrunkName, Customer, DDI, TranslateTo | sort TrunkName, Customer
            $AnonymousCustomerDDIInfo = $DDIData | where {$_.DDIType -ne "Disabled" -and $_.DDIType -ne "Pilot" -and $_.DDIType -ne "Enghouse" -and $_.DDIType -ne "Unallocated" -and $_.HideOutboundDDI } | select TrunkName, Customer, DDI, MaskAs | sort TrunkName, Customer

            _sbccore_login $sbcfqdn
            _sbccore_loaddata $sbcfqdn
            
            SetSBCTime $sbcfqdn
            StaticIPRoute_Validate $sbcfqdn
            StaticHost_Validate $sbcfqdn
            ToneTable_Validate $sbcfqdn
            MediaProfile_Validate $sbcfqdn
            MediaCryptoProfile_Validate $sbcfqdn
            MediaList_Validate $sbcfqdn
            SIPProfile_Validate $sbcfqdn
            SIPTLSProfile_Validate $sbcfqdn
            MessageManipulationElements_Validate $sbcfqdn $realms $usernames "ADD"
            MessageManipulationTables_Validate $sbcfqdn $Realms $TrunkNames
            MessageManipulationRules_Validate $sbcfqdn $usernames $Realms
            MessageManipulationElements_Validate $sbcfqdn $realms $usernames "DELETE"
            TransformationTable_Validate $sbcfqdn $ToTeamsCustomerTrunkInfo $DivertToPSTNCustomerTrunkInfo $ToEnghouseCustomerTrunkInfo
            TransformationTableEntry_Validate $sbcfqdn $ToTeamsCustomerDDIInfo $TranslateToPSTNCustomerDDIInfo $DivertToPSTNCustomerDDIInfo $AnonymousCustomerDDIInfo $ToEnghouseCustomerDDIInfo $ToEnghouseTranslateCustomerDDIInfo $TrunkPilotDDI $EnghouseDivertDDI
            RemoteAuthTable_Validate $sbcfqdn 
            SIPContactRegister_Validate $sbcfqdn
            SIPServerTable_Validate $sbcfqdn
            SIPServerEntry_Validate $sbcfqdn
            RoutingTable_Validate $sbcfqdn
            SIPSignallingGroup_Validate $sbcfqdn $ToTeamsCustomerDDIInfo $ToEnghouseCustomerDDIInfo
            RoutingEntry_Validate $sbcfqdn $ToTeamsCustomerDDIInfo $DivertToPSTNCustomerDDIInfo $ToEnghouseCustomerDDIInfo
            #LocalUser_Get $sbcfqdn
            #Write-Host "Got Local Users"
            #LocalUser_Modify $sbcfqdn "Password1" 
            #LocalUser_Add $sbcfqdn 3 "Password1" "testuser"

            #foreach($trunkinfo in $trunkconfigdata){
            #   SIPContactRegister_CreateSparkEntry $sbcfqdn $TrunkInfo.TrunkName $TrunkInfo.Username
               
            #    
            #    RoutingTable_CreatePSTN  $sbcfqdn $trunkinfo.TrunkName
            #    RoutingTable_CreateTeams $sbcfqdn $trunkinfo.TrunkName
            #    MessageManipulationRules_CreateCustomer $sbcfqdn $trunkinfo.TrunkName $trunkinfo.Realm $trunkinfo.Username
            #    MessageManipulationRules_CreateCommonRealm $sbcfqdn $trunkinfo.Realm
            #}
            

          

             
     
    
    }else{
         Write-Host "Connect to $sbcfqdn failed. No configuration changes were made." -ForegroundColor Red
            Read-Host
    }

}
}else{
    Write-Host "No contactable SBCs found." -ForegroundColor Red
}




